

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Mar 13 05:54:53 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F15325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	stringtext8,global,class=STRCODE,delta=2
    12                           	psect	stringtext9,global,class=STRCODE,delta=2
    13                           	psect	stringtext10,global,class=STRCODE,delta=2
    14                           	psect	stringtext11,global,class=STRCODE,delta=2
    15                           	psect	stringtext12,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	dabs	1,0x7E,2
    64  0000                     
    65                           ; Version 1.42
    66                           ; Generated 13/04/2017 GMT
    67                           ; 
    68                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC16F15325 Definitions
    97                           ; 
    98                           ; SFR Addresses
    99  0000                     	;# 
   100  0001                     	;# 
   101  0002                     	;# 
   102  0003                     	;# 
   103  0004                     	;# 
   104  0005                     	;# 
   105  0006                     	;# 
   106  0007                     	;# 
   107  0008                     	;# 
   108  0009                     	;# 
   109  000A                     	;# 
   110  000B                     	;# 
   111  000C                     	;# 
   112  000E                     	;# 
   113  0012                     	;# 
   114  0014                     	;# 
   115  0018                     	;# 
   116  001A                     	;# 
   117  009B                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  009F                     	;# 
   123  0119                     	;# 
   124  0119                     	;# 
   125  0119                     	;# 
   126  011A                     	;# 
   127  011A                     	;# 
   128  011A                     	;# 
   129  011B                     	;# 
   130  011B                     	;# 
   131  011B                     	;# 
   132  011B                     	;# 
   133  011B                     	;# 
   134  011C                     	;# 
   135  011C                     	;# 
   136  011C                     	;# 
   137  011D                     	;# 
   138  011D                     	;# 
   139  011D                     	;# 
   140  011E                     	;# 
   141  011E                     	;# 
   142  011E                     	;# 
   143  011F                     	;# 
   144  011F                     	;# 
   145  011F                     	;# 
   146  011F                     	;# 
   147  011F                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  018E                     	;# 
   151  018F                     	;# 
   152  0190                     	;# 
   153  0191                     	;# 
   154  0192                     	;# 
   155  020C                     	;# 
   156  020C                     	;# 
   157  020D                     	;# 
   158  020E                     	;# 
   159  020F                     	;# 
   160  020F                     	;# 
   161  0210                     	;# 
   162  0210                     	;# 
   163  0211                     	;# 
   164  0211                     	;# 
   165  028C                     	;# 
   166  028C                     	;# 
   167  028D                     	;# 
   168  028D                     	;# 
   169  028E                     	;# 
   170  028F                     	;# 
   171  0290                     	;# 
   172  0291                     	;# 
   173  030C                     	;# 
   174  030C                     	;# 
   175  030D                     	;# 
   176  030E                     	;# 
   177  030F                     	;# 
   178  0310                     	;# 
   179  0310                     	;# 
   180  0311                     	;# 
   181  0312                     	;# 
   182  0313                     	;# 
   183  0314                     	;# 
   184  0315                     	;# 
   185  0316                     	;# 
   186  0318                     	;# 
   187  0319                     	;# 
   188  031A                     	;# 
   189  031C                     	;# 
   190  031D                     	;# 
   191  031E                     	;# 
   192  038C                     	;# 
   193  038D                     	;# 
   194  038E                     	;# 
   195  058C                     	;# 
   196  058C                     	;# 
   197  058D                     	;# 
   198  058E                     	;# 
   199  058F                     	;# 
   200  058F                     	;# 
   201  0590                     	;# 
   202  0591                     	;# 
   203  0592                     	;# 
   204  0593                     	;# 
   205  059C                     	;# 
   206  059C                     	;# 
   207  059D                     	;# 
   208  059D                     	;# 
   209  059E                     	;# 
   210  059F                     	;# 
   211  060C                     	;# 
   212  060D                     	;# 
   213  060E                     	;# 
   214  060F                     	;# 
   215  0610                     	;# 
   216  0611                     	;# 
   217  0612                     	;# 
   218  0613                     	;# 
   219  0614                     	;# 
   220  070C                     	;# 
   221  070D                     	;# 
   222  070E                     	;# 
   223  070F                     	;# 
   224  0710                     	;# 
   225  0711                     	;# 
   226  0712                     	;# 
   227  0713                     	;# 
   228  0716                     	;# 
   229  0717                     	;# 
   230  0718                     	;# 
   231  0719                     	;# 
   232  071A                     	;# 
   233  071B                     	;# 
   234  071C                     	;# 
   235  071D                     	;# 
   236  0796                     	;# 
   237  0797                     	;# 
   238  0798                     	;# 
   239  0799                     	;# 
   240  079A                     	;# 
   241  079B                     	;# 
   242  080C                     	;# 
   243  080D                     	;# 
   244  080E                     	;# 
   245  080F                     	;# 
   246  0810                     	;# 
   247  0811                     	;# 
   248  0812                     	;# 
   249  0813                     	;# 
   250  0814                     	;# 
   251  081A                     	;# 
   252  081A                     	;# 
   253  081B                     	;# 
   254  081C                     	;# 
   255  081C                     	;# 
   256  081D                     	;# 
   257  081E                     	;# 
   258  081F                     	;# 
   259  088C                     	;# 
   260  088D                     	;# 
   261  088E                     	;# 
   262  088F                     	;# 
   263  0890                     	;# 
   264  0891                     	;# 
   265  0892                     	;# 
   266  0893                     	;# 
   267  0895                     	;# 
   268  0896                     	;# 
   269  090C                     	;# 
   270  090E                     	;# 
   271  090F                     	;# 
   272  091F                     	;# 
   273  098F                     	;# 
   274  098F                     	;# 
   275  0990                     	;# 
   276  0991                     	;# 
   277  0992                     	;# 
   278  0993                     	;# 
   279  0994                     	;# 
   280  0995                     	;# 
   281  0996                     	;# 
   282  0997                     	;# 
   283  0A19                     	;# 
   284  0A19                     	;# 
   285  0A1A                     	;# 
   286  0A1A                     	;# 
   287  0A1B                     	;# 
   288  0A1B                     	;# 
   289  0A1B                     	;# 
   290  0A1C                     	;# 
   291  0A1C                     	;# 
   292  0A1D                     	;# 
   293  0A1D                     	;# 
   294  0A1E                     	;# 
   295  0A1E                     	;# 
   296  0A1F                     	;# 
   297  0A1F                     	;# 
   298  0A1F                     	;# 
   299  1E0F                     	;# 
   300  1E10                     	;# 
   301  1E11                     	;# 
   302  1E12                     	;# 
   303  1E13                     	;# 
   304  1E14                     	;# 
   305  1E15                     	;# 
   306  1E16                     	;# 
   307  1E17                     	;# 
   308  1E18                     	;# 
   309  1E19                     	;# 
   310  1E1A                     	;# 
   311  1E1B                     	;# 
   312  1E1C                     	;# 
   313  1E1D                     	;# 
   314  1E1E                     	;# 
   315  1E1F                     	;# 
   316  1E20                     	;# 
   317  1E21                     	;# 
   318  1E22                     	;# 
   319  1E23                     	;# 
   320  1E24                     	;# 
   321  1E25                     	;# 
   322  1E26                     	;# 
   323  1E27                     	;# 
   324  1E28                     	;# 
   325  1E29                     	;# 
   326  1E2A                     	;# 
   327  1E2B                     	;# 
   328  1E2C                     	;# 
   329  1E2D                     	;# 
   330  1E2E                     	;# 
   331  1E2F                     	;# 
   332  1E30                     	;# 
   333  1E31                     	;# 
   334  1E32                     	;# 
   335  1E33                     	;# 
   336  1E34                     	;# 
   337  1E35                     	;# 
   338  1E36                     	;# 
   339  1E37                     	;# 
   340  1E8F                     	;# 
   341  1E90                     	;# 
   342  1E91                     	;# 
   343  1E92                     	;# 
   344  1E93                     	;# 
   345  1E9C                     	;# 
   346  1EA1                     	;# 
   347  1EA2                     	;# 
   348  1EB1                     	;# 
   349  1EBB                     	;# 
   350  1EBC                     	;# 
   351  1EBD                     	;# 
   352  1EBE                     	;# 
   353  1EC3                     	;# 
   354  1EC5                     	;# 
   355  1EC6                     	;# 
   356  1EC7                     	;# 
   357  1ECB                     	;# 
   358  1ECC                     	;# 
   359  1ECD                     	;# 
   360  1ECE                     	;# 
   361  1F10                     	;# 
   362  1F11                     	;# 
   363  1F12                     	;# 
   364  1F13                     	;# 
   365  1F14                     	;# 
   366  1F15                     	;# 
   367  1F20                     	;# 
   368  1F21                     	;# 
   369  1F22                     	;# 
   370  1F23                     	;# 
   371  1F24                     	;# 
   372  1F25                     	;# 
   373  1F38                     	;# 
   374  1F39                     	;# 
   375  1F3A                     	;# 
   376  1F3B                     	;# 
   377  1F3C                     	;# 
   378  1F3D                     	;# 
   379  1F3E                     	;# 
   380  1F3F                     	;# 
   381  1F4E                     	;# 
   382  1F4F                     	;# 
   383  1F50                     	;# 
   384  1F51                     	;# 
   385  1F52                     	;# 
   386  1F53                     	;# 
   387  1F54                     	;# 
   388  1F55                     	;# 
   389  1FE4                     	;# 
   390  1FE5                     	;# 
   391  1FE6                     	;# 
   392  1FE7                     	;# 
   393  1FE8                     	;# 
   394  1FE8                     	;# 
   395  1FE9                     	;# 
   396  1FEA                     	;# 
   397  1FEA                     	;# 
   398  1FEB                     	;# 
   399  1FED                     	;# 
   400  1FEE                     	;# 
   401  1FEF                     	;# 
   402  0000                     	;# 
   403  0001                     	;# 
   404  0002                     	;# 
   405  0003                     	;# 
   406  0004                     	;# 
   407  0005                     	;# 
   408  0006                     	;# 
   409  0007                     	;# 
   410  0008                     	;# 
   411  0009                     	;# 
   412  000A                     	;# 
   413  000B                     	;# 
   414  000C                     	;# 
   415  000E                     	;# 
   416  0012                     	;# 
   417  0014                     	;# 
   418  0018                     	;# 
   419  001A                     	;# 
   420  009B                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  009F                     	;# 
   426  0119                     	;# 
   427  0119                     	;# 
   428  0119                     	;# 
   429  011A                     	;# 
   430  011A                     	;# 
   431  011A                     	;# 
   432  011B                     	;# 
   433  011B                     	;# 
   434  011B                     	;# 
   435  011B                     	;# 
   436  011B                     	;# 
   437  011C                     	;# 
   438  011C                     	;# 
   439  011C                     	;# 
   440  011D                     	;# 
   441  011D                     	;# 
   442  011D                     	;# 
   443  011E                     	;# 
   444  011E                     	;# 
   445  011E                     	;# 
   446  011F                     	;# 
   447  011F                     	;# 
   448  011F                     	;# 
   449  011F                     	;# 
   450  011F                     	;# 
   451  018C                     	;# 
   452  018D                     	;# 
   453  018E                     	;# 
   454  018F                     	;# 
   455  0190                     	;# 
   456  0191                     	;# 
   457  0192                     	;# 
   458  020C                     	;# 
   459  020C                     	;# 
   460  020D                     	;# 
   461  020E                     	;# 
   462  020F                     	;# 
   463  020F                     	;# 
   464  0210                     	;# 
   465  0210                     	;# 
   466  0211                     	;# 
   467  0211                     	;# 
   468  028C                     	;# 
   469  028C                     	;# 
   470  028D                     	;# 
   471  028D                     	;# 
   472  028E                     	;# 
   473  028F                     	;# 
   474  0290                     	;# 
   475  0291                     	;# 
   476  030C                     	;# 
   477  030C                     	;# 
   478  030D                     	;# 
   479  030E                     	;# 
   480  030F                     	;# 
   481  0310                     	;# 
   482  0310                     	;# 
   483  0311                     	;# 
   484  0312                     	;# 
   485  0313                     	;# 
   486  0314                     	;# 
   487  0315                     	;# 
   488  0316                     	;# 
   489  0318                     	;# 
   490  0319                     	;# 
   491  031A                     	;# 
   492  031C                     	;# 
   493  031D                     	;# 
   494  031E                     	;# 
   495  038C                     	;# 
   496  038D                     	;# 
   497  038E                     	;# 
   498  058C                     	;# 
   499  058C                     	;# 
   500  058D                     	;# 
   501  058E                     	;# 
   502  058F                     	;# 
   503  058F                     	;# 
   504  0590                     	;# 
   505  0591                     	;# 
   506  0592                     	;# 
   507  0593                     	;# 
   508  059C                     	;# 
   509  059C                     	;# 
   510  059D                     	;# 
   511  059D                     	;# 
   512  059E                     	;# 
   513  059F                     	;# 
   514  060C                     	;# 
   515  060D                     	;# 
   516  060E                     	;# 
   517  060F                     	;# 
   518  0610                     	;# 
   519  0611                     	;# 
   520  0612                     	;# 
   521  0613                     	;# 
   522  0614                     	;# 
   523  070C                     	;# 
   524  070D                     	;# 
   525  070E                     	;# 
   526  070F                     	;# 
   527  0710                     	;# 
   528  0711                     	;# 
   529  0712                     	;# 
   530  0713                     	;# 
   531  0716                     	;# 
   532  0717                     	;# 
   533  0718                     	;# 
   534  0719                     	;# 
   535  071A                     	;# 
   536  071B                     	;# 
   537  071C                     	;# 
   538  071D                     	;# 
   539  0796                     	;# 
   540  0797                     	;# 
   541  0798                     	;# 
   542  0799                     	;# 
   543  079A                     	;# 
   544  079B                     	;# 
   545  080C                     	;# 
   546  080D                     	;# 
   547  080E                     	;# 
   548  080F                     	;# 
   549  0810                     	;# 
   550  0811                     	;# 
   551  0812                     	;# 
   552  0813                     	;# 
   553  0814                     	;# 
   554  081A                     	;# 
   555  081A                     	;# 
   556  081B                     	;# 
   557  081C                     	;# 
   558  081C                     	;# 
   559  081D                     	;# 
   560  081E                     	;# 
   561  081F                     	;# 
   562  088C                     	;# 
   563  088D                     	;# 
   564  088E                     	;# 
   565  088F                     	;# 
   566  0890                     	;# 
   567  0891                     	;# 
   568  0892                     	;# 
   569  0893                     	;# 
   570  0895                     	;# 
   571  0896                     	;# 
   572  090C                     	;# 
   573  090E                     	;# 
   574  090F                     	;# 
   575  091F                     	;# 
   576  098F                     	;# 
   577  098F                     	;# 
   578  0990                     	;# 
   579  0991                     	;# 
   580  0992                     	;# 
   581  0993                     	;# 
   582  0994                     	;# 
   583  0995                     	;# 
   584  0996                     	;# 
   585  0997                     	;# 
   586  0A19                     	;# 
   587  0A19                     	;# 
   588  0A1A                     	;# 
   589  0A1A                     	;# 
   590  0A1B                     	;# 
   591  0A1B                     	;# 
   592  0A1B                     	;# 
   593  0A1C                     	;# 
   594  0A1C                     	;# 
   595  0A1D                     	;# 
   596  0A1D                     	;# 
   597  0A1E                     	;# 
   598  0A1E                     	;# 
   599  0A1F                     	;# 
   600  0A1F                     	;# 
   601  0A1F                     	;# 
   602  1E0F                     	;# 
   603  1E10                     	;# 
   604  1E11                     	;# 
   605  1E12                     	;# 
   606  1E13                     	;# 
   607  1E14                     	;# 
   608  1E15                     	;# 
   609  1E16                     	;# 
   610  1E17                     	;# 
   611  1E18                     	;# 
   612  1E19                     	;# 
   613  1E1A                     	;# 
   614  1E1B                     	;# 
   615  1E1C                     	;# 
   616  1E1D                     	;# 
   617  1E1E                     	;# 
   618  1E1F                     	;# 
   619  1E20                     	;# 
   620  1E21                     	;# 
   621  1E22                     	;# 
   622  1E23                     	;# 
   623  1E24                     	;# 
   624  1E25                     	;# 
   625  1E26                     	;# 
   626  1E27                     	;# 
   627  1E28                     	;# 
   628  1E29                     	;# 
   629  1E2A                     	;# 
   630  1E2B                     	;# 
   631  1E2C                     	;# 
   632  1E2D                     	;# 
   633  1E2E                     	;# 
   634  1E2F                     	;# 
   635  1E30                     	;# 
   636  1E31                     	;# 
   637  1E32                     	;# 
   638  1E33                     	;# 
   639  1E34                     	;# 
   640  1E35                     	;# 
   641  1E36                     	;# 
   642  1E37                     	;# 
   643  1E8F                     	;# 
   644  1E90                     	;# 
   645  1E91                     	;# 
   646  1E92                     	;# 
   647  1E93                     	;# 
   648  1E9C                     	;# 
   649  1EA1                     	;# 
   650  1EA2                     	;# 
   651  1EB1                     	;# 
   652  1EBB                     	;# 
   653  1EBC                     	;# 
   654  1EBD                     	;# 
   655  1EBE                     	;# 
   656  1EC3                     	;# 
   657  1EC5                     	;# 
   658  1EC6                     	;# 
   659  1EC7                     	;# 
   660  1ECB                     	;# 
   661  1ECC                     	;# 
   662  1ECD                     	;# 
   663  1ECE                     	;# 
   664  1F10                     	;# 
   665  1F11                     	;# 
   666  1F12                     	;# 
   667  1F13                     	;# 
   668  1F14                     	;# 
   669  1F15                     	;# 
   670  1F20                     	;# 
   671  1F21                     	;# 
   672  1F22                     	;# 
   673  1F23                     	;# 
   674  1F24                     	;# 
   675  1F25                     	;# 
   676  1F38                     	;# 
   677  1F39                     	;# 
   678  1F3A                     	;# 
   679  1F3B                     	;# 
   680  1F3C                     	;# 
   681  1F3D                     	;# 
   682  1F3E                     	;# 
   683  1F3F                     	;# 
   684  1F4E                     	;# 
   685  1F4F                     	;# 
   686  1F50                     	;# 
   687  1F51                     	;# 
   688  1F52                     	;# 
   689  1F53                     	;# 
   690  1F54                     	;# 
   691  1F55                     	;# 
   692  1FE4                     	;# 
   693  1FE5                     	;# 
   694  1FE6                     	;# 
   695  1FE7                     	;# 
   696  1FE8                     	;# 
   697  1FE8                     	;# 
   698  1FE9                     	;# 
   699  1FEA                     	;# 
   700  1FEA                     	;# 
   701  1FEB                     	;# 
   702  1FED                     	;# 
   703  1FEE                     	;# 
   704  1FEF                     	;# 
   705  0000                     	;# 
   706  0001                     	;# 
   707  0002                     	;# 
   708  0003                     	;# 
   709  0004                     	;# 
   710  0005                     	;# 
   711  0006                     	;# 
   712  0007                     	;# 
   713  0008                     	;# 
   714  0009                     	;# 
   715  000A                     	;# 
   716  000B                     	;# 
   717  000C                     	;# 
   718  000E                     	;# 
   719  0012                     	;# 
   720  0014                     	;# 
   721  0018                     	;# 
   722  001A                     	;# 
   723  009B                     	;# 
   724  009B                     	;# 
   725  009C                     	;# 
   726  009D                     	;# 
   727  009E                     	;# 
   728  009F                     	;# 
   729  0119                     	;# 
   730  0119                     	;# 
   731  0119                     	;# 
   732  011A                     	;# 
   733  011A                     	;# 
   734  011A                     	;# 
   735  011B                     	;# 
   736  011B                     	;# 
   737  011B                     	;# 
   738  011B                     	;# 
   739  011B                     	;# 
   740  011C                     	;# 
   741  011C                     	;# 
   742  011C                     	;# 
   743  011D                     	;# 
   744  011D                     	;# 
   745  011D                     	;# 
   746  011E                     	;# 
   747  011E                     	;# 
   748  011E                     	;# 
   749  011F                     	;# 
   750  011F                     	;# 
   751  011F                     	;# 
   752  011F                     	;# 
   753  011F                     	;# 
   754  018C                     	;# 
   755  018D                     	;# 
   756  018E                     	;# 
   757  018F                     	;# 
   758  0190                     	;# 
   759  0191                     	;# 
   760  0192                     	;# 
   761  020C                     	;# 
   762  020C                     	;# 
   763  020D                     	;# 
   764  020E                     	;# 
   765  020F                     	;# 
   766  020F                     	;# 
   767  0210                     	;# 
   768  0210                     	;# 
   769  0211                     	;# 
   770  0211                     	;# 
   771  028C                     	;# 
   772  028C                     	;# 
   773  028D                     	;# 
   774  028D                     	;# 
   775  028E                     	;# 
   776  028F                     	;# 
   777  0290                     	;# 
   778  0291                     	;# 
   779  030C                     	;# 
   780  030C                     	;# 
   781  030D                     	;# 
   782  030E                     	;# 
   783  030F                     	;# 
   784  0310                     	;# 
   785  0310                     	;# 
   786  0311                     	;# 
   787  0312                     	;# 
   788  0313                     	;# 
   789  0314                     	;# 
   790  0315                     	;# 
   791  0316                     	;# 
   792  0318                     	;# 
   793  0319                     	;# 
   794  031A                     	;# 
   795  031C                     	;# 
   796  031D                     	;# 
   797  031E                     	;# 
   798  038C                     	;# 
   799  038D                     	;# 
   800  038E                     	;# 
   801  058C                     	;# 
   802  058C                     	;# 
   803  058D                     	;# 
   804  058E                     	;# 
   805  058F                     	;# 
   806  058F                     	;# 
   807  0590                     	;# 
   808  0591                     	;# 
   809  0592                     	;# 
   810  0593                     	;# 
   811  059C                     	;# 
   812  059C                     	;# 
   813  059D                     	;# 
   814  059D                     	;# 
   815  059E                     	;# 
   816  059F                     	;# 
   817  060C                     	;# 
   818  060D                     	;# 
   819  060E                     	;# 
   820  060F                     	;# 
   821  0610                     	;# 
   822  0611                     	;# 
   823  0612                     	;# 
   824  0613                     	;# 
   825  0614                     	;# 
   826  070C                     	;# 
   827  070D                     	;# 
   828  070E                     	;# 
   829  070F                     	;# 
   830  0710                     	;# 
   831  0711                     	;# 
   832  0712                     	;# 
   833  0713                     	;# 
   834  0716                     	;# 
   835  0717                     	;# 
   836  0718                     	;# 
   837  0719                     	;# 
   838  071A                     	;# 
   839  071B                     	;# 
   840  071C                     	;# 
   841  071D                     	;# 
   842  0796                     	;# 
   843  0797                     	;# 
   844  0798                     	;# 
   845  0799                     	;# 
   846  079A                     	;# 
   847  079B                     	;# 
   848  080C                     	;# 
   849  080D                     	;# 
   850  080E                     	;# 
   851  080F                     	;# 
   852  0810                     	;# 
   853  0811                     	;# 
   854  0812                     	;# 
   855  0813                     	;# 
   856  0814                     	;# 
   857  081A                     	;# 
   858  081A                     	;# 
   859  081B                     	;# 
   860  081C                     	;# 
   861  081C                     	;# 
   862  081D                     	;# 
   863  081E                     	;# 
   864  081F                     	;# 
   865  088C                     	;# 
   866  088D                     	;# 
   867  088E                     	;# 
   868  088F                     	;# 
   869  0890                     	;# 
   870  0891                     	;# 
   871  0892                     	;# 
   872  0893                     	;# 
   873  0895                     	;# 
   874  0896                     	;# 
   875  090C                     	;# 
   876  090E                     	;# 
   877  090F                     	;# 
   878  091F                     	;# 
   879  098F                     	;# 
   880  098F                     	;# 
   881  0990                     	;# 
   882  0991                     	;# 
   883  0992                     	;# 
   884  0993                     	;# 
   885  0994                     	;# 
   886  0995                     	;# 
   887  0996                     	;# 
   888  0997                     	;# 
   889  0A19                     	;# 
   890  0A19                     	;# 
   891  0A1A                     	;# 
   892  0A1A                     	;# 
   893  0A1B                     	;# 
   894  0A1B                     	;# 
   895  0A1B                     	;# 
   896  0A1C                     	;# 
   897  0A1C                     	;# 
   898  0A1D                     	;# 
   899  0A1D                     	;# 
   900  0A1E                     	;# 
   901  0A1E                     	;# 
   902  0A1F                     	;# 
   903  0A1F                     	;# 
   904  0A1F                     	;# 
   905  1E0F                     	;# 
   906  1E10                     	;# 
   907  1E11                     	;# 
   908  1E12                     	;# 
   909  1E13                     	;# 
   910  1E14                     	;# 
   911  1E15                     	;# 
   912  1E16                     	;# 
   913  1E17                     	;# 
   914  1E18                     	;# 
   915  1E19                     	;# 
   916  1E1A                     	;# 
   917  1E1B                     	;# 
   918  1E1C                     	;# 
   919  1E1D                     	;# 
   920  1E1E                     	;# 
   921  1E1F                     	;# 
   922  1E20                     	;# 
   923  1E21                     	;# 
   924  1E22                     	;# 
   925  1E23                     	;# 
   926  1E24                     	;# 
   927  1E25                     	;# 
   928  1E26                     	;# 
   929  1E27                     	;# 
   930  1E28                     	;# 
   931  1E29                     	;# 
   932  1E2A                     	;# 
   933  1E2B                     	;# 
   934  1E2C                     	;# 
   935  1E2D                     	;# 
   936  1E2E                     	;# 
   937  1E2F                     	;# 
   938  1E30                     	;# 
   939  1E31                     	;# 
   940  1E32                     	;# 
   941  1E33                     	;# 
   942  1E34                     	;# 
   943  1E35                     	;# 
   944  1E36                     	;# 
   945  1E37                     	;# 
   946  1E8F                     	;# 
   947  1E90                     	;# 
   948  1E91                     	;# 
   949  1E92                     	;# 
   950  1E93                     	;# 
   951  1E9C                     	;# 
   952  1EA1                     	;# 
   953  1EA2                     	;# 
   954  1EB1                     	;# 
   955  1EBB                     	;# 
   956  1EBC                     	;# 
   957  1EBD                     	;# 
   958  1EBE                     	;# 
   959  1EC3                     	;# 
   960  1EC5                     	;# 
   961  1EC6                     	;# 
   962  1EC7                     	;# 
   963  1ECB                     	;# 
   964  1ECC                     	;# 
   965  1ECD                     	;# 
   966  1ECE                     	;# 
   967  1F10                     	;# 
   968  1F11                     	;# 
   969  1F12                     	;# 
   970  1F13                     	;# 
   971  1F14                     	;# 
   972  1F15                     	;# 
   973  1F20                     	;# 
   974  1F21                     	;# 
   975  1F22                     	;# 
   976  1F23                     	;# 
   977  1F24                     	;# 
   978  1F25                     	;# 
   979  1F38                     	;# 
   980  1F39                     	;# 
   981  1F3A                     	;# 
   982  1F3B                     	;# 
   983  1F3C                     	;# 
   984  1F3D                     	;# 
   985  1F3E                     	;# 
   986  1F3F                     	;# 
   987  1F4E                     	;# 
   988  1F4F                     	;# 
   989  1F50                     	;# 
   990  1F51                     	;# 
   991  1F52                     	;# 
   992  1F53                     	;# 
   993  1F54                     	;# 
   994  1F55                     	;# 
   995  1FE4                     	;# 
   996  1FE5                     	;# 
   997  1FE6                     	;# 
   998  1FE7                     	;# 
   999  1FE8                     	;# 
  1000  1FE8                     	;# 
  1001  1FE9                     	;# 
  1002  1FEA                     	;# 
  1003  1FEA                     	;# 
  1004  1FEB                     	;# 
  1005  1FED                     	;# 
  1006  1FEE                     	;# 
  1007  1FEF                     	;# 
  1008                           
  1009                           	psect	stringtext1
  1010  1841                     __pstringtext1:	
  1011  1841                     _dpowers:	
  1012  1841  3401               	retlw	1
  1013  1842  3400               	retlw	0
  1014  1843  3400               	retlw	0
  1015  1844  3400               	retlw	0
  1016  1845  340A               	retlw	10
  1017  1846  3400               	retlw	0
  1018  1847  3400               	retlw	0
  1019  1848  3400               	retlw	0
  1020  1849  3464               	retlw	100
  1021  184A  3400               	retlw	0
  1022  184B  3400               	retlw	0
  1023  184C  3400               	retlw	0
  1024  184D  34E8               	retlw	232
  1025  184E  3403               	retlw	3
  1026  184F  3400               	retlw	0
  1027  1850  3400               	retlw	0
  1028  1851  3410               	retlw	16
  1029  1852  3427               	retlw	39
  1030  1853  3400               	retlw	0
  1031  1854  3400               	retlw	0
  1032  1855  34A0               	retlw	160
  1033  1856  3486               	retlw	134
  1034  1857  3401               	retlw	1
  1035  1858  3400               	retlw	0
  1036  1859  3440               	retlw	64
  1037  185A  3442               	retlw	66
  1038  185B  340F               	retlw	15
  1039  185C  3400               	retlw	0
  1040  185D  3480               	retlw	128
  1041  185E  3496               	retlw	150
  1042  185F  3498               	retlw	152
  1043  1860  3400               	retlw	0
  1044  1861  3400               	retlw	0
  1045  1862  34E1               	retlw	225
  1046  1863  34F5               	retlw	245
  1047  1864  3405               	retlw	5
  1048  1865  3400               	retlw	0
  1049  1866  34CA               	retlw	202
  1050  1867  349A               	retlw	154
  1051  1868  343B               	retlw	59
  1052  1869                     __end_of_dpowers:	
  1053                           
  1054                           	psect	stringtext2
  1055  1869                     __pstringtext2:	
  1056  1869                     __powers_:	
  1057  1869  3400               	retlw	0
  1058  186A  3480               	retlw	128
  1059  186B  343F               	retlw	63
  1060  186C  3400               	retlw	0
  1061  186D  3420               	retlw	32
  1062  186E  3441               	retlw	65
  1063  186F  3400               	retlw	0
  1064  1870  34C8               	retlw	200
  1065  1871  3442               	retlw	66
  1066  1872  3400               	retlw	0
  1067  1873  347A               	retlw	122
  1068  1874  3444               	retlw	68
  1069  1875  3440               	retlw	64
  1070  1876  341C               	retlw	28
  1071  1877  3446               	retlw	70
  1072  1878  3450               	retlw	80
  1073  1879  34C3               	retlw	195
  1074  187A  3447               	retlw	71
  1075  187B  3424               	retlw	36
  1076  187C  3474               	retlw	116
  1077  187D  3449               	retlw	73
  1078  187E  3497               	retlw	151
  1079  187F  3418               	retlw	24
  1080  1880  344B               	retlw	75
  1081  1881  34BC               	retlw	188
  1082  1882  34BE               	retlw	190
  1083  1883  344C               	retlw	76
  1084  1884  346B               	retlw	107
  1085  1885  346E               	retlw	110
  1086  1886  344E               	retlw	78
  1087  1887  3403               	retlw	3
  1088  1888  3415               	retlw	21
  1089  1889  3450               	retlw	80
  1090  188A  3479               	retlw	121
  1091  188B  34AD               	retlw	173
  1092  188C  3460               	retlw	96
  1093  188D  34F3               	retlw	243
  1094  188E  3449               	retlw	73
  1095  188F  3471               	retlw	113
  1096  1890                     __end_of__powers_:	
  1097                           
  1098                           	psect	stringtext3
  1099  1890                     __pstringtext3:	
  1100  1890                     __npowers_:	
  1101  1890  3400               	retlw	0
  1102  1891  3480               	retlw	128
  1103  1892  343F               	retlw	63
  1104  1893  34CD               	retlw	205
  1105  1894  34CC               	retlw	204
  1106  1895  343D               	retlw	61
  1107  1896  34D7               	retlw	215
  1108  1897  3423               	retlw	35
  1109  1898  343C               	retlw	60
  1110  1899  3412               	retlw	18
  1111  189A  3483               	retlw	131
  1112  189B  343A               	retlw	58
  1113  189C  34B7               	retlw	183
  1114  189D  34D1               	retlw	209
  1115  189E  3438               	retlw	56
  1116  189F  34C6               	retlw	198
  1117  18A0  3427               	retlw	39
  1118  18A1  3437               	retlw	55
  1119  18A2  3438               	retlw	56
  1120  18A3  3486               	retlw	134
  1121  18A4  3435               	retlw	53
  1122  18A5  34C0               	retlw	192
  1123  18A6  34D6               	retlw	214
  1124  18A7  3433               	retlw	51
  1125  18A8  34CC               	retlw	204
  1126  18A9  342B               	retlw	43
  1127  18AA  3432               	retlw	50
  1128  18AB  3470               	retlw	112
  1129  18AC  3489               	retlw	137
  1130  18AD  3430               	retlw	48
  1131  18AE  34E7               	retlw	231
  1132  18AF  34DB               	retlw	219
  1133  18B0  342E               	retlw	46
  1134  18B1  34E5               	retlw	229
  1135  18B2  343C               	retlw	60
  1136  18B3  341E               	retlw	30
  1137  18B4  3442               	retlw	66
  1138  18B5  34A2               	retlw	162
  1139  18B6  340D               	retlw	13
  1140  18B7                     __end_of__npowers_:	
  1141                           
  1142                           	psect	stringtext4
  1143  1800                     __pstringtext4:	
  1144  1800                     _hexpowers:	
  1145  1800  3401               	retlw	1
  1146  1801  3400               	retlw	0
  1147  1802  3400               	retlw	0
  1148  1803  3400               	retlw	0
  1149  1804  3410               	retlw	16
  1150  1805  3400               	retlw	0
  1151  1806  3400               	retlw	0
  1152  1807  3400               	retlw	0
  1153  1808  3400               	retlw	0
  1154  1809  3401               	retlw	1
  1155  180A  3400               	retlw	0
  1156  180B  3400               	retlw	0
  1157  180C  3400               	retlw	0
  1158  180D  3410               	retlw	16
  1159  180E  3400               	retlw	0
  1160  180F  3400               	retlw	0
  1161  1810  3400               	retlw	0
  1162  1811  3400               	retlw	0
  1163  1812  3401               	retlw	1
  1164  1813  3400               	retlw	0
  1165  1814  3400               	retlw	0
  1166  1815  3400               	retlw	0
  1167  1816  3410               	retlw	16
  1168  1817  3400               	retlw	0
  1169  1818  3400               	retlw	0
  1170  1819  3400               	retlw	0
  1171  181A  3400               	retlw	0
  1172  181B  3401               	retlw	1
  1173  181C  3400               	retlw	0
  1174  181D  3400               	retlw	0
  1175  181E  3400               	retlw	0
  1176  181F  3410               	retlw	16
  1177  1820                     __end_of_hexpowers:	
  1178  000C                     _PORTAbits	set	12
  1179  0018                     _LATAbits	set	24
  1180  0012                     _TRISAbits	set	18
  1181  0014                     _TRISC	set	20
  1182  0012                     _TRISA	set	18
  1183  001A                     _LATC	set	26
  1184  0018                     _LATA	set	24
  1185  0071                     _RC1	set	113
  1186  0070                     _RC0	set	112
  1187  0075                     _RC5	set	117
  1188  0074                     _RC4	set	116
  1189  0073                     _RC3	set	115
  1190  0072                     _RC2	set	114
  1191  0892                     _OSCTUNE	set	2194
  1192  0890                     _OSCSTAT	set	2192
  1193  0893                     _OSCFRQ	set	2195
  1194  0891                     _OSCEN	set	2193
  1195  088F                     _OSCCON3	set	2191
  1196  088D                     _OSCCON1	set	2189
  1197  1F50                     _ODCONC	set	8016
  1198  1F3A                     _ODCONA	set	7994
  1199  1F4F                     _WPUC	set	8015
  1200  1F39                     _WPUA	set	7993
  1201  1F38                     _ANSELA	set	7992
  1202  1F4E                     _ANSELC	set	8014
  1203  1820                     STR_1:	
  1204  1820  3425               	retlw	37	;'%'
  1205  1821  3430               	retlw	48	;'0'
  1206  1822  3432               	retlw	50	;'2'
  1207  1823  3458               	retlw	88	;'X'
  1208  1824  3425               	retlw	37	;'%'
  1209  1825  3430               	retlw	48	;'0'
  1210  1826  3432               	retlw	50	;'2'
  1211  1827  3458               	retlw	88	;'X'
  1212  1828  3425               	retlw	37	;'%'
  1213  1829  3430               	retlw	48	;'0'
  1214  182A  3432               	retlw	50	;'2'
  1215  182B  3458               	retlw	88	;'X'
  1216  182C  3425               	retlw	37	;'%'
  1217  182D  3430               	retlw	48	;'0'
  1218  182E  3432               	retlw	50	;'2'
  1219  182F  3458               	retlw	88	;'X'
  1220  1830  3425               	retlw	37	;'%'
  1221  1831  3430               	retlw	48	;'0'
  1222  1832  3432               	retlw	50	;'2'
  1223  1833  3458               	retlw	88	;'X'
  1224  1834  3425               	retlw	37	;'%'
  1225  1835  3430               	retlw	48	;'0'
  1226  1836  3432               	retlw	50	;'2'
  1227  1837  3458               	retlw	88	;'X'
  1228  1838  3425               	retlw	37	;'%'
  1229  1839  3430               	retlw	48	;'0'
  1230  183A  3432               	retlw	50	;'2'
  1231  183B  3458               	retlw	88	;'X'
  1232  183C  3425               	retlw	37	;'%'
  1233  183D  3430               	retlw	48	;'0'
  1234  183E  3432               	retlw	50	;'2'
  1235  183F  3458               	retlw	88	;'X'
  1236  1840  3400               	retlw	0
  1237                           
  1238                           	psect	stringtext5
  1239  18B7                     __pstringtext5:	
  1240  18B7                     STR_8:	
  1241  18B7  3430               	retlw	48	;'0'
  1242  18B8  3431               	retlw	49	;'1'
  1243  18B9  3432               	retlw	50	;'2'
  1244  18BA  3433               	retlw	51	;'3'
  1245  18BB  3434               	retlw	52	;'4'
  1246  18BC  3435               	retlw	53	;'5'
  1247  18BD  3436               	retlw	54	;'6'
  1248  18BE  3437               	retlw	55	;'7'
  1249  18BF  3438               	retlw	56	;'8'
  1250  18C0  3439               	retlw	57	;'9'
  1251  18C1  3441               	retlw	65	;'A'
  1252  18C2  3442               	retlw	66	;'B'
  1253  18C3  3443               	retlw	67	;'C'
  1254  18C4  3444               	retlw	68	;'D'
  1255  18C5  3445               	retlw	69	;'E'
  1256  18C6  3446               	retlw	70	;'F'
  1257  18C7  3400               	retlw	0
  1258                           
  1259                           	psect	stringtext6
  1260  18C8                     __pstringtext6:	
  1261  18C8                     STR_6:	
  1262  18C8  3420               	retlw	32	;' '
  1263  18C9  3431               	retlw	49	;'1'
  1264  18CA  342D               	retlw	45	;'-'
  1265  18CB  3477               	retlw	119	;'w'
  1266  18CC  3469               	retlw	105	;'i'
  1267  18CD  3472               	retlw	114	;'r'
  1268  18CE  3465               	retlw	101	;'e'
  1269  18CF  3420               	retlw	32	;' '
  1270  18D0  344D               	retlw	77	;'M'
  1271  18D1  3469               	retlw	105	;'i'
  1272  18D2  3473               	retlw	115	;'s'
  1273  18D3  3473               	retlw	115	;'s'
  1274  18D4  3469               	retlw	105	;'i'
  1275  18D5  346E               	retlw	110	;'n'
  1276  18D6  3467               	retlw	103	;'g'
  1277  18D7  3400               	retlw	0
  1278                           
  1279                           	psect	stringtext7
  1280  18D8                     __pstringtext7:	
  1281  18D8                     STR_2:	
  1282  18D8  3420               	retlw	32	;' '
  1283  18D9  3431               	retlw	49	;'1'
  1284  18DA  342D               	retlw	45	;'-'
  1285  18DB  3477               	retlw	119	;'w'
  1286  18DC  3469               	retlw	105	;'i'
  1287  18DD  3472               	retlw	114	;'r'
  1288  18DE  3465               	retlw	101	;'e'
  1289  18DF  3420               	retlw	32	;' '
  1290  18E0  3450               	retlw	80	;'P'
  1291  18E1  3472               	retlw	114	;'r'
  1292  18E2  3465               	retlw	101	;'e'
  1293  18E3  3473               	retlw	115	;'s'
  1294  18E4  3465               	retlw	101	;'e'
  1295  18E5  346E               	retlw	110	;'n'
  1296  18E6  3474               	retlw	116	;'t'
  1297  18E7  3400               	retlw	0
  1298                           
  1299                           	psect	stringtext8
  1300  18E8                     __pstringtext8:	
  1301  18E8                     STR_4:	
  1302  18E8  3454               	retlw	84	;'T'
  1303  18E9  3465               	retlw	101	;'e'
  1304  18EA  346D               	retlw	109	;'m'
  1305  18EB  3470               	retlw	112	;'p'
  1306  18EC  3465               	retlw	101	;'e'
  1307  18ED  3472               	retlw	114	;'r'
  1308  18EE  3461               	retlw	97	;'a'
  1309  18EF  3474               	retlw	116	;'t'
  1310  18F0  3475               	retlw	117	;'u'
  1311  18F1  3472               	retlw	114	;'r'
  1312  18F2  3465               	retlw	101	;'e'
  1313  18F3  343A               	retlw	58	;':'
  1314  18F4  3400               	retlw	0
  1315                           
  1316                           	psect	stringtext9
  1317  18F5                     __pstringtext9:	
  1318  18F5                     STR_5:	
  1319  18F5  3420               	retlw	32	;' '
  1320  18F6  3420               	retlw	32	;' '
  1321  18F7  3425               	retlw	37	;'%'
  1322  18F8  3432               	retlw	50	;'2'
  1323  18F9  342E               	retlw	46	;'.'
  1324  18FA  3435               	retlw	53	;'5'
  1325  18FB  3466               	retlw	102	;'f'
  1326  18FC  3400               	retlw	0
  1327                           
  1328                           	psect	stringtext10
  1329  18FD                     __pstringtext10:	
  1330  18FD                     STR_7:	
  1331  18FD  3428               	retlw	40	;'('
  1332  18FE  346E               	retlw	110	;'n'
  1333  18FF  3475               	retlw	117	;'u'
  1334  1900  346C               	retlw	108	;'l'
  1335  1901  346C               	retlw	108	;'l'
  1336  1902  3429               	retlw	41	;')'
  1337  1903  3400               	retlw	0
  1338                           
  1339                           	psect	stringtext11
  1340  1904                     __pstringtext11:	
  1341  1904                     STR_3:	
  1342  1904  3425               	retlw	37	;'%'
  1343  1905  3473               	retlw	115	;'s'
  1344  1906  3400               	retlw	0
  1345                           
  1346                           	psect	stringtext12
  1347  0000                     __pstringtext12:	
  1348                           
  1349                           ; #config settings
  1350  0000                     
  1351                           	psect	cinit
  1352  07FD                     start_initialization:	
  1353  07FD                     __initialization:	
  1354  07FD                     end_of_initialization:	
  1355                           ;End of C runtime variable initialization code
  1356                           
  1357  07FD                     __end_of__initialization:	
  1358  07FD  0140               	movlb	0
  1359  07FE  318B  2BCE         	ljmp	_main	;jump to C main() function
  1360                           
  1361                           	psect	cstackBANK2
  1362  0120                     __pcstackBANK2:	
  1363  0120                     main@deviceSerialNum:	
  1364                           
  1365                           ; 64 bytes @ 0x0
  1366  0120                     	ds	64
  1367  0160                     main@tempL:	
  1368                           
  1369                           ; 2 bytes @ 0x40
  1370  0160                     	ds	2
  1371  0162                     main@tempH:	
  1372                           
  1373                           ; 2 bytes @ 0x42
  1374  0162                     	ds	2
  1375  0164                     main@temperatureFprecise:	
  1376                           
  1377                           ; 3 bytes @ 0x44
  1378  0164                     	ds	3
  1379  0167                     main@flag:	
  1380                           
  1381                           ; 2 bytes @ 0x47
  1382  0167                     	ds	2
  1383  0169                     main@i:	
  1384                           
  1385                           ; 2 bytes @ 0x49
  1386  0169                     	ds	2
  1387                           
  1388                           	psect	cstackBANK1
  1389  00A0                     __pcstackBANK1:	
  1390  00A0                     ??_sprintf:	
  1391                           
  1392                           ; 1 bytes @ 0x0
  1393  00A0                     	ds	6
  1394  00A6                     _sprintf$624:	
  1395                           
  1396                           ; 3 bytes @ 0x6
  1397  00A6                     	ds	3
  1398  00A9                     sprintf@idx:	
  1399                           
  1400                           ; 1 bytes @ 0x9
  1401  00A9                     	ds	1
  1402  00AA                     sprintf@cp:	
  1403                           
  1404                           ; 2 bytes @ 0xA
  1405  00AA                     	ds	2
  1406  00AC                     sprintf@ap:	
  1407                           
  1408                           ; 1 bytes @ 0xC
  1409  00AC                     	ds	1
  1410  00AD                     sprintf@len:	
  1411                           
  1412                           ; 2 bytes @ 0xD
  1413  00AD                     	ds	2
  1414  00AF                     sprintf@val:	
  1415                           
  1416                           ; 4 bytes @ 0xF
  1417  00AF                     	ds	4
  1418  00B3                     sprintf@tmpval:	
  1419                           
  1420                           ; 4 bytes @ 0x13
  1421  00B3                     	ds	4
  1422  00B7                     sprintf@exp:	
  1423                           
  1424                           ; 2 bytes @ 0x17
  1425  00B7                     	ds	2
  1426  00B9                     sprintf@flag:	
  1427                           
  1428                           ; 2 bytes @ 0x19
  1429  00B9                     	ds	2
  1430  00BB                     sprintf@fval:	
  1431                           
  1432                           ; 3 bytes @ 0x1B
  1433  00BB                     	ds	3
  1434  00BE                     sprintf@width:	
  1435                           
  1436                           ; 2 bytes @ 0x1E
  1437  00BE                     	ds	2
  1438  00C0                     sprintf@prec:	
  1439                           
  1440                           ; 2 bytes @ 0x20
  1441  00C0                     	ds	2
  1442  00C2                     sprintf@c:	
  1443                           
  1444                           ; 1 bytes @ 0x22
  1445  00C2                     	ds	1
  1446  00C3                     ??_main:	
  1447                           
  1448                           ; 1 bytes @ 0x23
  1449  00C3                     	ds	16
  1450  00D3                     main@buffer:	
  1451                           
  1452                           ; 20 bytes @ 0x33
  1453  00D3                     	ds	20
  1454  00E7                     main@serial_number:	
  1455                           
  1456                           ; 8 bytes @ 0x47
  1457  00E7                     	ds	8
  1458                           
  1459                           	psect	cstackCOMMON
  1460  0070                     __pcstackCOMMON:	
  1461  0070                     ?_isdigit:	
  1462  0070                     ?___ftge:	
  1463                           ; 1 bit 
  1464                           
  1465  0070                     ?_PIN_MANAGER_Initialize:	
  1466                           ; 1 bit 
  1467                           
  1468  0070                     ??_PIN_MANAGER_Initialize:	
  1469                           ; 1 bytes @ 0x0
  1470                           
  1471  0070                     ?_OSCILLATOR_Initialize:	
  1472                           ; 1 bytes @ 0x0
  1473                           
  1474  0070                     ??_OSCILLATOR_Initialize:	
  1475                           ; 1 bytes @ 0x0
  1476                           
  1477  0070                     ??_isdigit:	
  1478                           ; 1 bytes @ 0x0
  1479                           
  1480  0070                     ?_SYSTEM_Initialize:	
  1481                           ; 1 bytes @ 0x0
  1482                           
  1483  0070                     ??_SYSTEM_Initialize:	
  1484                           ; 1 bytes @ 0x0
  1485                           
  1486  0070                     ?_drive_OW_low:	
  1487                           ; 1 bytes @ 0x0
  1488                           
  1489  0070                     ??_drive_OW_low:	
  1490                           ; 1 bytes @ 0x0
  1491                           
  1492  0070                     ?_drive_OW_high:	
  1493                           ; 1 bytes @ 0x0
  1494                           
  1495  0070                     ??_drive_OW_high:	
  1496                           ; 1 bytes @ 0x0
  1497                           
  1498  0070                     ?_read_OW:	
  1499                           ; 1 bytes @ 0x0
  1500                           
  1501  0070                     ??_read_OW:	
  1502                           ; 1 bytes @ 0x0
  1503                           
  1504  0070                     ?_OW_reset_pulse:	
  1505                           ; 1 bytes @ 0x0
  1506                           
  1507  0070                     ?_OW_write_bit:	
  1508                           ; 1 bytes @ 0x0
  1509                           
  1510  0070                     ??_OW_write_bit:	
  1511                           ; 1 bytes @ 0x0
  1512                           
  1513  0070                     ?_OW_read_bit:	
  1514                           ; 1 bytes @ 0x0
  1515                           
  1516  0070                     ?_OW_write_byte:	
  1517                           ; 1 bytes @ 0x0
  1518                           
  1519  0070                     ?_OW_read_byte:	
  1520                           ; 1 bytes @ 0x0
  1521                           
  1522  0070                     ?_Lcd_Port:	
  1523                           ; 1 bytes @ 0x0
  1524                           
  1525  0070                     ??_Lcd_Port:	
  1526                           ; 1 bytes @ 0x0
  1527                           
  1528  0070                     ?_Lcd_Cmd:	
  1529                           ; 1 bytes @ 0x0
  1530                           
  1531  0070                     ?_Lcd_Clear:	
  1532                           ; 1 bytes @ 0x0
  1533                           
  1534  0070                     ?_Lcd_Init:	
  1535                           ; 1 bytes @ 0x0
  1536                           
  1537  0070                     ?_Lcd_Write_Char:	
  1538                           ; 1 bytes @ 0x0
  1539                           
  1540  0070                     ?_Lcd_Shift_Left:	
  1541                           ; 1 bytes @ 0x0
  1542                           
  1543  0070                     ?_main:	
  1544                           ; 1 bytes @ 0x0
  1545                           
  1546  0070                     ?___awmod:	
  1547                           ; 1 bytes @ 0x0
  1548                           
  1549  0070                     ?___ftpack:	
  1550                           ; 2 bytes @ 0x0
  1551                           
  1552  0070                     ?___ftneg:	
  1553                           ; 3 bytes @ 0x0
  1554                           
  1555  0070                     ?__tdiv_to_l_:	
  1556                           ; 3 bytes @ 0x0
  1557                           
  1558  0070                     ?__div_to_l_:	
  1559                           ; 4 bytes @ 0x0
  1560                           
  1561  0070                     ?___lldiv:	
  1562                           ; 4 bytes @ 0x0
  1563                           
  1564  0070                     ?___llmod:	
  1565                           ; 4 bytes @ 0x0
  1566                           
  1567  0070                     read_OW@read_data:	
  1568                           ; 4 bytes @ 0x0
  1569                           
  1570  0070                     OW_write_bit@write_bit:	
  1571                           ; 1 bytes @ 0x0
  1572                           
  1573  0070                     Lcd_Port@a:	
  1574                           ; 1 bytes @ 0x0
  1575                           
  1576  0070                     _isdigit$415:	
  1577                           ; 1 bytes @ 0x0
  1578                           
  1579  0070                     ___awmod@divisor:	
  1580                           ; 1 bytes @ 0x0
  1581                           
  1582  0070                     __div_to_l_@f1:	
  1583                           ; 2 bytes @ 0x0
  1584                           
  1585  0070                     ___ftpack@arg:	
  1586                           ; 3 bytes @ 0x0
  1587                           
  1588  0070                     __tdiv_to_l_@f1:	
  1589                           ; 3 bytes @ 0x0
  1590                           
  1591  0070                     ___ftge@ff1:	
  1592                           ; 3 bytes @ 0x0
  1593                           
  1594  0070                     ___ftneg@f1:	
  1595                           ; 3 bytes @ 0x0
  1596                           
  1597  0070                     ___lldiv@divisor:	
  1598                           ; 3 bytes @ 0x0
  1599                           
  1600  0070                     ___llmod@divisor:	
  1601                           ; 4 bytes @ 0x0
  1602                           
  1603                           
  1604                           ; 4 bytes @ 0x0
  1605  0070                     	ds	1
  1606  0071                     ??_OW_reset_pulse:	
  1607  0071                     ??_OW_read_bit:	
  1608                           ; 1 bytes @ 0x1
  1609                           
  1610  0071                     ??_OW_write_byte:	
  1611                           ; 1 bytes @ 0x1
  1612                           
  1613  0071                     ??_Lcd_Cmd:	
  1614                           ; 1 bytes @ 0x1
  1615                           
  1616  0071                     ??_Lcd_Write_Char:	
  1617                           ; 1 bytes @ 0x1
  1618                           
  1619  0071                     isdigit@c:	
  1620                           ; 1 bytes @ 0x1
  1621                           
  1622                           
  1623                           ; 1 bytes @ 0x1
  1624  0071                     	ds	1
  1625  0072                     OW_reset_pulse@presence_detect:	
  1626  0072                     OW_read_bit@read_data:	
  1627                           ; 1 bytes @ 0x2
  1628                           
  1629  0072                     OW_write_byte@write_data:	
  1630                           ; 1 bytes @ 0x2
  1631                           
  1632  0072                     Lcd_Cmd@a:	
  1633                           ; 1 bytes @ 0x2
  1634                           
  1635  0072                     Lcd_Write_Char@temp:	
  1636                           ; 1 bytes @ 0x2
  1637                           
  1638  0072                     ___awmod@dividend:	
  1639                           ; 1 bytes @ 0x2
  1640                           
  1641                           
  1642                           ; 2 bytes @ 0x2
  1643  0072                     	ds	1
  1644  0073                     ??_OW_read_byte:	
  1645  0073                     ??_Lcd_Clear:	
  1646                           ; 1 bytes @ 0x3
  1647                           
  1648  0073                     ?_Lcd_Set_Cursor:	
  1649                           ; 1 bytes @ 0x3
  1650                           
  1651  0073                     ??_Lcd_Init:	
  1652                           ; 1 bytes @ 0x3
  1653                           
  1654  0073                     ??_Lcd_Shift_Left:	
  1655                           ; 1 bytes @ 0x3
  1656                           
  1657  0073                     ??___ftneg:	
  1658                           ; 1 bytes @ 0x3
  1659                           
  1660  0073                     OW_write_byte@loop:	
  1661                           ; 1 bytes @ 0x3
  1662                           
  1663  0073                     Lcd_Set_Cursor@b:	
  1664                           ; 1 bytes @ 0x3
  1665                           
  1666  0073                     Lcd_Write_Char@y:	
  1667                           ; 1 bytes @ 0x3
  1668                           
  1669  0073                     ___ftpack@exp:	
  1670                           ; 1 bytes @ 0x3
  1671                           
  1672  0073                     __div_to_l_@f2:	
  1673                           ; 1 bytes @ 0x3
  1674                           
  1675  0073                     __tdiv_to_l_@f2:	
  1676                           ; 3 bytes @ 0x3
  1677                           
  1678  0073                     ___ftge@ff2:	
  1679                           ; 3 bytes @ 0x3
  1680                           
  1681                           
  1682                           ; 3 bytes @ 0x3
  1683  0073                     	ds	1
  1684  0074                     ??_Lcd_Set_Cursor:	
  1685  0074                     ??___awmod:	
  1686                           ; 1 bytes @ 0x4
  1687                           
  1688  0074                     OW_read_byte@result:	
  1689                           ; 1 bytes @ 0x4
  1690                           
  1691  0074                     Lcd_Write_Char@a:	
  1692                           ; 1 bytes @ 0x4
  1693                           
  1694  0074                     ___ftpack@sign:	
  1695                           ; 1 bytes @ 0x4
  1696                           
  1697  0074                     ___lldiv@dividend:	
  1698                           ; 1 bytes @ 0x4
  1699                           
  1700  0074                     ___llmod@dividend:	
  1701                           ; 4 bytes @ 0x4
  1702                           
  1703                           
  1704                           ; 4 bytes @ 0x4
  1705  0074                     	ds	1
  1706  0075                     ??___ftpack:	
  1707  0075                     ?_Lcd_Write_String:	
  1708                           ; 1 bytes @ 0x5
  1709                           
  1710  0075                     OW_read_byte@loop:	
  1711                           ; 1 bytes @ 0x5
  1712                           
  1713  0075                     ___awmod@counter:	
  1714                           ; 1 bytes @ 0x5
  1715                           
  1716  0075                     Lcd_Write_String@a:	
  1717                           ; 1 bytes @ 0x5
  1718                           
  1719                           
  1720                           ; 2 bytes @ 0x5
  1721  0075                     	ds	1
  1722  0076                     ??__tdiv_to_l_:	
  1723  0076                     ??__div_to_l_:	
  1724                           ; 1 bytes @ 0x6
  1725                           
  1726  0076                     ??___ftge:	
  1727                           ; 1 bytes @ 0x6
  1728                           
  1729  0076                     Lcd_Set_Cursor@a:	
  1730                           ; 1 bytes @ 0x6
  1731                           
  1732  0076                     ___awmod@sign:	
  1733                           ; 1 bytes @ 0x6
  1734                           
  1735                           
  1736                           ; 1 bytes @ 0x6
  1737  0076                     	ds	1
  1738  0077                     ??_Lcd_Write_String:	
  1739  0077                     ?___awdiv:	
  1740                           ; 1 bytes @ 0x7
  1741                           
  1742  0077                     Lcd_Set_Cursor@z:	
  1743                           ; 2 bytes @ 0x7
  1744                           
  1745  0077                     ___awdiv@divisor:	
  1746                           ; 1 bytes @ 0x7
  1747                           
  1748                           
  1749                           ; 2 bytes @ 0x7
  1750  0077                     	ds	1
  1751  0078                     ??___lldiv:	
  1752  0078                     ??___llmod:	
  1753                           ; 1 bytes @ 0x8
  1754                           
  1755  0078                     ?___lltoft:	
  1756                           ; 1 bytes @ 0x8
  1757                           
  1758  0078                     ?___lwtoft:	
  1759                           ; 3 bytes @ 0x8
  1760                           
  1761  0078                     Lcd_Set_Cursor@y:	
  1762                           ; 3 bytes @ 0x8
  1763                           
  1764  0078                     Lcd_Write_String@i:	
  1765                           ; 1 bytes @ 0x8
  1766                           
  1767  0078                     ___lwtoft@c:	
  1768                           ; 2 bytes @ 0x8
  1769                           
  1770  0078                     ___lltoft@c:	
  1771                           ; 2 bytes @ 0x8
  1772                           
  1773                           
  1774                           ; 4 bytes @ 0x8
  1775  0078                     	ds	1
  1776  0079                     Lcd_Set_Cursor@temp:	
  1777  0079                     ___llmod@counter:	
  1778                           ; 1 bytes @ 0x9
  1779                           
  1780  0079                     ___awdiv@dividend:	
  1781                           ; 1 bytes @ 0x9
  1782                           
  1783  0079                     ___lldiv@quotient:	
  1784                           ; 2 bytes @ 0x9
  1785                           
  1786                           
  1787                           ; 4 bytes @ 0x9
  1788  0079                     	ds	2
  1789  007B                     ??___awdiv:	
  1790  007B                     ??___lwtoft:	
  1791                           ; 1 bytes @ 0xB
  1792                           
  1793                           
  1794                           ; 1 bytes @ 0xB
  1795  007B                     	ds	1
  1796  007C                     ??___wmul:	
  1797  007C                     ??___lltoft:	
  1798                           ; 1 bytes @ 0xC
  1799                           
  1800  007C                     ___wmul@product:	
  1801                           ; 1 bytes @ 0xC
  1802                           
  1803                           
  1804                           ; 2 bytes @ 0xC
  1805  007C                     	ds	1
  1806  007D                     ___lldiv@counter:	
  1807  007D                     ___lltoft@exp:	
  1808                           ; 1 bytes @ 0xD
  1809                           
  1810                           
  1811                           ; 1 bytes @ 0xD
  1812  007D                     	ds	1
  1813  007E                     ??___ftsub:	
  1814                           
  1815                           	psect	cstackBANK0
  1816  0020                     __pcstackBANK0:	
  1817                           ; 1 bytes @ 0xE
  1818                           
  1819  0020                     ___awdiv@counter:	
  1820  0020                     __div_to_l_@quot:	
  1821                           ; 1 bytes @ 0x0
  1822                           
  1823  0020                     __tdiv_to_l_@quot:	
  1824                           ; 4 bytes @ 0x0
  1825                           
  1826                           
  1827                           ; 4 bytes @ 0x0
  1828  0020                     	ds	1
  1829  0021                     ___awdiv@sign:	
  1830                           
  1831                           ; 1 bytes @ 0x1
  1832  0021                     	ds	1
  1833  0022                     ___awdiv@quotient:	
  1834                           
  1835                           ; 2 bytes @ 0x2
  1836  0022                     	ds	2
  1837  0024                     ?___wmul:	
  1838  0024                     __div_to_l_@cntr:	
  1839                           ; 2 bytes @ 0x4
  1840                           
  1841  0024                     __tdiv_to_l_@cntr:	
  1842                           ; 1 bytes @ 0x4
  1843                           
  1844  0024                     ___wmul@multiplier:	
  1845                           ; 1 bytes @ 0x4
  1846                           
  1847                           
  1848                           ; 2 bytes @ 0x4
  1849  0024                     	ds	1
  1850  0025                     __div_to_l_@exp1:	
  1851  0025                     __tdiv_to_l_@exp1:	
  1852                           ; 1 bytes @ 0x5
  1853                           
  1854                           
  1855                           ; 1 bytes @ 0x5
  1856  0025                     	ds	1
  1857  0026                     ___wmul@multiplicand:	
  1858                           
  1859                           ; 2 bytes @ 0x6
  1860  0026                     	ds	2
  1861  0028                     ?___ftmul:	
  1862  0028                     ___ftmul@f1:	
  1863                           ; 3 bytes @ 0x8
  1864                           
  1865                           
  1866                           ; 3 bytes @ 0x8
  1867  0028                     	ds	3
  1868  002B                     ___ftmul@f2:	
  1869                           
  1870                           ; 3 bytes @ 0xB
  1871  002B                     	ds	3
  1872  002E                     ??___ftmul:	
  1873                           
  1874                           ; 1 bytes @ 0xE
  1875  002E                     	ds	4
  1876  0032                     ___ftmul@exp:	
  1877                           
  1878                           ; 1 bytes @ 0x12
  1879  0032                     	ds	1
  1880  0033                     ___ftmul@f3_as_product:	
  1881                           
  1882                           ; 3 bytes @ 0x13
  1883  0033                     	ds	3
  1884  0036                     ___ftmul@cntr:	
  1885                           
  1886                           ; 1 bytes @ 0x16
  1887  0036                     	ds	1
  1888  0037                     ___ftmul@sign:	
  1889                           
  1890                           ; 1 bytes @ 0x17
  1891  0037                     	ds	1
  1892  0038                     ?_fround:	
  1893  0038                     ?_scale:	
  1894                           ; 3 bytes @ 0x18
  1895                           
  1896  0038                     ?___ftdiv:	
  1897                           ; 3 bytes @ 0x18
  1898                           
  1899  0038                     ___ftdiv@f2:	
  1900                           ; 3 bytes @ 0x18
  1901                           
  1902                           
  1903                           ; 3 bytes @ 0x18
  1904  0038                     	ds	3
  1905  003B                     ??_fround:	
  1906  003B                     ??_scale:	
  1907                           ; 1 bytes @ 0x1B
  1908                           
  1909  003B                     ___ftdiv@f1:	
  1910                           ; 1 bytes @ 0x1B
  1911                           
  1912                           
  1913                           ; 3 bytes @ 0x1B
  1914  003B                     	ds	2
  1915  003D                     _scale$623:	
  1916                           
  1917                           ; 3 bytes @ 0x1D
  1918  003D                     	ds	1
  1919  003E                     ??___ftdiv:	
  1920                           
  1921                           ; 1 bytes @ 0x1E
  1922  003E                     	ds	1
  1923  003F                     _fround$622:	
  1924                           
  1925                           ; 3 bytes @ 0x1F
  1926  003F                     	ds	1
  1927  0040                     scale@scl:	
  1928                           
  1929                           ; 1 bytes @ 0x20
  1930  0040                     	ds	1
  1931  0041                     ?___fttol:	
  1932  0041                     ___fttol@f1:	
  1933                           ; 4 bytes @ 0x21
  1934                           
  1935                           
  1936                           ; 3 bytes @ 0x21
  1937  0041                     	ds	1
  1938  0042                     ___ftdiv@cntr:	
  1939  0042                     _fround$621:	
  1940                           ; 1 bytes @ 0x22
  1941                           
  1942                           
  1943                           ; 3 bytes @ 0x22
  1944  0042                     	ds	1
  1945  0043                     ___ftdiv@f3:	
  1946                           
  1947                           ; 3 bytes @ 0x23
  1948  0043                     	ds	2
  1949  0045                     ??___fttol:	
  1950  0045                     fround@prec:	
  1951                           ; 1 bytes @ 0x25
  1952                           
  1953                           
  1954                           ; 1 bytes @ 0x25
  1955  0045                     	ds	1
  1956  0046                     ___ftdiv@exp:	
  1957                           
  1958                           ; 1 bytes @ 0x26
  1959  0046                     	ds	1
  1960  0047                     ___ftdiv@sign:	
  1961                           
  1962                           ; 1 bytes @ 0x27
  1963  0047                     	ds	1
  1964  0048                     ?___ftadd:	
  1965  0048                     ___ftadd@f1:	
  1966                           ; 3 bytes @ 0x28
  1967                           
  1968                           
  1969                           ; 3 bytes @ 0x28
  1970  0048                     	ds	1
  1971  0049                     ___fttol@sign1:	
  1972                           
  1973                           ; 1 bytes @ 0x29
  1974  0049                     	ds	1
  1975  004A                     ___fttol@lval:	
  1976                           
  1977                           ; 4 bytes @ 0x2A
  1978  004A                     	ds	1
  1979  004B                     ___ftadd@f2:	
  1980                           
  1981                           ; 3 bytes @ 0x2B
  1982  004B                     	ds	3
  1983  004E                     ??___ftadd:	
  1984  004E                     ___fttol@exp1:	
  1985                           ; 1 bytes @ 0x2E
  1986                           
  1987                           
  1988                           ; 1 bytes @ 0x2E
  1989  004E                     	ds	4
  1990  0052                     ___ftadd@sign:	
  1991                           
  1992                           ; 1 bytes @ 0x32
  1993  0052                     	ds	1
  1994  0053                     ___ftadd@exp2:	
  1995                           
  1996                           ; 1 bytes @ 0x33
  1997  0053                     	ds	1
  1998  0054                     ___ftadd@exp1:	
  1999                           
  2000                           ; 1 bytes @ 0x34
  2001  0054                     	ds	1
  2002  0055                     ?_convertTemperatureF:	
  2003  0055                     ?___ftsub:	
  2004                           ; 3 bytes @ 0x35
  2005                           
  2006  0055                     convertTemperatureF@tempL:	
  2007                           ; 3 bytes @ 0x35
  2008                           
  2009  0055                     ___ftsub@f2:	
  2010                           ; 2 bytes @ 0x35
  2011                           
  2012                           
  2013                           ; 3 bytes @ 0x35
  2014  0055                     	ds	2
  2015  0057                     convertTemperatureF@tempH:	
  2016                           
  2017                           ; 2 bytes @ 0x37
  2018  0057                     	ds	1
  2019  0058                     ___ftsub@f1:	
  2020                           
  2021                           ; 3 bytes @ 0x38
  2022  0058                     	ds	1
  2023  0059                     ??_convertTemperatureF:	
  2024                           
  2025                           ; 1 bytes @ 0x39
  2026  0059                     	ds	2
  2027  005B                     ?_sprintf:	
  2028  005B                     sprintf@sp:	
  2029                           ; 2 bytes @ 0x3B
  2030                           
  2031  005B                     convertTemperatureF@temperatureCprecise:	
  2032                           ; 2 bytes @ 0x3B
  2033                           
  2034                           
  2035                           ; 3 bytes @ 0x3B
  2036  005B                     	ds	2
  2037  005D                     sprintf@f:	
  2038                           
  2039                           ; 2 bytes @ 0x3D
  2040  005D                     	ds	1
  2041  005E                     convertTemperatureF@tCprecise:	
  2042                           
  2043                           ; 3 bytes @ 0x3E
  2044  005E                     	ds	3
  2045  0061                     convertTemperatureF@binaryTemperatureC:	
  2046                           
  2047                           ; 2 bytes @ 0x41
  2048  0061                     	ds	14
  2049                           
  2050                           	psect	maintext
  2051  0BCE                     __pmaintext:	
  2052 ;;
  2053 ;;Main: autosize = 0, tempsize = 16, incstack = 0, save=0
  2054 ;;
  2055 ;; *************** function _main *****************
  2056 ;; Defined at:
  2057 ;;		line 53 in file "main.c"
  2058 ;; Parameters:    Size  Location     Type
  2059 ;;		None
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;  deviceSerial   64    0[BANK2 ] unsigned char [64]
  2062 ;;  buffer         20   51[BANK1 ] unsigned char [20]
  2063 ;;  serial_numbe    8   71[BANK1 ] unsigned char [8]
  2064 ;;  temperatureF    3   68[BANK2 ] float 
  2065 ;;  i               2   73[BANK2 ] int 
  2066 ;;  flag            2   71[BANK2 ] int 
  2067 ;;  tempH           2   66[BANK2 ] unsigned short 
  2068 ;;  tempL           2   64[BANK2 ] unsigned short 
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  1    wreg      void 
  2071 ;; Registers used:
  2072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2073 ;; Tracked objects:
  2074 ;;		On entry : B3F/0
  2075 ;;		On exit  : 0/0
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2079 ;;      Locals:         0       0      28      75       0       0       0       0       0       0       0       0       
      +0       0
  2080 ;;      Temps:          0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0
  2081 ;;      Totals:         0       0      44      75       0       0       0       0       0       0       0       0       
      +0       0
  2082 ;;Total ram usage:      119 bytes
  2083 ;; Hardware stack levels required when called:    4
  2084 ;; This function calls:
  2085 ;;		_Lcd_Clear
  2086 ;;		_Lcd_Init
  2087 ;;		_Lcd_Set_Cursor
  2088 ;;		_Lcd_Shift_Left
  2089 ;;		_Lcd_Write_String
  2090 ;;		_OW_read_byte
  2091 ;;		_OW_reset_pulse
  2092 ;;		_OW_write_byte
  2093 ;;		_SYSTEM_Initialize
  2094 ;;		_convertTemperatureF
  2095 ;;		_sprintf
  2096 ;; This function is called by:
  2097 ;;		Startup code after reset
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           
  2102                           ;psect for function _main
  2103  0BCE                     _main:	
  2104                           
  2105                           ;main.c: 56: SYSTEM_Initialize();
  2106                           
  2107                           ;incstack = 0
  2108                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2109  0BCE  3191  21B8  318B   	fcall	_SYSTEM_Initialize
  2110                           
  2111                           ;main.c: 57: Lcd_Init();
  2112  0BD1  3193  23E7  318B   	fcall	_Lcd_Init
  2113  0BD4  2D60               	goto	l3256
  2114  0BD5                     l160:	
  2115                           ;main.c: 70: {
  2116                           ;main.c: 71: do { LATAbits.LATA4 = 0; } while(0);
  2117                           
  2118  0BD5  0140               	movlb	0	; select bank0
  2119  0BD6  1218               	bcf	24,4	;volatile
  2120                           
  2121                           ;main.c: 72: OW_write_byte(0x33);
  2122  0BD7  3033               	movlw	51
  2123  0BD8  3191  21FF  318B   	fcall	_OW_write_byte
  2124                           
  2125                           ;main.c: 73: _delay((unsigned long)((20)*(32000000/4000000.0)));
  2126  0BDB  3035               	movlw	53
  2127  0BDC                     u4637:	
  2128  0BDC  0B89               	decfsz	9,f
  2129  0BDD  2BDC               	goto	u4637
  2130  0BDE  0000               	nop
  2131                           
  2132                           ;main.c: 74: for(i=0; i<8; i++){
  2133  0BDF  0142               	movlb	2	; select bank2
  2134  0BE0  01E9               	clrf	main@i^(0+256)
  2135  0BE1  01EA               	clrf	(main@i+1)^(0+256)
  2136  0BE2  086A               	movf	(main@i+1)^(0+256),w
  2137  0BE3  3A80               	xorlw	128
  2138  0BE4  0141               	movlb	1	; select bank1
  2139  0BE5  00C3               	movwf	??_main^(0+128)
  2140  0BE6  3080               	movlw	128
  2141  0BE7  0243               	subwf	??_main^(0+128),w
  2142  0BE8  1D03               	skipz
  2143  0BE9  2BED               	goto	u4595
  2144  0BEA  3008               	movlw	8
  2145  0BEB  0142               	movlb	2	; select bank2
  2146  0BEC  0269               	subwf	main@i^(0+256),w
  2147  0BED                     u4595:	
  2148  0BED  1803               	btfsc	3,0
  2149  0BEE  2C0E               	goto	l3278
  2150  0BEF                     l3272:	
  2151                           
  2152                           ;main.c: 75: serial_number[i] = OW_read_byte();
  2153  0BEF  3192  2268  318B   	fcall	_OW_read_byte
  2154  0BF2  0141               	movlb	1	; select bank1
  2155  0BF3  00C3               	movwf	??_main^(0+128)
  2156  0BF4  0142               	movlb	2	; select bank2
  2157  0BF5  0869               	movf	main@i^(0+256),w
  2158  0BF6  3EE7               	addlw	(low (main@serial_number| 0))& (0+255)
  2159  0BF7  0086               	movwf	6
  2160  0BF8  0187               	clrf	7
  2161  0BF9  0141               	movlb	1	; select bank1
  2162  0BFA  0843               	movf	??_main^(0+128),w
  2163  0BFB  0081               	movwf	1
  2164  0BFC  3001               	movlw	1
  2165  0BFD  0142               	movlb	2	; select bank2
  2166  0BFE  07E9               	addwf	main@i^(0+256),f
  2167  0BFF  3000               	movlw	0
  2168  0C00  3DEA               	addwfc	(main@i+1)^(0+256),f
  2169  0C01  086A               	movf	(main@i+1)^(0+256),w
  2170  0C02  3A80               	xorlw	128
  2171  0C03  0141               	movlb	1	; select bank1
  2172  0C04  00C3               	movwf	??_main^(0+128)
  2173  0C05  3080               	movlw	128
  2174  0C06  0243               	subwf	??_main^(0+128),w
  2175  0C07  1D03               	skipz
  2176  0C08  2C0C               	goto	u4605
  2177  0C09  3008               	movlw	8
  2178  0C0A  0142               	movlb	2	; select bank2
  2179  0C0B  0269               	subwf	main@i^(0+256),w
  2180  0C0C                     u4605:	
  2181  0C0C  1C03               	skipc
  2182  0C0D  2BEF               	goto	l3272
  2183  0C0E                     l3278:	
  2184                           
  2185                           ;main.c: 76: }
  2186                           ;main.c: 78: sprintf(deviceSerialNum,"%02X%02X%02X%02X%02X%02X%02X%02X",serial_number[7]
      +                          ,serial_number[6],serial_number[5],serial_number[4],serial_number[3],serial_number[2],se
      +                          rial_number[1],serial_number[0]);
  2187  0C0E  3020               	movlw	low main@deviceSerialNum
  2188  0C0F  0140               	movlb	0	; select bank0
  2189  0C10  00DB               	movwf	sprintf@sp
  2190  0C11  3001               	movlw	high main@deviceSerialNum
  2191  0C12  00DC               	movwf	sprintf@sp+1
  2192  0C13  3020               	movlw	low (STR_1| (0+32768))
  2193  0C14  00DD               	movwf	sprintf@f
  2194  0C15  3098               	movlw	high (STR_1| (0+32768))
  2195  0C16  00DE               	movwf	sprintf@f+1
  2196  0C17  0141               	movlb	1	; select bank1
  2197  0C18  086E               	movf	(main@serial_number^(0+128)+7),w
  2198  0C19  00C3               	movwf	??_main^(0+128)
  2199  0C1A  01C4               	clrf	(??_main^(0+128)+1)
  2200  0C1B  0843               	movf	??_main^(0+128),w
  2201  0C1C  0140               	movlb	0	; select bank0
  2202  0C1D  00DF               	movwf	?_sprintf+4
  2203  0C1E  0141               	movlb	1	; select bank1
  2204  0C1F  0844               	movf	(??_main+1)^(0+128),w
  2205  0C20  0140               	movlb	0	; select bank0
  2206  0C21  00E0               	movwf	?_sprintf+5
  2207  0C22  0141               	movlb	1	; select bank1
  2208  0C23  086D               	movf	(main@serial_number^(0+128)+6),w
  2209  0C24  00C5               	movwf	(??_main+2)^(0+128)
  2210  0C25  01C6               	clrf	((??_main+2)^(0+128)+1)
  2211  0C26  0845               	movf	(??_main+2)^(0+128),w
  2212  0C27  0140               	movlb	0	; select bank0
  2213  0C28  00E1               	movwf	?_sprintf+6
  2214  0C29  0141               	movlb	1	; select bank1
  2215  0C2A  0846               	movf	(??_main+3)^(0+128),w
  2216  0C2B  0140               	movlb	0	; select bank0
  2217  0C2C  00E2               	movwf	?_sprintf+7
  2218  0C2D  0141               	movlb	1	; select bank1
  2219  0C2E  086C               	movf	(main@serial_number^(0+128)+5),w
  2220  0C2F  00C7               	movwf	(??_main+4)^(0+128)
  2221  0C30  01C8               	clrf	((??_main+4)^(0+128)+1)
  2222  0C31  0847               	movf	(??_main+4)^(0+128),w
  2223  0C32  0140               	movlb	0	; select bank0
  2224  0C33  00E3               	movwf	?_sprintf+8
  2225  0C34  0141               	movlb	1	; select bank1
  2226  0C35  0848               	movf	(??_main+5)^(0+128),w
  2227  0C36  0140               	movlb	0	; select bank0
  2228  0C37  00E4               	movwf	?_sprintf+9
  2229  0C38  0141               	movlb	1	; select bank1
  2230  0C39  086B               	movf	(main@serial_number^(0+128)+4),w
  2231  0C3A  00C9               	movwf	(??_main+6)^(0+128)
  2232  0C3B  01CA               	clrf	((??_main+6)^(0+128)+1)
  2233  0C3C  0849               	movf	(??_main+6)^(0+128),w
  2234  0C3D  0140               	movlb	0	; select bank0
  2235  0C3E  00E5               	movwf	?_sprintf+10
  2236  0C3F  0141               	movlb	1	; select bank1
  2237  0C40  084A               	movf	(??_main+7)^(0+128),w
  2238  0C41  0140               	movlb	0	; select bank0
  2239  0C42  00E6               	movwf	?_sprintf+11
  2240  0C43  0141               	movlb	1	; select bank1
  2241  0C44  086A               	movf	(main@serial_number^(0+128)+3),w
  2242  0C45  00CB               	movwf	(??_main+8)^(0+128)
  2243  0C46  01CC               	clrf	((??_main+8)^(0+128)+1)
  2244  0C47  084B               	movf	(??_main+8)^(0+128),w
  2245  0C48  0140               	movlb	0	; select bank0
  2246  0C49  00E7               	movwf	?_sprintf+12
  2247  0C4A  0141               	movlb	1	; select bank1
  2248  0C4B  084C               	movf	(??_main+9)^(0+128),w
  2249  0C4C  0140               	movlb	0	; select bank0
  2250  0C4D  00E8               	movwf	?_sprintf+13
  2251  0C4E  0141               	movlb	1	; select bank1
  2252  0C4F  0869               	movf	(main@serial_number^(0+128)+2),w
  2253  0C50  00CD               	movwf	(??_main+10)^(0+128)
  2254  0C51  01CE               	clrf	((??_main+10)^(0+128)+1)
  2255  0C52  084D               	movf	(??_main+10)^(0+128),w
  2256  0C53  0140               	movlb	0	; select bank0
  2257  0C54  00E9               	movwf	?_sprintf+14
  2258  0C55  0141               	movlb	1	; select bank1
  2259  0C56  084E               	movf	(??_main+11)^(0+128),w
  2260  0C57  0140               	movlb	0	; select bank0
  2261  0C58  00EA               	movwf	?_sprintf+15
  2262  0C59  0141               	movlb	1	; select bank1
  2263  0C5A  0868               	movf	(main@serial_number^(0+128)+1),w
  2264  0C5B  00CF               	movwf	(??_main+12)^(0+128)
  2265  0C5C  01D0               	clrf	((??_main+12)^(0+128)+1)
  2266  0C5D  084F               	movf	(??_main+12)^(0+128),w
  2267  0C5E  0140               	movlb	0	; select bank0
  2268  0C5F  00EB               	movwf	?_sprintf+16
  2269  0C60  0141               	movlb	1	; select bank1
  2270  0C61  0850               	movf	(??_main+13)^(0+128),w
  2271  0C62  0140               	movlb	0	; select bank0
  2272  0C63  00EC               	movwf	?_sprintf+17
  2273  0C64  0141               	movlb	1	; select bank1
  2274  0C65  0867               	movf	main@serial_number^(0+128),w
  2275  0C66  00D1               	movwf	(??_main+14)^(0+128)
  2276  0C67  01D2               	clrf	((??_main+14)^(0+128)+1)
  2277  0C68  0851               	movf	(??_main+14)^(0+128),w
  2278  0C69  0140               	movlb	0	; select bank0
  2279  0C6A  00ED               	movwf	?_sprintf+18
  2280  0C6B  0141               	movlb	1	; select bank1
  2281  0C6C  0852               	movf	(??_main+15)^(0+128),w
  2282  0C6D  0140               	movlb	0	; select bank0
  2283  0C6E  00EE               	movwf	?_sprintf+19
  2284  0C6F  3180  20CF  318B   	fcall	_sprintf
  2285                           
  2286                           ;main.c: 80: flag=OW_reset_pulse();
  2287  0C72  3192  22F4  318B   	fcall	_OW_reset_pulse
  2288  0C75  0141               	movlb	1	; select bank1
  2289  0C76  00C3               	movwf	??_main^(0+128)
  2290  0C77  01C4               	clrf	(??_main^(0+128)+1)
  2291  0C78  0843               	movf	??_main^(0+128),w
  2292  0C79  0142               	movlb	2	; select bank2
  2293  0C7A  00E7               	movwf	main@flag^(0+256)
  2294  0C7B  0141               	movlb	1	; select bank1
  2295  0C7C  0844               	movf	(??_main+1)^(0+128),w
  2296  0C7D  0142               	movlb	2	; select bank2
  2297  0C7E  00E8               	movwf	(main@flag+1)^(0+256)
  2298                           
  2299                           ;main.c: 81: OW_write_byte(0xCC);
  2300  0C7F  30CC               	movlw	204
  2301  0C80  3191  21FF  318B   	fcall	_OW_write_byte
  2302                           
  2303                           ;main.c: 82: OW_write_byte(0x44);
  2304  0C83  3044               	movlw	68
  2305  0C84  3191  21FF  318B   	fcall	_OW_write_byte
  2306                           
  2307                           ;main.c: 83: _delay((unsigned long)((750)*(32000000/4000.0)));
  2308  0C87  301F               	movlw	31
  2309  0C88  0141               	movlb	1	; select bank1
  2310  0C89  00C4               	movwf	(??_main^(0+128)+1)
  2311  0C8A  3071               	movlw	113
  2312  0C8B  00C3               	movwf	??_main^(0+128)
  2313  0C8C  301E               	movlw	30
  2314  0C8D                     u4647:	
  2315  0C8D  0B89               	decfsz	9,f
  2316  0C8E  2C8D               	goto	u4647
  2317  0C8F  0BC3               	decfsz	??_main^(0+128),f
  2318  0C90  2C8D               	goto	u4647
  2319  0C91  0BC4               	decfsz	(??_main^(0+128)+1),f
  2320  0C92  2C8D               	goto	u4647
  2321  0C93  0000               	nop
  2322                           
  2323                           ;main.c: 84: flag=OW_reset_pulse();
  2324  0C94  3192  22F4  318B   	fcall	_OW_reset_pulse
  2325  0C97  0141               	movlb	1	; select bank1
  2326  0C98  00C3               	movwf	??_main^(0+128)
  2327  0C99  01C4               	clrf	(??_main^(0+128)+1)
  2328  0C9A  0843               	movf	??_main^(0+128),w
  2329  0C9B  0142               	movlb	2	; select bank2
  2330  0C9C  00E7               	movwf	main@flag^(0+256)
  2331  0C9D  0141               	movlb	1	; select bank1
  2332  0C9E  0844               	movf	(??_main+1)^(0+128),w
  2333  0C9F  0142               	movlb	2	; select bank2
  2334  0CA0  00E8               	movwf	(main@flag+1)^(0+256)
  2335                           
  2336                           ;main.c: 85: OW_write_byte(0xCC);
  2337  0CA1  30CC               	movlw	204
  2338  0CA2  3191  21FF  318B   	fcall	_OW_write_byte
  2339                           
  2340                           ;main.c: 86: OW_write_byte(0xBE);
  2341  0CA5  30BE               	movlw	190
  2342  0CA6  3191  21FF  318B   	fcall	_OW_write_byte
  2343                           
  2344                           ;main.c: 87: tempL = OW_read_byte();
  2345  0CA9  3192  2268  318B   	fcall	_OW_read_byte
  2346  0CAC  0141               	movlb	1	; select bank1
  2347  0CAD  00C3               	movwf	??_main^(0+128)
  2348  0CAE  01C4               	clrf	(??_main^(0+128)+1)
  2349  0CAF  0843               	movf	??_main^(0+128),w
  2350  0CB0  0142               	movlb	2	; select bank2
  2351  0CB1  00E0               	movwf	main@tempL^(0+256)
  2352  0CB2  0141               	movlb	1	; select bank1
  2353  0CB3  0844               	movf	(??_main+1)^(0+128),w
  2354  0CB4  0142               	movlb	2	; select bank2
  2355  0CB5  00E1               	movwf	(main@tempL+1)^(0+256)
  2356                           
  2357                           ;main.c: 88: tempH = OW_read_byte();
  2358  0CB6  3192  2268  318B   	fcall	_OW_read_byte
  2359  0CB9  0141               	movlb	1	; select bank1
  2360  0CBA  00C3               	movwf	??_main^(0+128)
  2361  0CBB  01C4               	clrf	(??_main^(0+128)+1)
  2362  0CBC  0843               	movf	??_main^(0+128),w
  2363  0CBD  0142               	movlb	2	; select bank2
  2364  0CBE  00E2               	movwf	main@tempH^(0+256)
  2365  0CBF  0141               	movlb	1	; select bank1
  2366  0CC0  0844               	movf	(??_main+1)^(0+128),w
  2367  0CC1  0142               	movlb	2	; select bank2
  2368  0CC2  00E3               	movwf	(main@tempH+1)^(0+256)
  2369                           
  2370                           ;main.c: 90: Lcd_Clear();
  2371  0CC3  3191  21BE  318B   	fcall	_Lcd_Clear
  2372                           
  2373                           ;main.c: 91: Lcd_Set_Cursor(1,1);
  2374  0CC6  01F3               	clrf	Lcd_Set_Cursor@b
  2375  0CC7  0AF3               	incf	Lcd_Set_Cursor@b,f
  2376  0CC8  3001               	movlw	1
  2377  0CC9  3193  23A7  318B   	fcall	_Lcd_Set_Cursor
  2378                           
  2379                           ;main.c: 92: Lcd_Write_String(" 1-wire Present");
  2380  0CCC  30D8               	movlw	low (STR_2| (0+32768))
  2381  0CCD  00F5               	movwf	Lcd_Write_String@a
  2382  0CCE  3098               	movlw	high (STR_2| (0+32768))
  2383  0CCF  00F6               	movwf	Lcd_Write_String@a+1
  2384  0CD0  3192  2280  318B   	fcall	_Lcd_Write_String
  2385                           
  2386                           ;main.c: 93: Lcd_Set_Cursor(2,1);
  2387  0CD3  01F3               	clrf	Lcd_Set_Cursor@b
  2388  0CD4  0AF3               	incf	Lcd_Set_Cursor@b,f
  2389  0CD5  3002               	movlw	2
  2390  0CD6  3193  23A7  318B   	fcall	_Lcd_Set_Cursor
  2391                           
  2392                           ;main.c: 94: sprintf(buffer, "%s", deviceSerialNum);
  2393  0CD9  30D3               	movlw	low main@buffer
  2394  0CDA  0140               	movlb	0	; select bank0
  2395  0CDB  00DB               	movwf	sprintf@sp
  2396  0CDC  3000               	movlw	high main@buffer
  2397  0CDD  00DC               	movwf	sprintf@sp+1
  2398  0CDE  3004               	movlw	low (STR_3| (0+32768))
  2399  0CDF  00DD               	movwf	sprintf@f
  2400  0CE0  3099               	movlw	high (STR_3| (0+32768))
  2401  0CE1  00DE               	movwf	sprintf@f+1
  2402  0CE2  3020               	movlw	(low (main@deviceSerialNum| (0+256)))& (0+255)
  2403  0CE3  0141               	movlb	1	; select bank1
  2404  0CE4  00C3               	movwf	??_main^(0+128)
  2405  0CE5  0843               	movf	??_main^(0+128),w
  2406  0CE6  0140               	movlb	0	; select bank0
  2407  0CE7  00DF               	movwf	low ((?_sprintf| 0+4))
  2408  0CE8  3180  20CF  318B   	fcall	_sprintf
  2409                           
  2410                           ;main.c: 95: Lcd_Write_String(buffer);
  2411  0CEB  30D3               	movlw	low main@buffer
  2412  0CEC  00F5               	movwf	Lcd_Write_String@a
  2413  0CED  3000               	movlw	high main@buffer
  2414  0CEE  00F6               	movwf	Lcd_Write_String@a+1
  2415  0CEF  3192  2280  318B   	fcall	_Lcd_Write_String
  2416                           
  2417                           ;main.c: 96: _delay((unsigned long)((2000)*(32000000/4000.0)));
  2418  0CF2  3052               	movlw	82
  2419  0CF3  0141               	movlb	1	; select bank1
  2420  0CF4  00C4               	movwf	(??_main^(0+128)+1)
  2421  0CF5  302B               	movlw	43
  2422  0CF6  00C3               	movwf	??_main^(0+128)
  2423  0CF7  3000               	movlw	0
  2424  0CF8                     u4657:	
  2425  0CF8  0B89               	decfsz	9,f
  2426  0CF9  2CF8               	goto	u4657
  2427  0CFA  0BC3               	decfsz	??_main^(0+128),f
  2428  0CFB  2CF8               	goto	u4657
  2429  0CFC  0BC4               	decfsz	(??_main^(0+128)+1),f
  2430  0CFD  2CF8               	goto	u4657
  2431  0CFE  0000               	nop
  2432                           
  2433                           ;main.c: 97: temperatureFprecise = convertTemperatureF(tempL,tempH);
  2434  0CFF  0142               	movlb	2	; select bank2
  2435  0D00  0861               	movf	(main@tempL+1)^(0+256),w
  2436  0D01  0140               	movlb	0	; select bank0
  2437  0D02  00D6               	movwf	convertTemperatureF@tempL+1
  2438  0D03  0142               	movlb	2	; select bank2
  2439  0D04  0860               	movf	main@tempL^(0+256),w
  2440  0D05  0140               	movlb	0	; select bank0
  2441  0D06  00D5               	movwf	convertTemperatureF@tempL
  2442  0D07  0142               	movlb	2	; select bank2
  2443  0D08  0863               	movf	(main@tempH+1)^(0+256),w
  2444  0D09  0140               	movlb	0	; select bank0
  2445  0D0A  00D8               	movwf	convertTemperatureF@tempH+1
  2446  0D0B  0142               	movlb	2	; select bank2
  2447  0D0C  0862               	movf	main@tempH^(0+256),w
  2448  0D0D  0140               	movlb	0	; select bank0
  2449  0D0E  00D7               	movwf	convertTemperatureF@tempH
  2450  0D0F  3180  200E  318B   	fcall	_convertTemperatureF
  2451  0D12  0140               	movlb	0	; select bank0
  2452  0D13  0855               	movf	?_convertTemperatureF,w
  2453  0D14  0142               	movlb	2	; select bank2
  2454  0D15  00E4               	movwf	main@temperatureFprecise^(0+256)
  2455  0D16  0140               	movlb	0	; select bank0
  2456  0D17  0856               	movf	?_convertTemperatureF+1,w
  2457  0D18  0142               	movlb	2	; select bank2
  2458  0D19  00E5               	movwf	(main@temperatureFprecise+1)^(0+256)
  2459  0D1A  0140               	movlb	0	; select bank0
  2460  0D1B  0857               	movf	?_convertTemperatureF+2,w
  2461  0D1C  0142               	movlb	2	; select bank2
  2462  0D1D  00E6               	movwf	(main@temperatureFprecise+2)^(0+256)
  2463                           
  2464                           ;main.c: 98: Lcd_Clear();
  2465  0D1E  3191  21BE  318B   	fcall	_Lcd_Clear
  2466                           
  2467                           ;main.c: 99: Lcd_Set_Cursor(1,1);
  2468  0D21  01F3               	clrf	Lcd_Set_Cursor@b
  2469  0D22  0AF3               	incf	Lcd_Set_Cursor@b,f
  2470  0D23  3001               	movlw	1
  2471  0D24  3193  23A7  318B   	fcall	_Lcd_Set_Cursor
  2472                           
  2473                           ;main.c: 100: Lcd_Write_String("Temperature:");
  2474  0D27  30E8               	movlw	low (STR_4| (0+32768))
  2475  0D28  00F5               	movwf	Lcd_Write_String@a
  2476  0D29  3098               	movlw	high (STR_4| (0+32768))
  2477  0D2A  00F6               	movwf	Lcd_Write_String@a+1
  2478  0D2B  3192  2280  318B   	fcall	_Lcd_Write_String
  2479                           
  2480                           ;main.c: 101: Lcd_Set_Cursor(2,1);
  2481  0D2E  01F3               	clrf	Lcd_Set_Cursor@b
  2482  0D2F  0AF3               	incf	Lcd_Set_Cursor@b,f
  2483  0D30  3002               	movlw	2
  2484  0D31  3193  23A7  318B   	fcall	_Lcd_Set_Cursor
  2485                           
  2486                           ;main.c: 102: sprintf(buffer, "  %2.5f", temperatureFprecise);
  2487  0D34  30D3               	movlw	low main@buffer
  2488  0D35  0140               	movlb	0	; select bank0
  2489  0D36  00DB               	movwf	sprintf@sp
  2490  0D37  3000               	movlw	high main@buffer
  2491  0D38  00DC               	movwf	sprintf@sp+1
  2492  0D39  30F5               	movlw	low (STR_5| (0+32768))
  2493  0D3A  00DD               	movwf	sprintf@f
  2494  0D3B  3098               	movlw	high (STR_5| (0+32768))
  2495  0D3C  00DE               	movwf	sprintf@f+1
  2496  0D3D  0142               	movlb	2	; select bank2
  2497  0D3E  0864               	movf	main@temperatureFprecise^(0+256),w
  2498  0D3F  0140               	movlb	0	; select bank0
  2499  0D40  00DF               	movwf	?_sprintf+4
  2500  0D41  0142               	movlb	2	; select bank2
  2501  0D42  0865               	movf	(main@temperatureFprecise+1)^(0+256),w
  2502  0D43  0140               	movlb	0	; select bank0
  2503  0D44  00E0               	movwf	?_sprintf+5
  2504  0D45  0142               	movlb	2	; select bank2
  2505  0D46  0866               	movf	(main@temperatureFprecise+2)^(0+256),w
  2506  0D47  0140               	movlb	0	; select bank0
  2507  0D48  00E1               	movwf	?_sprintf+6
  2508  0D49  3180  20CF  318B   	fcall	_sprintf
  2509                           
  2510                           ;main.c: 103: Lcd_Write_String(buffer);
  2511  0D4C  30D3               	movlw	low main@buffer
  2512  0D4D  00F5               	movwf	Lcd_Write_String@a
  2513  0D4E  3000               	movlw	high main@buffer
  2514  0D4F  00F6               	movwf	Lcd_Write_String@a+1
  2515  0D50  3192  2280  318B   	fcall	_Lcd_Write_String
  2516                           
  2517                           ;main.c: 104: _delay((unsigned long)((2000)*(32000000/4000.0)));
  2518  0D53  3052               	movlw	82
  2519  0D54  0141               	movlb	1	; select bank1
  2520  0D55  00C4               	movwf	(??_main^(0+128)+1)
  2521  0D56  302B               	movlw	43
  2522  0D57  00C3               	movwf	??_main^(0+128)
  2523  0D58  3000               	movlw	0
  2524  0D59                     u4667:	
  2525  0D59  0B89               	decfsz	9,f
  2526  0D5A  2D59               	goto	u4667
  2527  0D5B  0BC3               	decfsz	??_main^(0+128),f
  2528  0D5C  2D59               	goto	u4667
  2529  0D5D  0BC4               	decfsz	(??_main^(0+128)+1),f
  2530  0D5E  2D59               	goto	u4667
  2531  0D5F  0000               	nop
  2532  0D60                     l3256:	
  2533                           ;main.c: 59: while (1)
  2534                           
  2535                           ;main.c: 105: }
  2536                           
  2537                           
  2538                           ;main.c: 60: {
  2539                           ;main.c: 61: int flag,i;
  2540                           ;main.c: 62: char deviceSerialNum[64];
  2541                           ;main.c: 63: char buffer[20];
  2542                           ;main.c: 64: unsigned char serial_number[8];
  2543                           ;main.c: 65: unsigned short tempL, tempH;
  2544                           ;main.c: 66: float temperatureFprecise=0.0;
  2545  0D60  3000               	movlw	0
  2546  0D61  0142               	movlb	2	; select bank2
  2547  0D62  00E4               	movwf	main@temperatureFprecise^(0+256)
  2548  0D63  3000               	movlw	0
  2549  0D64  00E5               	movwf	(main@temperatureFprecise+1)^(0+256)
  2550  0D65  3000               	movlw	0
  2551  0D66  00E6               	movwf	(main@temperatureFprecise+2)^(0+256)
  2552                           
  2553                           ;main.c: 68: flag=OW_reset_pulse();
  2554  0D67  3192  22F4  318B   	fcall	_OW_reset_pulse
  2555  0D6A  0141               	movlb	1	; select bank1
  2556  0D6B  00C3               	movwf	??_main^(0+128)
  2557  0D6C  01C4               	clrf	(??_main^(0+128)+1)
  2558  0D6D  0843               	movf	??_main^(0+128),w
  2559  0D6E  0142               	movlb	2	; select bank2
  2560  0D6F  00E7               	movwf	main@flag^(0+256)
  2561  0D70  0141               	movlb	1	; select bank1
  2562  0D71  0844               	movf	(??_main+1)^(0+128),w
  2563  0D72  0142               	movlb	2	; select bank2
  2564  0D73  00E8               	movwf	(main@flag+1)^(0+256)
  2565                           
  2566                           ;main.c: 69: if(!flag)
  2567  0D74  0867               	movf	main@flag^(0+256),w
  2568  0D75  0468               	iorwf	(main@flag+1)^(0+256),w
  2569  0D76  1903               	btfsc	3,2
  2570  0D77  2BD5               	goto	l160
  2571                           
  2572                           ;main.c: 106: else
  2573                           ;main.c: 107: {
  2574                           ;main.c: 108: do { LATAbits.LATA4 = 1; } while(0);
  2575  0D78  0140               	movlb	0	; select bank0
  2576  0D79  1618               	bsf	24,4	;volatile
  2577                           
  2578                           ;main.c: 109: Lcd_Clear();
  2579  0D7A  3191  21BE  318B   	fcall	_Lcd_Clear
  2580                           
  2581                           ;main.c: 110: Lcd_Set_Cursor(1,1);
  2582  0D7D  01F3               	clrf	Lcd_Set_Cursor@b
  2583  0D7E  0AF3               	incf	Lcd_Set_Cursor@b,f
  2584  0D7F  3001               	movlw	1
  2585  0D80  3193  23A7  318B   	fcall	_Lcd_Set_Cursor
  2586                           
  2587                           ;main.c: 111: Lcd_Write_String(" 1-wire Missing");
  2588  0D83  30C8               	movlw	low (STR_6| (0+32768))
  2589  0D84  00F5               	movwf	Lcd_Write_String@a
  2590  0D85  3098               	movlw	high (STR_6| (0+32768))
  2591  0D86  00F6               	movwf	Lcd_Write_String@a+1
  2592  0D87  3192  2280  318B   	fcall	_Lcd_Write_String
  2593                           
  2594                           ;main.c: 112: _delay((unsigned long)((2000)*(32000000/4000.0)));
  2595  0D8A  3052               	movlw	82
  2596  0D8B  0141               	movlb	1	; select bank1
  2597  0D8C  00C4               	movwf	(??_main^(0+128)+1)
  2598  0D8D  302B               	movlw	43
  2599  0D8E  00C3               	movwf	??_main^(0+128)
  2600  0D8F  3000               	movlw	0
  2601  0D90                     u4677:	
  2602  0D90  0B89               	decfsz	9,f
  2603  0D91  2D90               	goto	u4677
  2604  0D92  0BC3               	decfsz	??_main^(0+128),f
  2605  0D93  2D90               	goto	u4677
  2606  0D94  0BC4               	decfsz	(??_main^(0+128)+1),f
  2607  0D95  2D90               	goto	u4677
  2608  0D96  0000               	nop
  2609                           
  2610                           ;main.c: 113: for(i=0;i<16;i++){
  2611  0D97  0142               	movlb	2	; select bank2
  2612  0D98  01E9               	clrf	main@i^(0+256)
  2613  0D99  01EA               	clrf	(main@i+1)^(0+256)
  2614  0D9A                     L1:	
  2615  0D9A  086A               	movf	(main@i+1)^(0+256),w
  2616  0D9B  3A80               	xorlw	128
  2617  0D9C  0141               	movlb	1	; select bank1
  2618  0D9D  00C3               	movwf	??_main^(0+128)
  2619  0D9E  3080               	movlw	128
  2620  0D9F  0243               	subwf	??_main^(0+128),w
  2621  0DA0  1D03               	skipz
  2622  0DA1  2DA5               	goto	u4615
  2623  0DA2  3010               	movlw	16
  2624  0DA3  0142               	movlb	2	; select bank2
  2625  0DA4  0269               	subwf	main@i^(0+256),w
  2626  0DA5                     u4615:	
  2627  0DA5  1803               	btfsc	3,0
  2628  0DA6  2D60               	goto	l3256
  2629                           
  2630                           ;main.c: 114: _delay((unsigned long)((100)*(32000000/4000.0)));
  2631  0DA7  3005               	movlw	5
  2632  0DA8  0141               	movlb	1	; select bank1
  2633  0DA9  00C4               	movwf	(??_main^(0+128)+1)
  2634  0DAA  300F               	movlw	15
  2635  0DAB  00C3               	movwf	??_main^(0+128)
  2636  0DAC  30F1               	movlw	241
  2637  0DAD                     u4687:	
  2638  0DAD  0B89               	decfsz	9,f
  2639  0DAE  2DAD               	goto	u4687
  2640  0DAF  0BC3               	decfsz	??_main^(0+128),f
  2641  0DB0  2DAD               	goto	u4687
  2642  0DB1  0BC4               	decfsz	(??_main^(0+128)+1),f
  2643  0DB2  2DAD               	goto	u4687
  2644                           
  2645                           ;main.c: 115: Lcd_Shift_Left();
  2646  0DB3  3191  21C6  318B   	fcall	_Lcd_Shift_Left
  2647  0DB6  3001               	movlw	1
  2648  0DB7  0142               	movlb	2	; select bank2
  2649  0DB8  07E9               	addwf	main@i^(0+256),f
  2650  0DB9  3000               	movlw	0
  2651  0DBA  3DEA               	addwfc	(main@i+1)^(0+256),f
  2652  0DBB  2D9A               	goto	L1
  2653  0DBC                     __end_of_main:	
  2654                           
  2655                           	psect	text1
  2656  00CF                     __ptext1:	
  2657 ;; *************** function _sprintf *****************
  2658 ;; Defined at:
  2659 ;;		line 492 in file "/Applications/microchip/xc8/v1.42/sources/common/doprnt.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;  sp              2   59[BANK0 ] PTR unsigned char 
  2662 ;;		 -> main@buffer(20), main@deviceSerialNum(64), 
  2663 ;;  f               2   61[BANK0 ] PTR const unsigned char 
  2664 ;;		 -> STR_5(8), STR_3(3), STR_1(33), 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  idx             1    9[BANK1 ] unsigned char 
  2667 ;;  tmpval          4   19[BANK1 ] struct .
  2668 ;;  val             4   15[BANK1 ] unsigned long 
  2669 ;;  fval            3   27[BANK1 ] unsigned long 
  2670 ;;  prec            2   32[BANK1 ] int 
  2671 ;;  width           2   30[BANK1 ] int 
  2672 ;;  flag            2   25[BANK1 ] unsigned short 
  2673 ;;  exp             2   23[BANK1 ] int 
  2674 ;;  len             2   13[BANK1 ] unsigned int 
  2675 ;;  cp              2   10[BANK1 ] PTR const unsigned char 
  2676 ;;		 -> STR_7(7), main@deviceSerialNum(64), 
  2677 ;;  c               1   34[BANK1 ] char 
  2678 ;;  ap              1   12[BANK1 ] PTR void [1]
  2679 ;;		 -> ?_sprintf(2), 
  2680 ;;  d               1    0        unsigned char 
  2681 ;; Return value:  Size  Location     Type
  2682 ;;                  2   59[BANK0 ] int 
  2683 ;; Registers used:
  2684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2685 ;; Tracked objects:
  2686 ;;		On entry : 0/0
  2687 ;;		On exit  : 0/0
  2688 ;;		Unchanged: 0/0
  2689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2690 ;;      Params:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2691 ;;      Locals:         0       0      29       0       0       0       0       0       0       0       0       0       
      +0       0
  2692 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  2693 ;;      Totals:         0      20      35       0       0       0       0       0       0       0       0       0       
      +0       0
  2694 ;;Total ram usage:       55 bytes
  2695 ;; Hardware stack levels used:    1
  2696 ;; Hardware stack levels required when called:    3
  2697 ;; This function calls:
  2698 ;;		___awdiv
  2699 ;;		___ftadd
  2700 ;;		___ftge
  2701 ;;		___ftmul
  2702 ;;		___ftneg
  2703 ;;		___ftsub
  2704 ;;		___fttol
  2705 ;;		___lldiv
  2706 ;;		___llmod
  2707 ;;		___lltoft
  2708 ;;		___wmul
  2709 ;;		__div_to_l_
  2710 ;;		__tdiv_to_l_
  2711 ;;		_fround
  2712 ;;		_isdigit
  2713 ;;		_scale
  2714 ;; This function is called by:
  2715 ;;		_main
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           
  2720                           ;psect for function _sprintf
  2721  00CF                     _sprintf:	
  2722                           
  2723                           ;doprnt.c: 494: va_list ap;
  2724                           ;doprnt.c: 499: signed char c;
  2725                           ;doprnt.c: 501: int width;
  2726                           ;doprnt.c: 504: int prec;
  2727                           ;doprnt.c: 508: unsigned short flag;
  2728                           ;doprnt.c: 515: char d;
  2729                           ;doprnt.c: 516: double fval;
  2730                           ;doprnt.c: 517: int exp;
  2731                           ;doprnt.c: 523: union {
  2732                           ;doprnt.c: 524: unsigned long vd;
  2733                           ;doprnt.c: 525: double integ;
  2734                           ;doprnt.c: 526: } tmpval;
  2735                           ;doprnt.c: 528: unsigned long val;
  2736                           ;doprnt.c: 529: unsigned len;
  2737                           ;doprnt.c: 530: const char * cp;
  2738                           ;doprnt.c: 533: *ap = __va_start();
  2739                           
  2740                           ;incstack = 0
  2741                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2742  00CF  305F               	movlw	(low ((?_sprintf| 0+4)))& (0+255)
  2743  00D0  0141               	movlb	1	; select bank1
  2744  00D1  00A0               	movwf	??_sprintf^(0+128)
  2745  00D2  0820               	movf	??_sprintf^(0+128),w
  2746  00D3  00AC               	movwf	sprintf@ap^(0+128)
  2747  00D4                     l3246:	
  2748                           ;doprnt.c: 536: while(c = *f++) {
  2749                           
  2750  00D4  0140               	movlb	0	; select bank0
  2751  00D5  085E               	movf	sprintf@f+1,w
  2752  00D6  0141               	movlb	1	; select bank1
  2753  00D7  00A1               	movwf	(??_sprintf^(0+128)+1)
  2754  00D8  0140               	movlb	0	; select bank0
  2755  00D9  085D               	movf	sprintf@f,w
  2756  00DA  0141               	movlb	1	; select bank1
  2757  00DB  00A0               	movwf	??_sprintf^(0+128)
  2758  00DC  0140               	movlb	0	; select bank0
  2759  00DD  0ADD               	incf	sprintf@f,f
  2760  00DE  1903               	skipnz
  2761  00DF  0ADE               	incf	sprintf@f+1,f
  2762  00E0  0141               	movlb	1	; select bank1
  2763  00E1  0820               	movf	??_sprintf^(0+128),w
  2764  00E2  0084               	movwf	4
  2765  00E3  0821               	movf	(??_sprintf+1)^(0+128),w
  2766  00E4  0085               	movwf	5
  2767  00E5  0800               	movf	0,w	;code access
  2768  00E6  00A2               	movwf	(??_sprintf+2)^(0+128)
  2769  00E7  0822               	movf	(??_sprintf+2)^(0+128),w
  2770  00E8  00C2               	movwf	sprintf@c^(0+128)
  2771  00E9  0842               	movf	sprintf@c^(0+128),w
  2772  00EA  1903               	btfsc	3,2
  2773  00EB  2FF6               	goto	l3248
  2774                           
  2775                           ;doprnt.c: 538: if(c != '%')
  2776  00EC  3025               	movlw	37
  2777  00ED  0642               	xorwf	sprintf@c^(0+128),w
  2778  00EE  1903               	btfsc	3,2
  2779  00EF  28FE               	goto	l2902
  2780                           
  2781                           ;doprnt.c: 540: {
  2782                           ;doprnt.c: 541: ((*sp++ = (c)));
  2783  00F0  0140               	movlb	0	; select bank0
  2784  00F1  085B               	movf	sprintf@sp,w
  2785  00F2  0086               	movwf	6
  2786  00F3  085C               	movf	sprintf@sp+1,w
  2787  00F4  0087               	movwf	7
  2788  00F5  0141               	movlb	1	; select bank1
  2789  00F6  0842               	movf	sprintf@c^(0+128),w
  2790  00F7  0081               	movwf	1
  2791  00F8  3001               	movlw	1
  2792  00F9  0140               	movlb	0	; select bank0
  2793  00FA  07DB               	addwf	sprintf@sp,f
  2794  00FB  3000               	movlw	0
  2795  00FC  3DDC               	addwfc	sprintf@sp+1,f
  2796                           
  2797                           ;doprnt.c: 542: continue;
  2798  00FD  28D4               	goto	l3246
  2799  00FE                     l2902:	
  2800                           
  2801                           ;doprnt.c: 543: }
  2802                           ;doprnt.c: 546: width = 0;
  2803  00FE  0141               	movlb	1	; select bank1
  2804  00FF  01BE               	clrf	sprintf@width^(0+128)
  2805  0100  01BF               	clrf	(sprintf@width+1)^(0+128)
  2806                           
  2807                           ;doprnt.c: 548: flag = 0;
  2808  0101  01B9               	clrf	sprintf@flag^(0+128)
  2809  0102  01BA               	clrf	(sprintf@flag+1)^(0+128)
  2810                           
  2811                           ;doprnt.c: 551: switch(*f) {
  2812                           
  2813                           ;doprnt.c: 550: for(;;) {
  2814  0103  290B               	goto	l2908
  2815  0104                     l213:	
  2816                           ;doprnt.c: 579: case '0':
  2817                           
  2818                           
  2819                           ;doprnt.c: 580: flag |= 0x04;
  2820  0104  0141               	movlb	1	; select bank1
  2821  0105  1539               	bsf	sprintf@flag^(0+128),2
  2822                           
  2823                           ;doprnt.c: 581: f++;
  2824  0106  3001               	movlw	1
  2825  0107  0140               	movlb	0	; select bank0
  2826  0108  07DD               	addwf	sprintf@f,f
  2827  0109  3000               	movlw	0
  2828  010A  3DDE               	addwfc	sprintf@f+1,f
  2829  010B                     l2908:	
  2830                           ;doprnt.c: 584: }
  2831                           
  2832                           ;doprnt.c: 582: continue;
  2833                           
  2834  010B  0140               	movlb	0	; select bank0
  2835  010C  085D               	movf	sprintf@f,w
  2836  010D  0084               	movwf	4
  2837  010E  085E               	movf	sprintf@f+1,w
  2838  010F  0085               	movwf	5
  2839  0110  0800               	movf	0,w	;code access
  2840                           
  2841                           ; Switch size 1, requested type "space"
  2842                           ; Number of cases is 1, Range of values is 48 to 48
  2843                           ; switch strategies available:
  2844                           ; Name         Instructions Cycles
  2845                           ; simple_byte            4     3 (average)
  2846                           ; direct_byte           11     9 (fixed)
  2847                           ; jumptable            263     9 (fixed)
  2848                           ;	Chosen strategy is simple_byte
  2849  0111  3A30               	xorlw	48	; case 48
  2850  0112  1903               	skipnz
  2851  0113  2904               	goto	l213
  2852  0114  2915               	goto	l2910
  2853  0115                     l2910:	
  2854                           ;doprnt.c: 586: }
  2855                           
  2856                           ;doprnt.c: 585: break;
  2857                           
  2858                           
  2859                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2860  0115  085D               	movf	sprintf@f,w
  2861  0116  0084               	movwf	4
  2862  0117  085E               	movf	sprintf@f+1,w
  2863  0118  0085               	movwf	5
  2864  0119  0800               	movf	0,w	;code access
  2865  011A  3191  21E1  3180   	fcall	_isdigit
  2866  011D  1C03               	btfss	3,0
  2867  011E  295A               	goto	l2922
  2868                           
  2869                           ;doprnt.c: 598: width = 0;
  2870  011F  0141               	movlb	1	; select bank1
  2871  0120  01BE               	clrf	sprintf@width^(0+128)
  2872  0121  01BF               	clrf	(sprintf@width+1)^(0+128)
  2873  0122                     l2914:	
  2874                           ;doprnt.c: 599: do {
  2875                           
  2876                           
  2877                           ;doprnt.c: 600: width *= 10;
  2878  0122  300A               	movlw	10
  2879  0123  0140               	movlb	0	; select bank0
  2880  0124  00A4               	movwf	___wmul@multiplier
  2881  0125  3000               	movlw	0
  2882  0126  00A5               	movwf	___wmul@multiplier+1
  2883  0127  0141               	movlb	1	; select bank1
  2884  0128  083F               	movf	(sprintf@width+1)^(0+128),w
  2885  0129  0140               	movlb	0	; select bank0
  2886  012A  00A7               	movwf	___wmul@multiplicand+1
  2887  012B  0141               	movlb	1	; select bank1
  2888  012C  083E               	movf	sprintf@width^(0+128),w
  2889  012D  0140               	movlb	0	; select bank0
  2890  012E  00A6               	movwf	___wmul@multiplicand
  2891  012F  3192  229A  3180   	fcall	___wmul
  2892  0132  0140               	movlb	0	; select bank0
  2893  0133  0825               	movf	?___wmul+1,w
  2894  0134  0141               	movlb	1	; select bank1
  2895  0135  00BF               	movwf	(sprintf@width+1)^(0+128)
  2896  0136  0140               	movlb	0	; select bank0
  2897  0137  0824               	movf	?___wmul,w
  2898  0138  0141               	movlb	1	; select bank1
  2899  0139  00BE               	movwf	sprintf@width^(0+128)
  2900                           
  2901                           ;doprnt.c: 601: width += *f++ - '0';
  2902  013A  0140               	movlb	0	; select bank0
  2903  013B  085D               	movf	sprintf@f,w
  2904  013C  0084               	movwf	4
  2905  013D  085E               	movf	sprintf@f+1,w
  2906  013E  0085               	movwf	5
  2907  013F  0800               	movf	0,w	;code access
  2908  0140  3ED0               	addlw	208
  2909  0141  0141               	movlb	1	; select bank1
  2910  0142  00A0               	movwf	??_sprintf^(0+128)
  2911  0143  30FF               	movlw	255
  2912  0144  1803               	skipnc
  2913  0145  3000               	movlw	0
  2914  0146  00A1               	movwf	(??_sprintf^(0+128)+1)
  2915  0147  0820               	movf	??_sprintf^(0+128),w
  2916  0148  07BE               	addwf	sprintf@width^(0+128),f
  2917  0149  0821               	movf	(??_sprintf+1)^(0+128),w
  2918  014A  3DBF               	addwfc	(sprintf@width+1)^(0+128),f
  2919  014B  3001               	movlw	1
  2920  014C  0140               	movlb	0	; select bank0
  2921  014D  07DD               	addwf	sprintf@f,f
  2922  014E  3000               	movlw	0
  2923  014F  3DDE               	addwfc	sprintf@f+1,f
  2924                           
  2925                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2926  0150  085D               	movf	sprintf@f,w
  2927  0151  0084               	movwf	4
  2928  0152  085E               	movf	sprintf@f+1,w
  2929  0153  0085               	movwf	5
  2930  0154  0800               	movf	0,w	;code access
  2931  0155  3191  21E1  3180   	fcall	_isdigit
  2932  0158  1803               	btfsc	3,0
  2933  0159  2922               	goto	l2914
  2934  015A                     l2922:	
  2935                           
  2936                           ;doprnt.c: 608: }
  2937                           ;doprnt.c: 611: if(*f == '.') {
  2938  015A  0140               	movlb	0	; select bank0
  2939  015B  085D               	movf	sprintf@f,w
  2940  015C  0084               	movwf	4
  2941  015D  085E               	movf	sprintf@f+1,w
  2942  015E  0085               	movwf	5
  2943  015F  0012               	moviw fsr0++
  2944  0160  3A2E               	xorlw	46
  2945  0161  1D03               	btfss	3,2
  2946  0162  29A6               	goto	l2936
  2947                           
  2948                           ;doprnt.c: 612: flag |= 0x4000;
  2949  0163  0141               	movlb	1	; select bank1
  2950  0164  173A               	bsf	(sprintf@flag^(0+128)+1),6
  2951                           
  2952                           ;doprnt.c: 613: f++;
  2953  0165  3001               	movlw	1
  2954  0166  0140               	movlb	0	; select bank0
  2955  0167  07DD               	addwf	sprintf@f,f
  2956  0168  3000               	movlw	0
  2957  0169  3DDE               	addwfc	sprintf@f+1,f
  2958                           
  2959                           ;doprnt.c: 620: {
  2960                           ;doprnt.c: 621: prec = 0;
  2961  016A  0141               	movlb	1	; select bank1
  2962  016B  01C0               	clrf	sprintf@prec^(0+128)
  2963  016C  01C1               	clrf	(sprintf@prec+1)^(0+128)
  2964  016D                     l2934:	
  2965                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2966                           
  2967  016D  0140               	movlb	0	; select bank0
  2968  016E  085D               	movf	sprintf@f,w
  2969  016F  0084               	movwf	4
  2970  0170  085E               	movf	sprintf@f+1,w
  2971  0171  0085               	movwf	5
  2972  0172  0800               	movf	0,w	;code access
  2973  0173  3191  21E1  3180   	fcall	_isdigit
  2974  0176  1C03               	btfss	3,0
  2975  0177  2A28               	goto	l2980
  2976                           
  2977                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2978  0178  0140               	movlb	0	; select bank0
  2979  0179  085D               	movf	sprintf@f,w
  2980  017A  0084               	movwf	4
  2981  017B  085E               	movf	sprintf@f+1,w
  2982  017C  0085               	movwf	5
  2983  017D  0800               	movf	0,w	;code access
  2984  017E  0141               	movlb	1	; select bank1
  2985  017F  00A0               	movwf	??_sprintf^(0+128)
  2986  0180  01A1               	clrf	(??_sprintf^(0+128)+1)
  2987  0181  0841               	movf	(sprintf@prec+1)^(0+128),w
  2988  0182  0140               	movlb	0	; select bank0
  2989  0183  00A5               	movwf	___wmul@multiplier+1
  2990  0184  0141               	movlb	1	; select bank1
  2991  0185  0840               	movf	sprintf@prec^(0+128),w
  2992  0186  0140               	movlb	0	; select bank0
  2993  0187  00A4               	movwf	___wmul@multiplier
  2994  0188  300A               	movlw	10
  2995  0189  00A6               	movwf	___wmul@multiplicand
  2996  018A  3000               	movlw	0
  2997  018B  00A7               	movwf	___wmul@multiplicand+1
  2998  018C  3192  229A  3180   	fcall	___wmul
  2999  018F  0141               	movlb	1	; select bank1
  3000  0190  0820               	movf	??_sprintf^(0+128),w
  3001  0191  0140               	movlb	0	; select bank0
  3002  0192  0724               	addwf	?___wmul,w
  3003  0193  0141               	movlb	1	; select bank1
  3004  0194  00A2               	movwf	(??_sprintf+2)^(0+128)
  3005  0195  0821               	movf	(??_sprintf+1)^(0+128),w
  3006  0196  0140               	movlb	0	; select bank0
  3007  0197  3D25               	addwfc	?___wmul+1,w
  3008  0198  0141               	movlb	1	; select bank1
  3009  0199  00A3               	movwf	(??_sprintf+3)^(0+128)
  3010  019A  0822               	movf	(??_sprintf+2)^(0+128),w
  3011  019B  3ED0               	addlw	208
  3012  019C  00C0               	movwf	sprintf@prec^(0+128)
  3013  019D  30FF               	movlw	255
  3014  019E  3D23               	addwfc	(??_sprintf+3)^(0+128),w
  3015  019F  00C1               	movwf	(sprintf@prec+1)^(0+128)
  3016  01A0  3001               	movlw	1
  3017  01A1  0140               	movlb	0	; select bank0
  3018  01A2  07DD               	addwf	sprintf@f,f
  3019  01A3  3000               	movlw	0
  3020  01A4  3DDE               	addwfc	sprintf@f+1,f
  3021  01A5  296D               	goto	l2934
  3022  01A6                     l2936:	
  3023                           ;doprnt.c: 624: }
  3024                           ;doprnt.c: 625: } else {
  3025                           
  3026                           
  3027                           ;doprnt.c: 626: prec = 0;
  3028  01A6  0141               	movlb	1	; select bank1
  3029  01A7  01C0               	clrf	sprintf@prec^(0+128)
  3030  01A8  01C1               	clrf	(sprintf@prec+1)^(0+128)
  3031                           
  3032                           ;doprnt.c: 628: flag |= 0x1000;
  3033  01A9  163A               	bsf	(sprintf@flag^(0+128)+1),4
  3034                           
  3035                           ;doprnt.c: 630: }
  3036                           ;doprnt.c: 635: switch(c = *f++) {
  3037  01AA  2A28               	goto	l2980
  3038  01AB                     l228:	
  3039                           ;doprnt.c: 662: case 'f':
  3040                           
  3041                           ;doprnt.c: 638: goto alldone;
  3042                           
  3043                           ;doprnt.c: 637: case 0:
  3044                           
  3045                           
  3046                           ;doprnt.c: 663: flag |= 0x400;
  3047  01AB  153A               	bsf	(sprintf@flag^(0+128)+1),2
  3048                           
  3049                           ;doprnt.c: 718: case 'x':
  3050                           ;doprnt.c: 723: break;
  3051                           
  3052                           ;doprnt.c: 712: case 'X':
  3053                           
  3054                           ;doprnt.c: 664: break;
  3055  01AC  2A4B               	goto	l2982
  3056  01AD                     l2940:	
  3057                           ;doprnt.c: 728: case 's':
  3058                           
  3059                           
  3060                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3061  01AD  082C               	movf	sprintf@ap^(0+128),w
  3062  01AE  0086               	movwf	6
  3063  01AF  0187               	clrf	7
  3064  01B0  0801               	movf	1,w
  3065  01B1  00AA               	movwf	sprintf@cp^(0+128)
  3066  01B2  3001               	movlw	1
  3067  01B3  00AB               	movwf	(sprintf@cp+1)^(0+128)
  3068  01B4  3001               	movlw	1
  3069  01B5  00A0               	movwf	??_sprintf^(0+128)
  3070  01B6  0820               	movf	??_sprintf^(0+128),w
  3071  01B7  07AC               	addwf	sprintf@ap^(0+128),f
  3072                           
  3073                           ;doprnt.c: 740: if(!cp)
  3074  01B8  082A               	movf	sprintf@cp^(0+128),w
  3075  01B9  042B               	iorwf	(sprintf@cp+1)^(0+128),w
  3076  01BA  1D03               	btfss	3,2
  3077  01BB  29C0               	goto	l2948
  3078                           
  3079                           ;doprnt.c: 741: cp = "(null)";
  3080  01BC  30FD               	movlw	low (STR_7| (0+32768))
  3081  01BD  00AA               	movwf	sprintf@cp^(0+128)
  3082  01BE  3098               	movlw	high (STR_7| (0+32768))
  3083  01BF  00AB               	movwf	(sprintf@cp^(0+128)+1)
  3084  01C0                     l2948:	
  3085                           
  3086                           ;doprnt.c: 745: len = 0;
  3087  01C0  01AD               	clrf	sprintf@len^(0+128)
  3088  01C1  01AE               	clrf	(sprintf@len+1)^(0+128)
  3089  01C2                     l2952:	
  3090                           ;doprnt.c: 746: while(cp[len])
  3091                           
  3092  01C2  082A               	movf	sprintf@cp^(0+128),w
  3093  01C3  072D               	addwf	sprintf@len^(0+128),w
  3094  01C4  0084               	movwf	4
  3095  01C5  082B               	movf	(sprintf@cp+1)^(0+128),w
  3096  01C6  3D2E               	addwfc	(sprintf@len+1)^(0+128),w
  3097  01C7  0085               	movwf	5
  3098  01C8  0012               	moviw fsr0++
  3099  01C9  1903               	btfsc	3,2
  3100  01CA  29D0               	goto	l2954
  3101                           
  3102                           ;doprnt.c: 747: len++;
  3103  01CB  3001               	movlw	1
  3104  01CC  07AD               	addwf	sprintf@len^(0+128),f
  3105  01CD  3000               	movlw	0
  3106  01CE  3DAE               	addwfc	(sprintf@len+1)^(0+128),f
  3107  01CF  29C2               	goto	l2952
  3108  01D0                     l2954:	
  3109                           
  3110                           ;doprnt.c: 753: if(prec && prec < len)
  3111  01D0  0840               	movf	sprintf@prec^(0+128),w
  3112  01D1  0441               	iorwf	(sprintf@prec+1)^(0+128),w
  3113  01D2  1903               	btfsc	3,2
  3114  01D3  29E0               	goto	l237
  3115  01D4  082E               	movf	(sprintf@len+1)^(0+128),w
  3116  01D5  0241               	subwf	(sprintf@prec+1)^(0+128),w
  3117  01D6  1D03               	skipz
  3118  01D7  29DA               	goto	u4035
  3119  01D8  082D               	movf	sprintf@len^(0+128),w
  3120  01D9  0240               	subwf	sprintf@prec^(0+128),w
  3121  01DA                     u4035:	
  3122  01DA  1803               	skipnc
  3123  01DB  29E0               	goto	l237
  3124                           
  3125                           ;doprnt.c: 754: len = prec;
  3126  01DC  0841               	movf	(sprintf@prec+1)^(0+128),w
  3127  01DD  00AE               	movwf	(sprintf@len+1)^(0+128)
  3128  01DE  0840               	movf	sprintf@prec^(0+128),w
  3129  01DF  00AD               	movwf	sprintf@len^(0+128)
  3130  01E0                     l237:	
  3131                           
  3132                           ;doprnt.c: 757: if(width > len)
  3133  01E0  083F               	movf	(sprintf@width+1)^(0+128),w
  3134  01E1  022E               	subwf	(sprintf@len+1)^(0+128),w
  3135  01E2  1D03               	skipz
  3136  01E3  29E6               	goto	u4045
  3137  01E4  083E               	movf	sprintf@width^(0+128),w
  3138  01E5  022D               	subwf	sprintf@len^(0+128),w
  3139  01E6                     u4045:	
  3140  01E6  1803               	skipnc
  3141  01E7  29ED               	goto	l2962
  3142                           
  3143                           ;doprnt.c: 758: width -= len;
  3144  01E8  082D               	movf	sprintf@len^(0+128),w
  3145  01E9  02BE               	subwf	sprintf@width^(0+128),f
  3146  01EA  082E               	movf	(sprintf@len+1)^(0+128),w
  3147  01EB  3BBF               	subwfb	(sprintf@width+1)^(0+128),f
  3148  01EC  29EF               	goto	l2968
  3149  01ED                     l2962:	
  3150                           
  3151                           ;doprnt.c: 759: else
  3152                           ;doprnt.c: 760: width = 0;
  3153  01ED  01BE               	clrf	sprintf@width^(0+128)
  3154  01EE  01BF               	clrf	(sprintf@width+1)^(0+128)
  3155  01EF                     l2968:	
  3156                           ;doprnt.c: 764: while(width--)
  3157                           
  3158  01EF  30FF               	movlw	255
  3159  01F0  0141               	movlb	1	; select bank1
  3160  01F1  07BE               	addwf	sprintf@width^(0+128),f
  3161  01F2  30FF               	movlw	255
  3162  01F3  3DBF               	addwfc	(sprintf@width+1)^(0+128),f
  3163  01F4  0A3E               	incf	sprintf@width^(0+128),w
  3164  01F5  1903               	btfsc	3,2
  3165  01F6  0A3F               	incf	(sprintf@width+1)^(0+128),w
  3166  01F7  1903               	btfsc	3,2
  3167  01F8  2A1C               	goto	l2976
  3168                           
  3169                           ;doprnt.c: 765: ((*sp++ = (' ')));
  3170  01F9  0140               	movlb	0	; select bank0
  3171  01FA  085B               	movf	sprintf@sp,w
  3172  01FB  0086               	movwf	6
  3173  01FC  085C               	movf	sprintf@sp+1,w
  3174  01FD  0087               	movwf	7
  3175  01FE  3020               	movlw	32
  3176  01FF  0081               	movwf	1
  3177  0200  3001               	movlw	1
  3178  0201  07DB               	addwf	sprintf@sp,f
  3179  0202  3000               	movlw	0
  3180  0203  3DDC               	addwfc	sprintf@sp+1,f
  3181  0204  29EF               	goto	l2968
  3182  0205                     l2970:	
  3183                           ;doprnt.c: 767: while(len--)
  3184                           
  3185                           
  3186                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  3187  0205  082A               	movf	sprintf@cp^(0+128),w
  3188  0206  0084               	movwf	4
  3189  0207  082B               	movf	(sprintf@cp+1)^(0+128),w
  3190  0208  0085               	movwf	5
  3191  0209  0800               	movf	0,w	;code access
  3192  020A  00A0               	movwf	??_sprintf^(0+128)
  3193  020B  0140               	movlb	0	; select bank0
  3194  020C  085B               	movf	sprintf@sp,w
  3195  020D  0086               	movwf	6
  3196  020E  085C               	movf	sprintf@sp+1,w
  3197  020F  0087               	movwf	7
  3198  0210  0141               	movlb	1	; select bank1
  3199  0211  0820               	movf	??_sprintf^(0+128),w
  3200  0212  0081               	movwf	1
  3201  0213  3001               	movlw	1
  3202  0214  07AA               	addwf	sprintf@cp^(0+128),f
  3203  0215  3000               	movlw	0
  3204  0216  3DAB               	addwfc	(sprintf@cp+1)^(0+128),f
  3205  0217  3001               	movlw	1
  3206  0218  0140               	movlb	0	; select bank0
  3207  0219  07DB               	addwf	sprintf@sp,f
  3208  021A  3000               	movlw	0
  3209  021B  3DDC               	addwfc	sprintf@sp+1,f
  3210  021C                     l2976:	
  3211  021C  3001               	movlw	1
  3212  021D  0141               	movlb	1	; select bank1
  3213  021E  02AD               	subwf	sprintf@len^(0+128),f
  3214  021F  3000               	movlw	0
  3215  0220  3BAE               	subwfb	(sprintf@len+1)^(0+128),f
  3216  0221  0A2D               	incf	sprintf@len^(0+128),w
  3217  0222  1D03               	skipz
  3218  0223  2A05               	goto	l2970
  3219  0224  0A2E               	incf	(sprintf@len+1)^(0+128),w
  3220  0225  1903               	btfsc	3,2
  3221  0226  28D4               	goto	l3246
  3222  0227  2A05               	goto	l2970
  3223  0228                     l2980:	
  3224                           ;doprnt.c: 822: }
  3225                           
  3226                           ;doprnt.c: 813: continue;
  3227                           
  3228                           ;doprnt.c: 802: default:
  3229                           
  3230                           ;doprnt.c: 774: continue;
  3231                           
  3232  0228  0140               	movlb	0	; select bank0
  3233  0229  085E               	movf	sprintf@f+1,w
  3234  022A  0141               	movlb	1	; select bank1
  3235  022B  00A1               	movwf	(??_sprintf^(0+128)+1)
  3236  022C  0140               	movlb	0	; select bank0
  3237  022D  085D               	movf	sprintf@f,w
  3238  022E  0141               	movlb	1	; select bank1
  3239  022F  00A0               	movwf	??_sprintf^(0+128)
  3240  0230  0140               	movlb	0	; select bank0
  3241  0231  0ADD               	incf	sprintf@f,f
  3242  0232  1903               	skipnz
  3243  0233  0ADE               	incf	sprintf@f+1,f
  3244  0234  0141               	movlb	1	; select bank1
  3245  0235  0820               	movf	??_sprintf^(0+128),w
  3246  0236  0084               	movwf	4
  3247  0237  0821               	movf	(??_sprintf+1)^(0+128),w
  3248  0238  0085               	movwf	5
  3249  0239  0800               	movf	0,w	;code access
  3250  023A  00C2               	movwf	sprintf@c^(0+128)
  3251                           
  3252                           ; Switch size 1, requested type "space"
  3253                           ; Number of cases is 5, Range of values is 0 to 120
  3254                           ; switch strategies available:
  3255                           ; Name         Instructions Cycles
  3256                           ; simple_byte           16     9 (average)
  3257                           ; direct_byte          248     6 (fixed)
  3258                           ; jumptable            260     6 (fixed)
  3259                           ;	Chosen strategy is simple_byte
  3260  023B  3A00               	xorlw	0	; case 0
  3261  023C  1903               	skipnz
  3262  023D  2FF6               	goto	l3248
  3263  023E  3A58               	xorlw	88	; case 88
  3264  023F  1903               	skipnz
  3265  0240  2A4B               	goto	l2982
  3266  0241  3A3E               	xorlw	62	; case 102
  3267  0242  1903               	skipnz
  3268  0243  29AB               	goto	l228
  3269  0244  3A15               	xorlw	21	; case 115
  3270  0245  1903               	skipnz
  3271  0246  29AD               	goto	l2940
  3272  0247  3A0B               	xorlw	11	; case 120
  3273  0248  1903               	skipnz
  3274  0249  2A4B               	goto	l2982
  3275  024A  28D4               	goto	l3246
  3276  024B                     l2982:	
  3277                           
  3278                           ;doprnt.c: 825: if(flag & (0x700)) {
  3279  024B  3000               	movlw	0
  3280  024C  0539               	andwf	sprintf@flag^(0+128),w
  3281  024D  00A0               	movwf	??_sprintf^(0+128)
  3282  024E  3007               	movlw	7
  3283  024F  053A               	andwf	(sprintf@flag+1)^(0+128),w
  3284  0250  00A1               	movwf	(??_sprintf+1)^(0+128)
  3285  0251  0820               	movf	??_sprintf^(0+128),w
  3286  0252  0421               	iorwf	(??_sprintf^(0+128)+1),w
  3287  0253  1903               	btfsc	3,2
  3288  0254  2E8C               	goto	l3158
  3289                           
  3290                           ;doprnt.c: 827: if(flag & 0x1000)
  3291  0255  1E3A               	btfss	(sprintf@flag+1)^(0+128),4
  3292  0256  2A5B               	goto	l2988
  3293                           
  3294                           ;doprnt.c: 829: prec = 6;
  3295  0257  3006               	movlw	6
  3296  0258  00C0               	movwf	sprintf@prec^(0+128)
  3297  0259  3000               	movlw	0
  3298  025A  00C1               	movwf	(sprintf@prec^(0+128)+1)
  3299  025B                     l2988:	
  3300                           
  3301                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3302  025B  082C               	movf	sprintf@ap^(0+128),w
  3303  025C  0086               	movwf	6
  3304  025D  0187               	clrf	7
  3305  025E  3F40               	moviw [0]fsr1
  3306  025F  00BB               	movwf	sprintf@fval^(0+128)
  3307  0260  3F41               	moviw [1]fsr1
  3308  0261  00BC               	movwf	(sprintf@fval+1)^(0+128)
  3309  0262  3F42               	moviw [2]fsr1
  3310  0263  00BD               	movwf	(sprintf@fval+2)^(0+128)
  3311  0264  3003               	movlw	3
  3312  0265  00A0               	movwf	??_sprintf^(0+128)
  3313  0266  0820               	movf	??_sprintf^(0+128),w
  3314  0267  07AC               	addwf	sprintf@ap^(0+128),f
  3315                           
  3316                           ;doprnt.c: 831: if(fval < 0.0) {
  3317  0268  083B               	movf	sprintf@fval^(0+128),w
  3318  0269  00F0               	movwf	___ftge@ff1
  3319  026A  083C               	movf	(sprintf@fval+1)^(0+128),w
  3320  026B  00F1               	movwf	___ftge@ff1+1
  3321  026C  083D               	movf	(sprintf@fval+2)^(0+128),w
  3322  026D  00F2               	movwf	___ftge@ff1+2
  3323  026E  3000               	movlw	0
  3324  026F  00F3               	movwf	___ftge@ff2
  3325  0270  3000               	movlw	0
  3326  0271  00F4               	movwf	___ftge@ff2+1
  3327  0272  3000               	movlw	0
  3328  0273  00F5               	movwf	___ftge@ff2+2
  3329  0274  3193  236C  3180   	fcall	___ftge
  3330  0277  1803               	btfsc	3,0
  3331  0278  2A8E               	goto	l2998
  3332                           
  3333                           ;doprnt.c: 832: fval = -fval;
  3334  0279  0141               	movlb	1	; select bank1
  3335  027A  083B               	movf	sprintf@fval^(0+128),w
  3336  027B  00F0               	movwf	___ftneg@f1
  3337  027C  083C               	movf	(sprintf@fval+1)^(0+128),w
  3338  027D  00F1               	movwf	___ftneg@f1+1
  3339  027E  083D               	movf	(sprintf@fval+2)^(0+128),w
  3340  027F  00F2               	movwf	___ftneg@f1+2
  3341  0280  3191  21CE  3180   	fcall	___ftneg
  3342  0283  0870               	movf	?___ftneg,w
  3343  0284  0141               	movlb	1	; select bank1
  3344  0285  00BB               	movwf	sprintf@fval^(0+128)
  3345  0286  0871               	movf	?___ftneg+1,w
  3346  0287  00BC               	movwf	(sprintf@fval+1)^(0+128)
  3347  0288  0872               	movf	?___ftneg+2,w
  3348  0289  00BD               	movwf	(sprintf@fval+2)^(0+128)
  3349                           
  3350                           ;doprnt.c: 833: flag |= 0x03;
  3351  028A  3003               	movlw	3
  3352  028B  04B9               	iorwf	sprintf@flag^(0+128),f
  3353  028C  3000               	movlw	0
  3354  028D  04BA               	iorwf	(sprintf@flag+1)^(0+128),f
  3355  028E                     l2998:	
  3356                           
  3357                           ;doprnt.c: 834: }
  3358                           ;doprnt.c: 835: exp = 0;
  3359  028E  0141               	movlb	1	; select bank1
  3360  028F  01B7               	clrf	sprintf@exp^(0+128)
  3361  0290  01B8               	clrf	(sprintf@exp+1)^(0+128)
  3362                           
  3363                           ;doprnt.c: 836: if( fval!=0) {
  3364  0291  083D               	movf	(sprintf@fval+2)^(0+128),w
  3365  0292  043C               	iorwf	(sprintf@fval+1)^(0+128),w
  3366  0293  043B               	iorwf	sprintf@fval^(0+128),w
  3367  0294  1903               	skipnz
  3368  0295  2B4A               	goto	l250
  3369                           
  3370                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3371  0296  30BB               	movlw	low (sprintf@fval| 0)
  3372  0297  0086               	movwf	6
  3373  0298  0187               	clrf	7
  3374  0299  3F40               	moviw [0]fsr1
  3375  029A  00A0               	movwf	??_sprintf^(0+128)
  3376  029B  3F41               	moviw [1]fsr1
  3377  029C  00A1               	movwf	(??_sprintf^(0+128)+1)
  3378  029D  3F42               	moviw [2]fsr1
  3379  029E  00A2               	movwf	(??_sprintf^(0+128)+2)
  3380  029F  3F43               	moviw [3]fsr1
  3381  02A0  00A3               	movwf	(??_sprintf^(0+128)+3)
  3382  02A1  300F               	movlw	15
  3383  02A2                     u4115:	
  3384  02A2  36A3               	lsrf	(??_sprintf^(0+128)+3),f
  3385  02A3  0CA2               	rrf	(??_sprintf^(0+128)+2),f
  3386  02A4  0CA1               	rrf	(??_sprintf^(0+128)+1),f
  3387  02A5  0CA0               	rrf	??_sprintf^(0+128),f
  3388  02A6  0B89               	decfsz	9,f
  3389  02A7  2AA2               	goto	u4115
  3390  02A8  30FF               	movlw	255
  3391  02A9  0520               	andwf	??_sprintf^(0+128),w
  3392  02AA  00A4               	movwf	(??_sprintf+4)^(0+128)
  3393  02AB  3000               	movlw	0
  3394  02AC  0521               	andwf	(??_sprintf+1)^(0+128),w
  3395  02AD  00A5               	movwf	(??_sprintf+5)^(0+128)
  3396  02AE  0824               	movf	(??_sprintf+4)^(0+128),w
  3397  02AF  3E82               	addlw	130
  3398  02B0  00B7               	movwf	sprintf@exp^(0+128)
  3399  02B1  30FF               	movlw	255
  3400  02B2  3D25               	addwfc	(??_sprintf+5)^(0+128),w
  3401  02B3  00B8               	movwf	(sprintf@exp+1)^(0+128)
  3402                           
  3403                           ;doprnt.c: 838: exp--;
  3404  02B4  30FF               	movlw	255
  3405  02B5  07B7               	addwf	sprintf@exp^(0+128),f
  3406  02B6  30FF               	movlw	255
  3407  02B7  3DB8               	addwfc	(sprintf@exp+1)^(0+128),f
  3408                           
  3409                           ;doprnt.c: 839: exp *= 3;
  3410  02B8  3003               	movlw	3
  3411  02B9  0140               	movlb	0	; select bank0
  3412  02BA  00A4               	movwf	___wmul@multiplier
  3413  02BB  3000               	movlw	0
  3414  02BC  00A5               	movwf	___wmul@multiplier+1
  3415  02BD  0141               	movlb	1	; select bank1
  3416  02BE  0838               	movf	(sprintf@exp+1)^(0+128),w
  3417  02BF  0140               	movlb	0	; select bank0
  3418  02C0  00A7               	movwf	___wmul@multiplicand+1
  3419  02C1  0141               	movlb	1	; select bank1
  3420  02C2  0837               	movf	sprintf@exp^(0+128),w
  3421  02C3  0140               	movlb	0	; select bank0
  3422  02C4  00A6               	movwf	___wmul@multiplicand
  3423  02C5  3192  229A  3180   	fcall	___wmul
  3424  02C8  0140               	movlb	0	; select bank0
  3425  02C9  0825               	movf	?___wmul+1,w
  3426  02CA  0141               	movlb	1	; select bank1
  3427  02CB  00B8               	movwf	(sprintf@exp+1)^(0+128)
  3428  02CC  0140               	movlb	0	; select bank0
  3429  02CD  0824               	movf	?___wmul,w
  3430  02CE  0141               	movlb	1	; select bank1
  3431  02CF  00B7               	movwf	sprintf@exp^(0+128)
  3432                           
  3433                           ;doprnt.c: 840: exp /= 10;
  3434  02D0  300A               	movlw	10
  3435  02D1  00F7               	movwf	___awdiv@divisor
  3436  02D2  3000               	movlw	0
  3437  02D3  00F8               	movwf	___awdiv@divisor+1
  3438  02D4  0838               	movf	(sprintf@exp+1)^(0+128),w
  3439  02D5  00FA               	movwf	___awdiv@dividend+1
  3440  02D6  0837               	movf	sprintf@exp^(0+128),w
  3441  02D7  00F9               	movwf	___awdiv@dividend
  3442  02D8  3188  2004  3180   	fcall	___awdiv
  3443  02DB  0878               	movf	?___awdiv+1,w
  3444  02DC  0141               	movlb	1	; select bank1
  3445  02DD  00B8               	movwf	(sprintf@exp+1)^(0+128)
  3446  02DE  0877               	movf	?___awdiv,w
  3447  02DF  00B7               	movwf	sprintf@exp^(0+128)
  3448                           
  3449                           ;doprnt.c: 841: if(exp < 0)
  3450  02E0  1FB8               	btfss	(sprintf@exp+1)^(0+128),7
  3451  02E1  2AE6               	goto	l3014
  3452                           
  3453                           ;doprnt.c: 842: exp--;
  3454  02E2  30FF               	movlw	255
  3455  02E3  07B7               	addwf	sprintf@exp^(0+128),f
  3456  02E4  30FF               	movlw	255
  3457  02E5  3DB8               	addwfc	(sprintf@exp+1)^(0+128),f
  3458  02E6                     l3014:	
  3459                           
  3460                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3461  02E6  0337               	decf	sprintf@exp^(0+128),w
  3462  02E7  3AFF               	xorlw	255
  3463  02E8  318D  25BC  3180   	fcall	_scale
  3464  02EB  0140               	movlb	0	; select bank0
  3465  02EC  0838               	movf	?_scale,w
  3466  02ED  0141               	movlb	1	; select bank1
  3467  02EE  00B3               	movwf	sprintf@tmpval^(0+128)
  3468  02EF  0140               	movlb	0	; select bank0
  3469  02F0  0839               	movf	?_scale+1,w
  3470  02F1  0141               	movlb	1	; select bank1
  3471  02F2  00B4               	movwf	(sprintf@tmpval+1)^(0+128)
  3472  02F3  0140               	movlb	0	; select bank0
  3473  02F4  083A               	movf	?_scale+2,w
  3474  02F5  0141               	movlb	1	; select bank1
  3475  02F6  00B5               	movwf	(sprintf@tmpval+2)^(0+128)
  3476                           
  3477                           ;doprnt.c: 847: tmpval.integ *= fval;
  3478  02F7  083B               	movf	sprintf@fval^(0+128),w
  3479  02F8  0140               	movlb	0	; select bank0
  3480  02F9  00A8               	movwf	___ftmul@f1
  3481  02FA  0141               	movlb	1	; select bank1
  3482  02FB  083C               	movf	(sprintf@fval+1)^(0+128),w
  3483  02FC  0140               	movlb	0	; select bank0
  3484  02FD  00A9               	movwf	___ftmul@f1+1
  3485  02FE  0141               	movlb	1	; select bank1
  3486  02FF  083D               	movf	(sprintf@fval+2)^(0+128),w
  3487  0300  0140               	movlb	0	; select bank0
  3488  0301  00AA               	movwf	___ftmul@f1+2
  3489  0302  0141               	movlb	1	; select bank1
  3490  0303  0833               	movf	sprintf@tmpval^(0+128),w
  3491  0304  0140               	movlb	0	; select bank0
  3492  0305  00AB               	movwf	___ftmul@f2
  3493  0306  0141               	movlb	1	; select bank1
  3494  0307  0834               	movf	(sprintf@tmpval+1)^(0+128),w
  3495  0308  0140               	movlb	0	; select bank0
  3496  0309  00AC               	movwf	___ftmul@f2+1
  3497  030A  0141               	movlb	1	; select bank1
  3498  030B  0835               	movf	(sprintf@tmpval+2)^(0+128),w
  3499  030C  0140               	movlb	0	; select bank0
  3500  030D  00AD               	movwf	___ftmul@f2+2
  3501  030E  3196  2696  3180   	fcall	___ftmul
  3502  0311  0140               	movlb	0	; select bank0
  3503  0312  0828               	movf	?___ftmul,w
  3504  0313  0141               	movlb	1	; select bank1
  3505  0314  00B3               	movwf	sprintf@tmpval^(0+128)
  3506  0315  0140               	movlb	0	; select bank0
  3507  0316  0829               	movf	?___ftmul+1,w
  3508  0317  0141               	movlb	1	; select bank1
  3509  0318  00B4               	movwf	(sprintf@tmpval+1)^(0+128)
  3510  0319  0140               	movlb	0	; select bank0
  3511  031A  082A               	movf	?___ftmul+2,w
  3512  031B  0141               	movlb	1	; select bank1
  3513  031C  00B5               	movwf	(sprintf@tmpval+2)^(0+128)
  3514                           
  3515                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3516  031D  0833               	movf	sprintf@tmpval^(0+128),w
  3517  031E  00F0               	movwf	___ftge@ff1
  3518  031F  0834               	movf	(sprintf@tmpval+1)^(0+128),w
  3519  0320  00F1               	movwf	___ftge@ff1+1
  3520  0321  0835               	movf	(sprintf@tmpval+2)^(0+128),w
  3521  0322  00F2               	movwf	___ftge@ff1+2
  3522  0323  3000               	movlw	0
  3523  0324  00F3               	movwf	___ftge@ff2
  3524  0325  3080               	movlw	128
  3525  0326  00F4               	movwf	___ftge@ff2+1
  3526  0327  303F               	movlw	63
  3527  0328  00F5               	movwf	___ftge@ff2+2
  3528  0329  3193  236C  3180   	fcall	___ftge
  3529  032C  1803               	btfsc	3,0
  3530  032D  2B33               	goto	l3022
  3531                           
  3532                           ;doprnt.c: 849: exp--;
  3533  032E  30FF               	movlw	255
  3534  032F  0141               	movlb	1	; select bank1
  3535  0330  07B7               	addwf	sprintf@exp^(0+128),f
  3536  0331  30FF               	movlw	255
  3537  0332  2B49               	goto	L3
  3538  0333                     l3022:	
  3539                           
  3540                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3541  0333  0141               	movlb	1	; select bank1
  3542  0334  0833               	movf	sprintf@tmpval^(0+128),w
  3543  0335  00F0               	movwf	___ftge@ff1
  3544  0336  0834               	movf	(sprintf@tmpval+1)^(0+128),w
  3545  0337  00F1               	movwf	___ftge@ff1+1
  3546  0338  0835               	movf	(sprintf@tmpval+2)^(0+128),w
  3547  0339  00F2               	movwf	___ftge@ff1+2
  3548  033A  3000               	movlw	0
  3549  033B  00F3               	movwf	___ftge@ff2
  3550  033C  3020               	movlw	32
  3551  033D  00F4               	movwf	___ftge@ff2+1
  3552  033E  3041               	movlw	65
  3553  033F  00F5               	movwf	___ftge@ff2+2
  3554  0340  3193  236C  3180   	fcall	___ftge
  3555  0343  1C03               	btfss	3,0
  3556  0344  2B4A               	goto	l250
  3557                           
  3558                           ;doprnt.c: 851: exp++;
  3559  0345  3001               	movlw	1
  3560  0346  0141               	movlb	1	; select bank1
  3561  0347  07B7               	addwf	sprintf@exp^(0+128),f
  3562  0348  3000               	movlw	0
  3563  0349                     L3:	
  3564  0349  3DB8               	addwfc	(sprintf@exp+1)^(0+128),f
  3565  034A                     l250:	
  3566                           
  3567                           ;doprnt.c: 852: }
  3568                           ;doprnt.c: 1112: if(prec <= 12)
  3569  034A  0141               	movlb	1	; select bank1
  3570  034B  0841               	movf	(sprintf@prec+1)^(0+128),w
  3571  034C  3A80               	xorlw	128
  3572  034D  00A0               	movwf	??_sprintf^(0+128)
  3573  034E  3080               	movlw	128
  3574  034F  0220               	subwf	??_sprintf^(0+128),w
  3575  0350  1D03               	skipz
  3576  0351  2B54               	goto	u4155
  3577  0352  300D               	movlw	13
  3578  0353  0240               	subwf	sprintf@prec^(0+128),w
  3579  0354                     u4155:	
  3580  0354  1803               	skipnc
  3581  0355  2B7D               	goto	l3028
  3582                           
  3583                           ;doprnt.c: 1113: fval += fround(prec);
  3584  0356  0141               	movlb	1	; select bank1
  3585  0357  0840               	movf	sprintf@prec^(0+128),w
  3586  0358  318A  2269  3180   	fcall	_fround
  3587  035B  0140               	movlb	0	; select bank0
  3588  035C  0838               	movf	?_fround,w
  3589  035D  00C8               	movwf	___ftadd@f1
  3590  035E  0839               	movf	?_fround+1,w
  3591  035F  00C9               	movwf	___ftadd@f1+1
  3592  0360  083A               	movf	?_fround+2,w
  3593  0361  00CA               	movwf	___ftadd@f1+2
  3594  0362  0141               	movlb	1	; select bank1
  3595  0363  083B               	movf	sprintf@fval^(0+128),w
  3596  0364  0140               	movlb	0	; select bank0
  3597  0365  00CB               	movwf	___ftadd@f2
  3598  0366  0141               	movlb	1	; select bank1
  3599  0367  083C               	movf	(sprintf@fval+1)^(0+128),w
  3600  0368  0140               	movlb	0	; select bank0
  3601  0369  00CC               	movwf	___ftadd@f2+1
  3602  036A  0141               	movlb	1	; select bank1
  3603  036B  083D               	movf	(sprintf@fval+2)^(0+128),w
  3604  036C  0140               	movlb	0	; select bank0
  3605  036D  00CD               	movwf	___ftadd@f2+2
  3606  036E  3188  2056  3180   	fcall	___ftadd
  3607  0371  0140               	movlb	0	; select bank0
  3608  0372  0848               	movf	?___ftadd,w
  3609  0373  0141               	movlb	1	; select bank1
  3610  0374  00BB               	movwf	sprintf@fval^(0+128)
  3611  0375  0140               	movlb	0	; select bank0
  3612  0376  0849               	movf	?___ftadd+1,w
  3613  0377  0141               	movlb	1	; select bank1
  3614  0378  00BC               	movwf	(sprintf@fval+1)^(0+128)
  3615  0379  0140               	movlb	0	; select bank0
  3616  037A  084A               	movf	?___ftadd+2,w
  3617  037B  0141               	movlb	1	; select bank1
  3618  037C  00BD               	movwf	(sprintf@fval+2)^(0+128)
  3619  037D                     l3028:	
  3620                           
  3621                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3622  037D  0141               	movlb	1	; select bank1
  3623  037E  0838               	movf	(sprintf@exp+1)^(0+128),w
  3624  037F  3A80               	xorlw	128
  3625  0380  00A0               	movwf	??_sprintf^(0+128)
  3626  0381  3080               	movlw	128
  3627  0382  0220               	subwf	??_sprintf^(0+128),w
  3628  0383  1D03               	skipz
  3629  0384  2B87               	goto	u4165
  3630  0385  300A               	movlw	10
  3631  0386  0237               	subwf	sprintf@exp^(0+128),w
  3632  0387                     u4165:	
  3633  0387  1803               	skipnc
  3634  0388  2BB0               	goto	l3036
  3635  0389  0141               	movlb	1	; select bank1
  3636  038A  083D               	movf	(sprintf@fval+2)^(0+128),w
  3637  038B  043C               	iorwf	(sprintf@fval+1)^(0+128),w
  3638  038C  043B               	iorwf	sprintf@fval^(0+128),w
  3639  038D  1903               	skipnz
  3640  038E  2BF8               	goto	l3050
  3641  038F  083B               	movf	sprintf@fval^(0+128),w
  3642  0390  0140               	movlb	0	; select bank0
  3643  0391  00C1               	movwf	___fttol@f1
  3644  0392  0141               	movlb	1	; select bank1
  3645  0393  083C               	movf	(sprintf@fval+1)^(0+128),w
  3646  0394  0140               	movlb	0	; select bank0
  3647  0395  00C2               	movwf	___fttol@f1+1
  3648  0396  0141               	movlb	1	; select bank1
  3649  0397  083D               	movf	(sprintf@fval+2)^(0+128),w
  3650  0398  0140               	movlb	0	; select bank0
  3651  0399  00C3               	movwf	___fttol@f1+2
  3652  039A  3195  2566  3180   	fcall	___fttol
  3653  039D  0140               	movlb	0	; select bank0
  3654  039E  0844               	movf	?___fttol+3,w
  3655  039F  0443               	iorwf	?___fttol+2,w
  3656  03A0  0442               	iorwf	?___fttol+1,w
  3657  03A1  0441               	iorwf	?___fttol,w
  3658  03A2  1D03               	skipz
  3659  03A3  2BF8               	goto	l3050
  3660  03A4  0141               	movlb	1	; select bank1
  3661  03A5  0838               	movf	(sprintf@exp+1)^(0+128),w
  3662  03A6  3A80               	xorlw	128
  3663  03A7  00A0               	movwf	??_sprintf^(0+128)
  3664  03A8  3080               	movlw	128
  3665  03A9  0220               	subwf	??_sprintf^(0+128),w
  3666  03AA  1D03               	skipz
  3667  03AB  2BAE               	goto	u4195
  3668  03AC  3002               	movlw	2
  3669  03AD  0237               	subwf	sprintf@exp^(0+128),w
  3670  03AE                     u4195:	
  3671  03AE  1C03               	skipc
  3672  03AF  2BF8               	goto	l3050
  3673  03B0                     l3036:	
  3674                           
  3675                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3676  03B0  0141               	movlb	1	; select bank1
  3677  03B1  0833               	movf	sprintf@tmpval^(0+128),w
  3678  03B2  00F0               	movwf	___ftge@ff1
  3679  03B3  0834               	movf	(sprintf@tmpval+1)^(0+128),w
  3680  03B4  00F1               	movwf	___ftge@ff1+1
  3681  03B5  0835               	movf	(sprintf@tmpval+2)^(0+128),w
  3682  03B6  00F2               	movwf	___ftge@ff1+2
  3683  03B7  3070               	movlw	112
  3684  03B8  00F3               	movwf	___ftge@ff2
  3685  03B9  3089               	movlw	137
  3686  03BA  00F4               	movwf	___ftge@ff2+1
  3687  03BB  3040               	movlw	64
  3688  03BC  00F5               	movwf	___ftge@ff2+2
  3689  03BD  3193  236C  3180   	fcall	___ftge
  3690  03C0  1803               	btfsc	3,0
  3691  03C1  2BC4               	goto	l3040
  3692                           
  3693                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3694  03C2  30F7               	movlw	247
  3695  03C3  2BC5               	goto	L4
  3696  03C4                     l3040:	
  3697                           ;doprnt.c: 1122: }else{
  3698                           
  3699                           
  3700                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3701  03C4  30F8               	movlw	248
  3702  03C5                     L4:	
  3703  03C5  0141               	movlb	1	; select bank1
  3704  03C6  07B7               	addwf	sprintf@exp^(0+128),f
  3705  03C7  30FF               	movlw	255
  3706  03C8  3DB8               	addwfc	(sprintf@exp+1)^(0+128),f
  3707                           
  3708                           ;doprnt.c: 1124: }
  3709                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3710  03C9  0837               	movf	sprintf@exp^(0+128),w
  3711  03CA  318D  25BC  3180   	fcall	_scale
  3712  03CD  0140               	movlb	0	; select bank0
  3713  03CE  0838               	movf	?_scale,w
  3714  03CF  0141               	movlb	1	; select bank1
  3715  03D0  00B3               	movwf	sprintf@tmpval^(0+128)
  3716  03D1  0140               	movlb	0	; select bank0
  3717  03D2  0839               	movf	?_scale+1,w
  3718  03D3  0141               	movlb	1	; select bank1
  3719  03D4  00B4               	movwf	(sprintf@tmpval+1)^(0+128)
  3720  03D5  0140               	movlb	0	; select bank0
  3721  03D6  083A               	movf	?_scale+2,w
  3722  03D7  0141               	movlb	1	; select bank1
  3723  03D8  00B5               	movwf	(sprintf@tmpval+2)^(0+128)
  3724                           
  3725                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3726  03D9  083B               	movf	sprintf@fval^(0+128),w
  3727  03DA  00F0               	movwf	__tdiv_to_l_@f1
  3728  03DB  083C               	movf	(sprintf@fval+1)^(0+128),w
  3729  03DC  00F1               	movwf	__tdiv_to_l_@f1+1
  3730  03DD  083D               	movf	(sprintf@fval+2)^(0+128),w
  3731  03DE  00F2               	movwf	__tdiv_to_l_@f1+2
  3732  03DF  0833               	movf	sprintf@tmpval^(0+128),w
  3733  03E0  00F3               	movwf	__tdiv_to_l_@f2
  3734  03E1  0834               	movf	(sprintf@tmpval+1)^(0+128),w
  3735  03E2  00F4               	movwf	__tdiv_to_l_@f2+1
  3736  03E3  0835               	movf	(sprintf@tmpval+2)^(0+128),w
  3737  03E4  00F5               	movwf	__tdiv_to_l_@f2+2
  3738  03E5  3197  274A  3180   	fcall	__tdiv_to_l_
  3739  03E8  0873               	movf	?__tdiv_to_l_+3,w
  3740  03E9  0141               	movlb	1	; select bank1
  3741  03EA  00B2               	movwf	(sprintf@val+3)^(0+128)
  3742  03EB  0872               	movf	?__tdiv_to_l_+2,w
  3743  03EC  00B1               	movwf	(sprintf@val+2)^(0+128)
  3744  03ED  0871               	movf	?__tdiv_to_l_+1,w
  3745  03EE  00B0               	movwf	(sprintf@val+1)^(0+128)
  3746  03EF  0870               	movf	?__tdiv_to_l_,w
  3747  03F0  00AF               	movwf	sprintf@val^(0+128)
  3748                           
  3749                           ;doprnt.c: 1129: fval = 0.0;
  3750  03F1  3000               	movlw	0
  3751  03F2  00BB               	movwf	sprintf@fval^(0+128)
  3752  03F3  3000               	movlw	0
  3753  03F4  00BC               	movwf	(sprintf@fval+1)^(0+128)
  3754  03F5  3000               	movlw	0
  3755  03F6  00BD               	movwf	(sprintf@fval+2)^(0+128)
  3756                           
  3757                           ;doprnt.c: 1130: } else {
  3758  03F7  2C46               	goto	l3054
  3759  03F8                     l3050:	
  3760                           
  3761                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3762  03F8  0141               	movlb	1	; select bank1
  3763  03F9  083B               	movf	sprintf@fval^(0+128),w
  3764  03FA  0140               	movlb	0	; select bank0
  3765  03FB  00C1               	movwf	___fttol@f1
  3766  03FC  0141               	movlb	1	; select bank1
  3767  03FD  083C               	movf	(sprintf@fval+1)^(0+128),w
  3768  03FE  0140               	movlb	0	; select bank0
  3769  03FF  00C2               	movwf	___fttol@f1+1
  3770  0400  0141               	movlb	1	; select bank1
  3771  0401  083D               	movf	(sprintf@fval+2)^(0+128),w
  3772  0402  0140               	movlb	0	; select bank0
  3773  0403  00C3               	movwf	___fttol@f1+2
  3774  0404  3195  2566  3180   	fcall	___fttol
  3775  0407  0140               	movlb	0	; select bank0
  3776  0408  0844               	movf	?___fttol+3,w
  3777  0409  0141               	movlb	1	; select bank1
  3778  040A  00B2               	movwf	(sprintf@val+3)^(0+128)
  3779  040B  0140               	movlb	0	; select bank0
  3780  040C  0843               	movf	?___fttol+2,w
  3781  040D  0141               	movlb	1	; select bank1
  3782  040E  00B1               	movwf	(sprintf@val+2)^(0+128)
  3783  040F  0140               	movlb	0	; select bank0
  3784  0410  0842               	movf	?___fttol+1,w
  3785  0411  0141               	movlb	1	; select bank1
  3786  0412  00B0               	movwf	(sprintf@val+1)^(0+128)
  3787  0413  0140               	movlb	0	; select bank0
  3788  0414  0841               	movf	?___fttol,w
  3789  0415  0141               	movlb	1	; select bank1
  3790  0416  00AF               	movwf	sprintf@val^(0+128)
  3791                           
  3792                           ;doprnt.c: 1132: fval -= (double)val;
  3793  0417  0832               	movf	(sprintf@val+3)^(0+128),w
  3794  0418  00FB               	movwf	___lltoft@c+3
  3795  0419  0831               	movf	(sprintf@val+2)^(0+128),w
  3796  041A  00FA               	movwf	___lltoft@c+2
  3797  041B  0830               	movf	(sprintf@val+1)^(0+128),w
  3798  041C  00F9               	movwf	___lltoft@c+1
  3799  041D  082F               	movf	sprintf@val^(0+128),w
  3800  041E  00F8               	movwf	___lltoft@c
  3801  041F  3193  2318  3180   	fcall	___lltoft
  3802  0422  0878               	movf	?___lltoft,w
  3803  0423  0140               	movlb	0	; select bank0
  3804  0424  00D5               	movwf	___ftsub@f2
  3805  0425  0879               	movf	?___lltoft+1,w
  3806  0426  00D6               	movwf	___ftsub@f2+1
  3807  0427  087A               	movf	?___lltoft+2,w
  3808  0428  00D7               	movwf	___ftsub@f2+2
  3809  0429  0141               	movlb	1	; select bank1
  3810  042A  083B               	movf	sprintf@fval^(0+128),w
  3811  042B  0140               	movlb	0	; select bank0
  3812  042C  00D8               	movwf	___ftsub@f1
  3813  042D  0141               	movlb	1	; select bank1
  3814  042E  083C               	movf	(sprintf@fval+1)^(0+128),w
  3815  042F  0140               	movlb	0	; select bank0
  3816  0430  00D9               	movwf	___ftsub@f1+1
  3817  0431  0141               	movlb	1	; select bank1
  3818  0432  083D               	movf	(sprintf@fval+2)^(0+128),w
  3819  0433  0140               	movlb	0	; select bank0
  3820  0434  00DA               	movwf	___ftsub@f1+2
  3821  0435  3192  22B6  3180   	fcall	___ftsub
  3822  0438  0140               	movlb	0	; select bank0
  3823  0439  0855               	movf	?___ftsub,w
  3824  043A  0141               	movlb	1	; select bank1
  3825  043B  00BB               	movwf	sprintf@fval^(0+128)
  3826  043C  0140               	movlb	0	; select bank0
  3827  043D  0856               	movf	?___ftsub+1,w
  3828  043E  0141               	movlb	1	; select bank1
  3829  043F  00BC               	movwf	(sprintf@fval+1)^(0+128)
  3830  0440  0140               	movlb	0	; select bank0
  3831  0441  0857               	movf	?___ftsub+2,w
  3832  0442  0141               	movlb	1	; select bank1
  3833  0443  00BD               	movwf	(sprintf@fval+2)^(0+128)
  3834                           
  3835                           ;doprnt.c: 1133: exp = 0;
  3836  0444  01B7               	clrf	sprintf@exp^(0+128)
  3837  0445  01B8               	clrf	(sprintf@exp+1)^(0+128)
  3838  0446                     l3054:	
  3839                           
  3840                           ;doprnt.c: 1134: }
  3841                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3842  0446  01C2               	clrf	sprintf@c^(0+128)
  3843  0447  0AC2               	incf	sprintf@c^(0+128),f
  3844  0448  300A               	movlw	10
  3845  0449  0642               	xorwf	sprintf@c^(0+128),w
  3846  044A  1903               	btfsc	3,2
  3847  044B  2C79               	goto	l3066
  3848  044C                     l3060:	
  3849                           
  3850                           ;doprnt.c: 1137: if(val < dpowers[c])
  3851  044C  0842               	movf	sprintf@c^(0+128),w
  3852  044D  00A0               	movwf	??_sprintf^(0+128)
  3853  044E  01A1               	clrf	(??_sprintf^(0+128)+1)
  3854  044F  35A0               	lslf	??_sprintf^(0+128),f
  3855  0450  0DA1               	rlf	(??_sprintf^(0+128)+1),f
  3856  0451  35A0               	lslf	??_sprintf^(0+128),f
  3857  0452  0DA1               	rlf	(??_sprintf^(0+128)+1),f
  3858  0453  3041               	movlw	low (_dpowers| (0+32768))
  3859  0454  0720               	addwf	??_sprintf^(0+128),w
  3860  0455  0084               	movwf	4
  3861  0456  3098               	movlw	high (_dpowers| (0+32768))
  3862  0457  3D21               	addwfc	(??_sprintf+1)^(0+128),w
  3863  0458  0085               	movwf	5
  3864  0459  3F00               	moviw [0]fsr0
  3865  045A  00A2               	movwf	(??_sprintf+2)^(0+128)
  3866  045B  3F01               	moviw [1]fsr0
  3867  045C  00A3               	movwf	((??_sprintf+2)^(0+128)+1)
  3868  045D  3F02               	moviw [2]fsr0
  3869  045E  00A4               	movwf	((??_sprintf+2)^(0+128)+2)
  3870  045F  3F03               	moviw [3]fsr0
  3871  0460  00A5               	movwf	((??_sprintf+2)^(0+128)+3)
  3872  0461  0825               	movf	(??_sprintf+5)^(0+128),w
  3873  0462  0232               	subwf	(sprintf@val+3)^(0+128),w
  3874  0463  1D03               	skipz
  3875  0464  2C6F               	goto	u4225
  3876  0465  0824               	movf	(??_sprintf+4)^(0+128),w
  3877  0466  0231               	subwf	(sprintf@val+2)^(0+128),w
  3878  0467  1D03               	skipz
  3879  0468  2C6F               	goto	u4225
  3880  0469  0823               	movf	(??_sprintf+3)^(0+128),w
  3881  046A  0230               	subwf	(sprintf@val+1)^(0+128),w
  3882  046B  1D03               	skipz
  3883  046C  2C6F               	goto	u4225
  3884  046D  0822               	movf	(??_sprintf+2)^(0+128),w
  3885  046E  022F               	subwf	sprintf@val^(0+128),w
  3886  046F                     u4225:	
  3887  046F  1C03               	btfss	3,0
  3888  0470  2C79               	goto	l3066
  3889                           
  3890                           ;doprnt.c: 1138: break;
  3891  0471  3001               	movlw	1
  3892  0472  00A0               	movwf	??_sprintf^(0+128)
  3893  0473  0820               	movf	??_sprintf^(0+128),w
  3894  0474  07C2               	addwf	sprintf@c^(0+128),f
  3895  0475  300A               	movlw	10
  3896  0476  0642               	xorwf	sprintf@c^(0+128),w
  3897  0477  1D03               	btfss	3,2
  3898  0478  2C4C               	goto	l3060
  3899  0479                     l3066:	
  3900                           
  3901                           ;doprnt.c: 1142: width -= prec + c + exp;
  3902  0479  0842               	movf	sprintf@c^(0+128),w
  3903  047A  00A0               	movwf	??_sprintf^(0+128)
  3904  047B  01A1               	clrf	(??_sprintf^(0+128)+1)
  3905  047C  1BA0               	btfsc	??_sprintf^(0+128),7
  3906  047D  03A1               	decf	(??_sprintf^(0+128)+1),f
  3907  047E  0840               	movf	sprintf@prec^(0+128),w
  3908  047F  0720               	addwf	??_sprintf^(0+128),w
  3909  0480  00A2               	movwf	(??_sprintf+2)^(0+128)
  3910  0481  0841               	movf	(sprintf@prec+1)^(0+128),w
  3911  0482  3D21               	addwfc	(??_sprintf+1)^(0+128),w
  3912  0483  00A3               	movwf	(??_sprintf+3)^(0+128)
  3913  0484  0837               	movf	sprintf@exp^(0+128),w
  3914  0485  0722               	addwf	(??_sprintf+2)^(0+128),w
  3915  0486  00A4               	movwf	(??_sprintf+4)^(0+128)
  3916  0487  0838               	movf	(sprintf@exp+1)^(0+128),w
  3917  0488  3D23               	addwfc	(??_sprintf+3)^(0+128),w
  3918  0489  00A5               	movwf	(??_sprintf+5)^(0+128)
  3919  048A  0824               	movf	(??_sprintf+4)^(0+128),w
  3920  048B  02BE               	subwf	sprintf@width^(0+128),f
  3921  048C  0825               	movf	(??_sprintf+5)^(0+128),w
  3922  048D  3BBF               	subwfb	(sprintf@width+1)^(0+128),f
  3923                           
  3924                           ;doprnt.c: 1143: if(
  3925                           ;doprnt.c: 1147: prec)
  3926  048E  0840               	movf	sprintf@prec^(0+128),w
  3927  048F  0441               	iorwf	(sprintf@prec+1)^(0+128),w
  3928  0490  1903               	btfsc	3,2
  3929  0491  2C96               	goto	l3070
  3930                           
  3931                           ;doprnt.c: 1148: width--;
  3932  0492  30FF               	movlw	255
  3933  0493  07BE               	addwf	sprintf@width^(0+128),f
  3934  0494  30FF               	movlw	255
  3935  0495  3DBF               	addwfc	(sprintf@width+1)^(0+128),f
  3936  0496                     l3070:	
  3937                           
  3938                           ;doprnt.c: 1149: if(flag & 0x03)
  3939  0496  3003               	movlw	3
  3940  0497  0539               	andwf	sprintf@flag^(0+128),w
  3941  0498  00A0               	movwf	??_sprintf^(0+128)
  3942  0499  3000               	movlw	0
  3943  049A  053A               	andwf	(sprintf@flag+1)^(0+128),w
  3944  049B  00A1               	movwf	(??_sprintf+1)^(0+128)
  3945  049C  0820               	movf	??_sprintf^(0+128),w
  3946  049D  0421               	iorwf	(??_sprintf^(0+128)+1),w
  3947  049E  1903               	btfsc	3,2
  3948  049F  2CA4               	goto	l3074
  3949                           
  3950                           ;doprnt.c: 1150: width--;
  3951  04A0  30FF               	movlw	255
  3952  04A1  07BE               	addwf	sprintf@width^(0+128),f
  3953  04A2  30FF               	movlw	255
  3954  04A3  3DBF               	addwfc	(sprintf@width+1)^(0+128),f
  3955  04A4                     l3074:	
  3956                           
  3957                           ;doprnt.c: 1153: if(flag & 0x04) {
  3958  04A4  1D39               	btfss	sprintf@flag^(0+128),2
  3959  04A5  2CE8               	goto	l3096
  3960                           
  3961                           ;doprnt.c: 1157: if(flag & 0x03)
  3962  04A6  3003               	movlw	3
  3963  04A7  0539               	andwf	sprintf@flag^(0+128),w
  3964  04A8  00A0               	movwf	??_sprintf^(0+128)
  3965  04A9  3000               	movlw	0
  3966  04AA  053A               	andwf	(sprintf@flag+1)^(0+128),w
  3967  04AB  00A1               	movwf	(??_sprintf+1)^(0+128)
  3968  04AC  0820               	movf	??_sprintf^(0+128),w
  3969  04AD  0421               	iorwf	(??_sprintf^(0+128)+1),w
  3970  04AE  1903               	btfsc	3,2
  3971  04AF  2CBB               	goto	l3088
  3972                           
  3973                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  3974  04B0  0140               	movlb	0	; select bank0
  3975  04B1  085B               	movf	sprintf@sp,w
  3976  04B2  0086               	movwf	6
  3977  04B3  085C               	movf	sprintf@sp+1,w
  3978  04B4  0087               	movwf	7
  3979  04B5  302D               	movlw	45
  3980  04B6  0081               	movwf	1
  3981  04B7  3001               	movlw	1
  3982  04B8  07DB               	addwf	sprintf@sp,f
  3983  04B9  3000               	movlw	0
  3984  04BA  3DDC               	addwfc	sprintf@sp+1,f
  3985  04BB                     l3088:	
  3986                           ;doprnt.c: 1168: while(width > 0) {
  3987                           
  3988  04BB  0141               	movlb	1	; select bank1
  3989  04BC  083F               	movf	(sprintf@width+1)^(0+128),w
  3990  04BD  3A80               	xorlw	128
  3991  04BE  00A0               	movwf	??_sprintf^(0+128)
  3992  04BF  3080               	movlw	128
  3993  04C0  0220               	subwf	??_sprintf^(0+128),w
  3994  04C1  1D03               	skipz
  3995  04C2  2CC5               	goto	u4285
  3996  04C3  3001               	movlw	1
  3997  04C4  023E               	subwf	sprintf@width^(0+128),w
  3998  04C5                     u4285:	
  3999  04C5  1C03               	btfss	3,0
  4000  04C6  2D0A               	goto	l3112
  4001                           
  4002                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  4003  04C7  0140               	movlb	0	; select bank0
  4004  04C8  085B               	movf	sprintf@sp,w
  4005  04C9  0086               	movwf	6
  4006  04CA  085C               	movf	sprintf@sp+1,w
  4007  04CB  0087               	movwf	7
  4008  04CC  3030               	movlw	48
  4009  04CD  0081               	movwf	1
  4010  04CE  3001               	movlw	1
  4011  04CF  07DB               	addwf	sprintf@sp,f
  4012  04D0  3000               	movlw	0
  4013  04D1  3DDC               	addwfc	sprintf@sp+1,f
  4014                           
  4015                           ;doprnt.c: 1170: width--;
  4016  04D2  30FF               	movlw	255
  4017  04D3  0141               	movlb	1	; select bank1
  4018  04D4  07BE               	addwf	sprintf@width^(0+128),f
  4019  04D5  30FF               	movlw	255
  4020  04D6  3DBF               	addwfc	(sprintf@width+1)^(0+128),f
  4021  04D7  2CBB               	goto	l3088
  4022  04D8                     l3090:	
  4023                           ;doprnt.c: 1175: {
  4024                           ;doprnt.c: 1180: while(width > 0) {
  4025                           
  4026                           ;doprnt.c: 1171: }
  4027                           ;doprnt.c: 1173: } else
  4028                           
  4029                           
  4030                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  4031  04D8  0140               	movlb	0	; select bank0
  4032  04D9  085B               	movf	sprintf@sp,w
  4033  04DA  0086               	movwf	6
  4034  04DB  085C               	movf	sprintf@sp+1,w
  4035  04DC  0087               	movwf	7
  4036  04DD  3020               	movlw	32
  4037  04DE  0081               	movwf	1
  4038  04DF  3001               	movlw	1
  4039  04E0  07DB               	addwf	sprintf@sp,f
  4040  04E1  3000               	movlw	0
  4041  04E2  3DDC               	addwfc	sprintf@sp+1,f
  4042                           
  4043                           ;doprnt.c: 1182: width--;
  4044  04E3  30FF               	movlw	255
  4045  04E4  0141               	movlb	1	; select bank1
  4046  04E5  07BE               	addwf	sprintf@width^(0+128),f
  4047  04E6  30FF               	movlw	255
  4048  04E7  3DBF               	addwfc	(sprintf@width+1)^(0+128),f
  4049  04E8                     l3096:	
  4050  04E8  0141               	movlb	1	; select bank1
  4051  04E9  083F               	movf	(sprintf@width+1)^(0+128),w
  4052  04EA  3A80               	xorlw	128
  4053  04EB  00A0               	movwf	??_sprintf^(0+128)
  4054  04EC  3080               	movlw	128
  4055  04ED  0220               	subwf	??_sprintf^(0+128),w
  4056  04EE  1D03               	skipz
  4057  04EF  2CF2               	goto	u4295
  4058  04F0  3001               	movlw	1
  4059  04F1  023E               	subwf	sprintf@width^(0+128),w
  4060  04F2                     u4295:	
  4061  04F2  1803               	skipnc
  4062  04F3  2CD8               	goto	l3090
  4063                           
  4064                           ;doprnt.c: 1183: }
  4065                           ;doprnt.c: 1188: if(flag & 0x03)
  4066  04F4  3003               	movlw	3
  4067  04F5  0141               	movlb	1	; select bank1
  4068  04F6  0539               	andwf	sprintf@flag^(0+128),w
  4069  04F7  00A0               	movwf	??_sprintf^(0+128)
  4070  04F8  3000               	movlw	0
  4071  04F9  053A               	andwf	(sprintf@flag+1)^(0+128),w
  4072  04FA  00A1               	movwf	(??_sprintf+1)^(0+128)
  4073  04FB  0820               	movf	??_sprintf^(0+128),w
  4074  04FC  0421               	iorwf	(??_sprintf^(0+128)+1),w
  4075  04FD  1903               	btfsc	3,2
  4076  04FE  2D0A               	goto	l3112
  4077                           
  4078                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  4079  04FF  0140               	movlb	0	; select bank0
  4080  0500  085B               	movf	sprintf@sp,w
  4081  0501  0086               	movwf	6
  4082  0502  085C               	movf	sprintf@sp+1,w
  4083  0503  0087               	movwf	7
  4084  0504  302D               	movlw	45
  4085  0505  0081               	movwf	1
  4086  0506  3001               	movlw	1
  4087  0507                     L5:	
  4088  0507  07DB               	addwf	sprintf@sp,f
  4089  0508  3000               	movlw	0
  4090  0509  3DDC               	addwfc	sprintf@sp+1,f
  4091  050A                     l3112:	
  4092  050A  30FF               	movlw	255
  4093  050B  0141               	movlb	1	; select bank1
  4094  050C  00A0               	movwf	??_sprintf^(0+128)
  4095  050D  0820               	movf	??_sprintf^(0+128),w
  4096  050E  07C2               	addwf	sprintf@c^(0+128),f
  4097  050F  0A42               	incf	sprintf@c^(0+128),w
  4098  0510  1903               	btfsc	3,2
  4099  0511  2D76               	goto	l3120
  4100                           
  4101                           ;doprnt.c: 1200: {
  4102                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4103                           
  4104                           ;doprnt.c: 1195: }
  4105                           ;doprnt.c: 1196: while(c--) {
  4106  0512  0141               	movlb	1	; select bank1
  4107  0513  0842               	movf	sprintf@c^(0+128),w
  4108  0514  00A0               	movwf	??_sprintf^(0+128)
  4109  0515  01A1               	clrf	(??_sprintf^(0+128)+1)
  4110  0516  35A0               	lslf	??_sprintf^(0+128),f
  4111  0517  0DA1               	rlf	(??_sprintf^(0+128)+1),f
  4112  0518  35A0               	lslf	??_sprintf^(0+128),f
  4113  0519  0DA1               	rlf	(??_sprintf^(0+128)+1),f
  4114  051A  3041               	movlw	low (_dpowers| (0+32768))
  4115  051B  0720               	addwf	??_sprintf^(0+128),w
  4116  051C  0084               	movwf	4
  4117  051D  3098               	movlw	high (_dpowers| (0+32768))
  4118  051E  3D21               	addwfc	(??_sprintf+1)^(0+128),w
  4119  051F  0085               	movwf	5
  4120  0520  3F00               	moviw [0]fsr0
  4121  0521  00F0               	movwf	___lldiv@divisor
  4122  0522  3F01               	moviw [1]fsr0
  4123  0523  00F1               	movwf	___lldiv@divisor+1
  4124  0524  3F02               	moviw [2]fsr0
  4125  0525  00F2               	movwf	___lldiv@divisor+2
  4126  0526  3F03               	moviw [3]fsr0
  4127  0527  00F3               	movwf	___lldiv@divisor+3
  4128  0528  0832               	movf	(sprintf@val+3)^(0+128),w
  4129  0529  00F7               	movwf	___lldiv@dividend+3
  4130  052A  0831               	movf	(sprintf@val+2)^(0+128),w
  4131  052B  00F6               	movwf	___lldiv@dividend+2
  4132  052C  0830               	movf	(sprintf@val+1)^(0+128),w
  4133  052D  00F5               	movwf	___lldiv@dividend+1
  4134  052E  082F               	movf	sprintf@val^(0+128),w
  4135  052F  00F4               	movwf	___lldiv@dividend
  4136  0530  3194  24B0  3180   	fcall	___lldiv
  4137  0533  0873               	movf	?___lldiv+3,w
  4138  0534  0141               	movlb	1	; select bank1
  4139  0535  00B6               	movwf	(sprintf@tmpval+3)^(0+128)
  4140  0536  0872               	movf	?___lldiv+2,w
  4141  0537  00B5               	movwf	(sprintf@tmpval+2)^(0+128)
  4142  0538  0871               	movf	?___lldiv+1,w
  4143  0539  00B4               	movwf	(sprintf@tmpval+1)^(0+128)
  4144  053A  0870               	movf	?___lldiv,w
  4145  053B  00B3               	movwf	sprintf@tmpval^(0+128)
  4146                           
  4147                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4148  053C  3000               	movlw	0
  4149  053D  00F3               	movwf	___llmod@divisor+3
  4150  053E  3000               	movlw	0
  4151  053F  00F2               	movwf	___llmod@divisor+2
  4152  0540  3000               	movlw	0
  4153  0541  00F1               	movwf	___llmod@divisor+1
  4154  0542  300A               	movlw	10
  4155  0543  00F0               	movwf	___llmod@divisor
  4156  0544  0836               	movf	(sprintf@tmpval+3)^(0+128),w
  4157  0545  00F7               	movwf	___llmod@dividend+3
  4158  0546  0835               	movf	(sprintf@tmpval+2)^(0+128),w
  4159  0547  00F6               	movwf	___llmod@dividend+2
  4160  0548  0834               	movf	(sprintf@tmpval+1)^(0+128),w
  4161  0549  00F5               	movwf	___llmod@dividend+1
  4162  054A  0833               	movf	sprintf@tmpval^(0+128),w
  4163  054B  00F4               	movwf	___llmod@dividend
  4164  054C  3194  2429  3180   	fcall	___llmod
  4165  054F  0873               	movf	?___llmod+3,w
  4166  0550  0141               	movlb	1	; select bank1
  4167  0551  00B6               	movwf	(sprintf@tmpval+3)^(0+128)
  4168  0552  0872               	movf	?___llmod+2,w
  4169  0553  00B5               	movwf	(sprintf@tmpval+2)^(0+128)
  4170  0554  0871               	movf	?___llmod+1,w
  4171  0555  00B4               	movwf	(sprintf@tmpval+1)^(0+128)
  4172  0556  0870               	movf	?___llmod,w
  4173  0557  00B3               	movwf	sprintf@tmpval^(0+128)
  4174                           
  4175                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4176  0558  0833               	movf	sprintf@tmpval^(0+128),w
  4177  0559  3E30               	addlw	48
  4178  055A  00A0               	movwf	??_sprintf^(0+128)
  4179  055B  0140               	movlb	0	; select bank0
  4180  055C  085B               	movf	sprintf@sp,w
  4181  055D  0086               	movwf	6
  4182  055E  085C               	movf	sprintf@sp+1,w
  4183  055F  0087               	movwf	7
  4184  0560  0141               	movlb	1	; select bank1
  4185  0561  0820               	movf	??_sprintf^(0+128),w
  4186  0562  0081               	movwf	1
  4187  0563  3001               	movlw	1
  4188  0564  0140               	movlb	0	; select bank0
  4189  0565  2D07               	goto	L5
  4190  0566                     l3114:	
  4191                           ;doprnt.c: 1204: }
  4192                           ;doprnt.c: 1206: }
  4193                           ;doprnt.c: 1207: while(exp > 0) {
  4194                           
  4195                           
  4196                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4197  0566  0140               	movlb	0	; select bank0
  4198  0567  085B               	movf	sprintf@sp,w
  4199  0568  0086               	movwf	6
  4200  0569  085C               	movf	sprintf@sp+1,w
  4201  056A  0087               	movwf	7
  4202  056B  3030               	movlw	48
  4203  056C  0081               	movwf	1
  4204  056D  3001               	movlw	1
  4205  056E  07DB               	addwf	sprintf@sp,f
  4206  056F  3000               	movlw	0
  4207  0570  3DDC               	addwfc	sprintf@sp+1,f
  4208                           
  4209                           ;doprnt.c: 1209: exp--;
  4210  0571  30FF               	movlw	255
  4211  0572  0141               	movlb	1	; select bank1
  4212  0573  07B7               	addwf	sprintf@exp^(0+128),f
  4213  0574  30FF               	movlw	255
  4214  0575  3DB8               	addwfc	(sprintf@exp+1)^(0+128),f
  4215  0576                     l3120:	
  4216  0576  0838               	movf	(sprintf@exp+1)^(0+128),w
  4217  0577  3A80               	xorlw	128
  4218  0578  00A0               	movwf	??_sprintf^(0+128)
  4219  0579  3080               	movlw	128
  4220  057A  0220               	subwf	??_sprintf^(0+128),w
  4221  057B  1D03               	skipz
  4222  057C  2D7F               	goto	u4325
  4223  057D  3001               	movlw	1
  4224  057E  0237               	subwf	sprintf@exp^(0+128),w
  4225  057F                     u4325:	
  4226  057F  1803               	skipnc
  4227  0580  2D66               	goto	l3114
  4228                           
  4229                           ;doprnt.c: 1210: }
  4230                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4231  0581  0141               	movlb	1	; select bank1
  4232  0582  0841               	movf	(sprintf@prec+1)^(0+128),w
  4233  0583  3A80               	xorlw	128
  4234  0584  00A0               	movwf	??_sprintf^(0+128)
  4235  0585  3080               	movlw	128
  4236  0586  0220               	subwf	??_sprintf^(0+128),w
  4237  0587  1D03               	skipz
  4238  0588  2D8B               	goto	u4335
  4239  0589  3009               	movlw	9
  4240  058A  0240               	subwf	sprintf@prec^(0+128),w
  4241  058B                     u4335:	
  4242  058B  1C03               	skipc
  4243  058C  2D90               	goto	l3126
  4244                           
  4245                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4246  058D  3008               	movlw	8
  4247  058E  0141               	movlb	1	; select bank1
  4248  058F  2D92               	goto	L6
  4249  0590                     l3126:	
  4250                           
  4251                           ;doprnt.c: 1213: else
  4252                           ;doprnt.c: 1214: c = prec;
  4253  0590  0141               	movlb	1	; select bank1
  4254  0591  0840               	movf	sprintf@prec^(0+128),w
  4255  0592                     L6:	
  4256  0592  00A0               	movwf	??_sprintf^(0+128)
  4257  0593  0820               	movf	??_sprintf^(0+128),w
  4258  0594  00C2               	movwf	sprintf@c^(0+128)
  4259                           
  4260                           ;doprnt.c: 1215: prec -= c;
  4261  0595  0842               	movf	sprintf@c^(0+128),w
  4262  0596  00A0               	movwf	??_sprintf^(0+128)
  4263  0597  01A1               	clrf	(??_sprintf^(0+128)+1)
  4264  0598  1BA0               	btfsc	??_sprintf^(0+128),7
  4265  0599  03A1               	decf	(??_sprintf^(0+128)+1),f
  4266  059A  0820               	movf	??_sprintf^(0+128),w
  4267  059B  02C0               	subwf	sprintf@prec^(0+128),f
  4268  059C  0821               	movf	(??_sprintf+1)^(0+128),w
  4269  059D  3BC1               	subwfb	(sprintf@prec+1)^(0+128),f
  4270                           
  4271                           ;doprnt.c: 1219: if(c)
  4272  059E  0842               	movf	sprintf@c^(0+128),w
  4273  059F  1903               	btfsc	3,2
  4274  05A0  2DAC               	goto	l3134
  4275                           
  4276                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4277  05A1  0140               	movlb	0	; select bank0
  4278  05A2  085B               	movf	sprintf@sp,w
  4279  05A3  0086               	movwf	6
  4280  05A4  085C               	movf	sprintf@sp+1,w
  4281  05A5  0087               	movwf	7
  4282  05A6  302E               	movlw	46
  4283  05A7  0081               	movwf	1
  4284  05A8  3001               	movlw	1
  4285  05A9  07DB               	addwf	sprintf@sp,f
  4286  05AA  3000               	movlw	0
  4287  05AB  3DDC               	addwfc	sprintf@sp+1,f
  4288  05AC                     l3134:	
  4289                           
  4290                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4291  05AC  0141               	movlb	1	; select bank1
  4292  05AD  0842               	movf	sprintf@c^(0+128),w
  4293  05AE  318D  25BC  3180   	fcall	_scale
  4294  05B1  0140               	movlb	0	; select bank0
  4295  05B2  0838               	movf	?_scale,w
  4296  05B3  0141               	movlb	1	; select bank1
  4297  05B4  00A6               	movwf	_sprintf$624^(0+128)
  4298  05B5  0140               	movlb	0	; select bank0
  4299  05B6  0839               	movf	?_scale+1,w
  4300  05B7  0141               	movlb	1	; select bank1
  4301  05B8  00A7               	movwf	(_sprintf$624+1)^(0+128)
  4302  05B9  0140               	movlb	0	; select bank0
  4303  05BA  083A               	movf	?_scale+2,w
  4304  05BB  0141               	movlb	1	; select bank1
  4305  05BC  00A8               	movwf	(_sprintf$624+2)^(0+128)
  4306                           
  4307                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4308  05BD  0826               	movf	_sprintf$624^(0+128),w
  4309  05BE  0140               	movlb	0	; select bank0
  4310  05BF  00AB               	movwf	___ftmul@f2
  4311  05C0  0141               	movlb	1	; select bank1
  4312  05C1  0827               	movf	(_sprintf$624+1)^(0+128),w
  4313  05C2  0140               	movlb	0	; select bank0
  4314  05C3  00AC               	movwf	___ftmul@f2+1
  4315  05C4  0141               	movlb	1	; select bank1
  4316  05C5  0828               	movf	(_sprintf$624+2)^(0+128),w
  4317  05C6  0140               	movlb	0	; select bank0
  4318  05C7  00AD               	movwf	___ftmul@f2+2
  4319  05C8  0141               	movlb	1	; select bank1
  4320  05C9  083B               	movf	sprintf@fval^(0+128),w
  4321  05CA  0140               	movlb	0	; select bank0
  4322  05CB  00A8               	movwf	___ftmul@f1
  4323  05CC  0141               	movlb	1	; select bank1
  4324  05CD  083C               	movf	(sprintf@fval+1)^(0+128),w
  4325  05CE  0140               	movlb	0	; select bank0
  4326  05CF  00A9               	movwf	___ftmul@f1+1
  4327  05D0  0141               	movlb	1	; select bank1
  4328  05D1  083D               	movf	(sprintf@fval+2)^(0+128),w
  4329  05D2  0140               	movlb	0	; select bank0
  4330  05D3  00AA               	movwf	___ftmul@f1+2
  4331  05D4  3196  2696  3180   	fcall	___ftmul
  4332  05D7  0140               	movlb	0	; select bank0
  4333  05D8  0828               	movf	?___ftmul,w
  4334  05D9  00C1               	movwf	___fttol@f1
  4335  05DA  0829               	movf	?___ftmul+1,w
  4336  05DB  00C2               	movwf	___fttol@f1+1
  4337  05DC  082A               	movf	?___ftmul+2,w
  4338  05DD  00C3               	movwf	___fttol@f1+2
  4339  05DE  3195  2566  3180   	fcall	___fttol
  4340  05E1  0140               	movlb	0	; select bank0
  4341  05E2  0844               	movf	?___fttol+3,w
  4342  05E3  0141               	movlb	1	; select bank1
  4343  05E4  00B2               	movwf	(sprintf@val+3)^(0+128)
  4344  05E5  0140               	movlb	0	; select bank0
  4345  05E6  0843               	movf	?___fttol+2,w
  4346  05E7  0141               	movlb	1	; select bank1
  4347  05E8  00B1               	movwf	(sprintf@val+2)^(0+128)
  4348  05E9  0140               	movlb	0	; select bank0
  4349  05EA  0842               	movf	?___fttol+1,w
  4350  05EB  0141               	movlb	1	; select bank1
  4351  05EC  00B0               	movwf	(sprintf@val+1)^(0+128)
  4352  05ED  0140               	movlb	0	; select bank0
  4353  05EE  0841               	movf	?___fttol,w
  4354  05EF  0141               	movlb	1	; select bank1
  4355  05F0                     L7:	
  4356  05F0  00AF               	movwf	sprintf@val^(0+128)
  4357  05F1  30FF               	movlw	255
  4358  05F2  00A0               	movwf	??_sprintf^(0+128)
  4359  05F3  0820               	movf	??_sprintf^(0+128),w
  4360  05F4  07C2               	addwf	sprintf@c^(0+128),f
  4361  05F5  0A42               	incf	sprintf@c^(0+128),w
  4362  05F6  1903               	btfsc	3,2
  4363  05F7  2E87               	goto	l3156
  4364                           
  4365                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4366                           
  4367                           ;doprnt.c: 1228: while(c--) {
  4368  05F8  0842               	movf	sprintf@c^(0+128),w
  4369  05F9  00A0               	movwf	??_sprintf^(0+128)
  4370  05FA  01A1               	clrf	(??_sprintf^(0+128)+1)
  4371  05FB  35A0               	lslf	??_sprintf^(0+128),f
  4372  05FC  0DA1               	rlf	(??_sprintf^(0+128)+1),f
  4373  05FD  35A0               	lslf	??_sprintf^(0+128),f
  4374  05FE  0DA1               	rlf	(??_sprintf^(0+128)+1),f
  4375  05FF  3041               	movlw	low (_dpowers| (0+32768))
  4376  0600  0720               	addwf	??_sprintf^(0+128),w
  4377  0601  0084               	movwf	4
  4378  0602  3098               	movlw	high (_dpowers| (0+32768))
  4379  0603  3D21               	addwfc	(??_sprintf+1)^(0+128),w
  4380  0604  0085               	movwf	5
  4381  0605  3F00               	moviw [0]fsr0
  4382  0606  00F0               	movwf	___lldiv@divisor
  4383  0607  3F01               	moviw [1]fsr0
  4384  0608  00F1               	movwf	___lldiv@divisor+1
  4385  0609  3F02               	moviw [2]fsr0
  4386  060A  00F2               	movwf	___lldiv@divisor+2
  4387  060B  3F03               	moviw [3]fsr0
  4388  060C  00F3               	movwf	___lldiv@divisor+3
  4389  060D  0832               	movf	(sprintf@val+3)^(0+128),w
  4390  060E  00F7               	movwf	___lldiv@dividend+3
  4391  060F  0831               	movf	(sprintf@val+2)^(0+128),w
  4392  0610  00F6               	movwf	___lldiv@dividend+2
  4393  0611  0830               	movf	(sprintf@val+1)^(0+128),w
  4394  0612  00F5               	movwf	___lldiv@dividend+1
  4395  0613  082F               	movf	sprintf@val^(0+128),w
  4396  0614  00F4               	movwf	___lldiv@dividend
  4397  0615  3194  24B0  3180   	fcall	___lldiv
  4398  0618  0873               	movf	?___lldiv+3,w
  4399  0619  0141               	movlb	1	; select bank1
  4400  061A  00B6               	movwf	(sprintf@tmpval+3)^(0+128)
  4401  061B  0872               	movf	?___lldiv+2,w
  4402  061C  00B5               	movwf	(sprintf@tmpval+2)^(0+128)
  4403  061D  0871               	movf	?___lldiv+1,w
  4404  061E  00B4               	movwf	(sprintf@tmpval+1)^(0+128)
  4405  061F  0870               	movf	?___lldiv,w
  4406  0620  00B3               	movwf	sprintf@tmpval^(0+128)
  4407                           
  4408                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4409  0621  3000               	movlw	0
  4410  0622  00F3               	movwf	___llmod@divisor+3
  4411  0623  3000               	movlw	0
  4412  0624  00F2               	movwf	___llmod@divisor+2
  4413  0625  3000               	movlw	0
  4414  0626  00F1               	movwf	___llmod@divisor+1
  4415  0627  300A               	movlw	10
  4416  0628  00F0               	movwf	___llmod@divisor
  4417  0629  0836               	movf	(sprintf@tmpval+3)^(0+128),w
  4418  062A  00F7               	movwf	___llmod@dividend+3
  4419  062B  0835               	movf	(sprintf@tmpval+2)^(0+128),w
  4420  062C  00F6               	movwf	___llmod@dividend+2
  4421  062D  0834               	movf	(sprintf@tmpval+1)^(0+128),w
  4422  062E  00F5               	movwf	___llmod@dividend+1
  4423  062F  0833               	movf	sprintf@tmpval^(0+128),w
  4424  0630  00F4               	movwf	___llmod@dividend
  4425  0631  3194  2429  3180   	fcall	___llmod
  4426  0634  0873               	movf	?___llmod+3,w
  4427  0635  0141               	movlb	1	; select bank1
  4428  0636  00B6               	movwf	(sprintf@tmpval+3)^(0+128)
  4429  0637  0872               	movf	?___llmod+2,w
  4430  0638  00B5               	movwf	(sprintf@tmpval+2)^(0+128)
  4431  0639  0871               	movf	?___llmod+1,w
  4432  063A  00B4               	movwf	(sprintf@tmpval+1)^(0+128)
  4433  063B  0870               	movf	?___llmod,w
  4434  063C  00B3               	movwf	sprintf@tmpval^(0+128)
  4435                           
  4436                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4437  063D  0833               	movf	sprintf@tmpval^(0+128),w
  4438  063E  3E30               	addlw	48
  4439  063F  00A0               	movwf	??_sprintf^(0+128)
  4440  0640  0140               	movlb	0	; select bank0
  4441  0641  085B               	movf	sprintf@sp,w
  4442  0642  0086               	movwf	6
  4443  0643  085C               	movf	sprintf@sp+1,w
  4444  0644  0087               	movwf	7
  4445  0645  0141               	movlb	1	; select bank1
  4446  0646  0820               	movf	??_sprintf^(0+128),w
  4447  0647  0081               	movwf	1
  4448  0648  3001               	movlw	1
  4449  0649  0140               	movlb	0	; select bank0
  4450  064A  07DB               	addwf	sprintf@sp,f
  4451  064B  3000               	movlw	0
  4452  064C  3DDC               	addwfc	sprintf@sp+1,f
  4453                           
  4454                           ;doprnt.c: 1232: val %= dpowers[c];
  4455  064D  0141               	movlb	1	; select bank1
  4456  064E  0842               	movf	sprintf@c^(0+128),w
  4457  064F  00A0               	movwf	??_sprintf^(0+128)
  4458  0650  01A1               	clrf	(??_sprintf^(0+128)+1)
  4459  0651  35A0               	lslf	??_sprintf^(0+128),f
  4460  0652  0DA1               	rlf	(??_sprintf^(0+128)+1),f
  4461  0653  35A0               	lslf	??_sprintf^(0+128),f
  4462  0654  0DA1               	rlf	(??_sprintf^(0+128)+1),f
  4463  0655  3041               	movlw	low (_dpowers| (0+32768))
  4464  0656  0720               	addwf	??_sprintf^(0+128),w
  4465  0657  0084               	movwf	4
  4466  0658  3098               	movlw	high (_dpowers| (0+32768))
  4467  0659  3D21               	addwfc	(??_sprintf+1)^(0+128),w
  4468  065A  0085               	movwf	5
  4469  065B  3F00               	moviw [0]fsr0
  4470  065C  00F0               	movwf	___llmod@divisor
  4471  065D  3F01               	moviw [1]fsr0
  4472  065E  00F1               	movwf	___llmod@divisor+1
  4473  065F  3F02               	moviw [2]fsr0
  4474  0660  00F2               	movwf	___llmod@divisor+2
  4475  0661  3F03               	moviw [3]fsr0
  4476  0662  00F3               	movwf	___llmod@divisor+3
  4477  0663  0832               	movf	(sprintf@val+3)^(0+128),w
  4478  0664  00F7               	movwf	___llmod@dividend+3
  4479  0665  0831               	movf	(sprintf@val+2)^(0+128),w
  4480  0666  00F6               	movwf	___llmod@dividend+2
  4481  0667  0830               	movf	(sprintf@val+1)^(0+128),w
  4482  0668  00F5               	movwf	___llmod@dividend+1
  4483  0669  082F               	movf	sprintf@val^(0+128),w
  4484  066A  00F4               	movwf	___llmod@dividend
  4485  066B  3194  2429  3180   	fcall	___llmod
  4486  066E  0873               	movf	?___llmod+3,w
  4487  066F  0141               	movlb	1	; select bank1
  4488  0670  00B2               	movwf	(sprintf@val+3)^(0+128)
  4489  0671  0872               	movf	?___llmod+2,w
  4490  0672  00B1               	movwf	(sprintf@val+2)^(0+128)
  4491  0673  0871               	movf	?___llmod+1,w
  4492  0674  00B0               	movwf	(sprintf@val+1)^(0+128)
  4493  0675  0870               	movf	?___llmod,w
  4494  0676  2DF0               	goto	L7
  4495  0677                     l3150:	
  4496                           ;doprnt.c: 1233: }
  4497                           ;doprnt.c: 1235: while(prec) {
  4498                           
  4499                           
  4500                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4501  0677  0140               	movlb	0	; select bank0
  4502  0678  085B               	movf	sprintf@sp,w
  4503  0679  0086               	movwf	6
  4504  067A  085C               	movf	sprintf@sp+1,w
  4505  067B  0087               	movwf	7
  4506  067C  3030               	movlw	48
  4507  067D  0081               	movwf	1
  4508  067E  3001               	movlw	1
  4509  067F  07DB               	addwf	sprintf@sp,f
  4510  0680  3000               	movlw	0
  4511  0681  3DDC               	addwfc	sprintf@sp+1,f
  4512                           
  4513                           ;doprnt.c: 1237: prec--;
  4514  0682  30FF               	movlw	255
  4515  0683  0141               	movlb	1	; select bank1
  4516  0684  07C0               	addwf	sprintf@prec^(0+128),f
  4517  0685  30FF               	movlw	255
  4518  0686  3DC1               	addwfc	(sprintf@prec+1)^(0+128),f
  4519  0687                     l3156:	
  4520  0687  0840               	movf	sprintf@prec^(0+128),w
  4521  0688  0441               	iorwf	(sprintf@prec+1)^(0+128),w
  4522  0689  1903               	btfsc	3,2
  4523  068A  28D4               	goto	l3246
  4524  068B  2E77               	goto	l3150
  4525  068C                     l3158:	
  4526                           ;doprnt.c: 1238: }
  4527                           ;doprnt.c: 1245: continue;
  4528                           
  4529                           
  4530                           ;doprnt.c: 1246: }
  4531                           ;doprnt.c: 1273: {
  4532                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4533  068C  082C               	movf	sprintf@ap^(0+128),w
  4534  068D  0086               	movwf	6
  4535  068E  0187               	clrf	7
  4536  068F  3F40               	moviw [0]fsr1
  4537  0690  00A0               	movwf	??_sprintf^(0+128)
  4538  0691  3F41               	moviw [1]fsr1
  4539  0692  00A1               	movwf	(??_sprintf^(0+128)+1)
  4540  0693  0820               	movf	??_sprintf^(0+128),w
  4541  0694  00AF               	movwf	sprintf@val^(0+128)
  4542  0695  0821               	movf	(??_sprintf+1)^(0+128),w
  4543  0696  00B0               	movwf	(sprintf@val^(0+128)+1)
  4544  0697  01B1               	clrf	(sprintf@val^(0+128)+2)
  4545  0698  01B2               	clrf	(sprintf@val^(0+128)+3)
  4546  0699  3002               	movlw	2
  4547  069A  00A0               	movwf	??_sprintf^(0+128)
  4548  069B  0820               	movf	??_sprintf^(0+128),w
  4549  069C  07AC               	addwf	sprintf@ap^(0+128),f
  4550                           
  4551                           ;doprnt.c: 1287: }
  4552                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4553  069D  0840               	movf	sprintf@prec^(0+128),w
  4554  069E  0441               	iorwf	(sprintf@prec+1)^(0+128),w
  4555  069F  1D03               	btfss	3,2
  4556  06A0  2EAB               	goto	l3168
  4557  06A1  0832               	movf	(sprintf@val+3)^(0+128),w
  4558  06A2  0431               	iorwf	(sprintf@val+2)^(0+128),w
  4559  06A3  0430               	iorwf	(sprintf@val+1)^(0+128),w
  4560  06A4  042F               	iorwf	sprintf@val^(0+128),w
  4561  06A5  1D03               	skipz
  4562  06A6  2EAB               	goto	l3168
  4563                           
  4564                           ;doprnt.c: 1291: prec++;
  4565  06A7  3001               	movlw	1
  4566  06A8  07C0               	addwf	sprintf@prec^(0+128),f
  4567  06A9  3000               	movlw	0
  4568  06AA  3DC1               	addwfc	(sprintf@prec+1)^(0+128),f
  4569  06AB                     l3168:	
  4570                           
  4571                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4572  06AB  01C2               	clrf	sprintf@c^(0+128)
  4573  06AC  0AC2               	incf	sprintf@c^(0+128),f
  4574  06AD  3008               	movlw	8
  4575  06AE  0642               	xorwf	sprintf@c^(0+128),w
  4576  06AF  1903               	btfsc	3,2
  4577  06B0  2EDE               	goto	l3180
  4578  06B1                     l3174:	
  4579                           
  4580                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4581  06B1  0842               	movf	sprintf@c^(0+128),w
  4582  06B2  00A0               	movwf	??_sprintf^(0+128)
  4583  06B3  01A1               	clrf	(??_sprintf^(0+128)+1)
  4584  06B4  35A0               	lslf	??_sprintf^(0+128),f
  4585  06B5  0DA1               	rlf	(??_sprintf^(0+128)+1),f
  4586  06B6  35A0               	lslf	??_sprintf^(0+128),f
  4587  06B7  0DA1               	rlf	(??_sprintf^(0+128)+1),f
  4588  06B8  3000               	movlw	low (_hexpowers| (0+32768))
  4589  06B9  0720               	addwf	??_sprintf^(0+128),w
  4590  06BA  0084               	movwf	4
  4591  06BB  3098               	movlw	high (_hexpowers| (0+32768))
  4592  06BC  3D21               	addwfc	(??_sprintf+1)^(0+128),w
  4593  06BD  0085               	movwf	5
  4594  06BE  3F00               	moviw [0]fsr0
  4595  06BF  00A2               	movwf	(??_sprintf+2)^(0+128)
  4596  06C0  3F01               	moviw [1]fsr0
  4597  06C1  00A3               	movwf	((??_sprintf+2)^(0+128)+1)
  4598  06C2  3F02               	moviw [2]fsr0
  4599  06C3  00A4               	movwf	((??_sprintf+2)^(0+128)+2)
  4600  06C4  3F03               	moviw [3]fsr0
  4601  06C5  00A5               	movwf	((??_sprintf+2)^(0+128)+3)
  4602  06C6  0825               	movf	(??_sprintf+5)^(0+128),w
  4603  06C7  0232               	subwf	(sprintf@val+3)^(0+128),w
  4604  06C8  1D03               	skipz
  4605  06C9  2ED4               	goto	u4405
  4606  06CA  0824               	movf	(??_sprintf+4)^(0+128),w
  4607  06CB  0231               	subwf	(sprintf@val+2)^(0+128),w
  4608  06CC  1D03               	skipz
  4609  06CD  2ED4               	goto	u4405
  4610  06CE  0823               	movf	(??_sprintf+3)^(0+128),w
  4611  06CF  0230               	subwf	(sprintf@val+1)^(0+128),w
  4612  06D0  1D03               	skipz
  4613  06D1  2ED4               	goto	u4405
  4614  06D2  0822               	movf	(??_sprintf+2)^(0+128),w
  4615  06D3  022F               	subwf	sprintf@val^(0+128),w
  4616  06D4                     u4405:	
  4617  06D4  1C03               	btfss	3,0
  4618  06D5  2EDE               	goto	l3180
  4619                           
  4620                           ;doprnt.c: 1318: break;
  4621  06D6  3001               	movlw	1
  4622  06D7  00A0               	movwf	??_sprintf^(0+128)
  4623  06D8  0820               	movf	??_sprintf^(0+128),w
  4624  06D9  07C2               	addwf	sprintf@c^(0+128),f
  4625  06DA  3008               	movlw	8
  4626  06DB  0642               	xorwf	sprintf@c^(0+128),w
  4627  06DC  1D03               	btfss	3,2
  4628  06DD  2EB1               	goto	l3174
  4629  06DE                     l3180:	
  4630                           
  4631                           ;doprnt.c: 1339: if(c < prec)
  4632  06DE  0842               	movf	sprintf@c^(0+128),w
  4633  06DF  00A0               	movwf	??_sprintf^(0+128)
  4634  06E0  01A1               	clrf	(??_sprintf^(0+128)+1)
  4635  06E1  1BA0               	btfsc	??_sprintf^(0+128),7
  4636  06E2  03A1               	decf	(??_sprintf^(0+128)+1),f
  4637  06E3  0821               	movf	(??_sprintf+1)^(0+128),w
  4638  06E4  3A80               	xorlw	128
  4639  06E5  00A2               	movwf	(??_sprintf+2)^(0+128)
  4640  06E6  0841               	movf	(sprintf@prec+1)^(0+128),w
  4641  06E7  3A80               	xorlw	128
  4642  06E8  0222               	subwf	(??_sprintf+2)^(0+128),w
  4643  06E9  1D03               	skipz
  4644  06EA  2EED               	goto	u4425
  4645  06EB  0840               	movf	sprintf@prec^(0+128),w
  4646  06EC  0220               	subwf	??_sprintf^(0+128),w
  4647  06ED                     u4425:	
  4648  06ED  1803               	skipnc
  4649  06EE  2EF5               	goto	l3184
  4650                           
  4651                           ;doprnt.c: 1340: c = prec;
  4652  06EF  0141               	movlb	1	; select bank1
  4653  06F0  0840               	movf	sprintf@prec^(0+128),w
  4654  06F1  00A0               	movwf	??_sprintf^(0+128)
  4655  06F2  0820               	movf	??_sprintf^(0+128),w
  4656  06F3  00C2               	movwf	sprintf@c^(0+128)
  4657  06F4  2F0D               	goto	l301
  4658  06F5                     l3184:	
  4659                           
  4660                           ;doprnt.c: 1341: else if(prec < c)
  4661  06F5  0141               	movlb	1	; select bank1
  4662  06F6  0842               	movf	sprintf@c^(0+128),w
  4663  06F7  00A0               	movwf	??_sprintf^(0+128)
  4664  06F8  01A1               	clrf	(??_sprintf^(0+128)+1)
  4665  06F9  1BA0               	btfsc	??_sprintf^(0+128),7
  4666  06FA  03A1               	decf	(??_sprintf^(0+128)+1),f
  4667  06FB  0841               	movf	(sprintf@prec+1)^(0+128),w
  4668  06FC  3A80               	xorlw	128
  4669  06FD  00A2               	movwf	(??_sprintf+2)^(0+128)
  4670  06FE  0821               	movf	(??_sprintf+1)^(0+128),w
  4671  06FF  3A80               	xorlw	128
  4672  0700  0222               	subwf	(??_sprintf+2)^(0+128),w
  4673  0701  1D03               	skipz
  4674  0702  2F05               	goto	u4435
  4675  0703  0820               	movf	??_sprintf^(0+128),w
  4676  0704  0240               	subwf	sprintf@prec^(0+128),w
  4677  0705                     u4435:	
  4678  0705  1803               	skipnc
  4679  0706  2F0D               	goto	l301
  4680                           
  4681                           ;doprnt.c: 1342: prec = c;
  4682  0707  0141               	movlb	1	; select bank1
  4683  0708  0842               	movf	sprintf@c^(0+128),w
  4684  0709  00C0               	movwf	sprintf@prec^(0+128)
  4685  070A  01C1               	clrf	(sprintf@prec+1)^(0+128)
  4686  070B  1BC0               	btfsc	sprintf@prec^(0+128),7
  4687  070C  03C1               	decf	(sprintf@prec+1)^(0+128),f
  4688  070D                     l301:	
  4689                           
  4690                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4691  070D  0141               	movlb	1	; select bank1
  4692  070E  083E               	movf	sprintf@width^(0+128),w
  4693  070F  043F               	iorwf	(sprintf@width+1)^(0+128),w
  4694  0710  1903               	btfsc	3,2
  4695  0711  2F20               	goto	l3192
  4696  0712  3003               	movlw	3
  4697  0713  0539               	andwf	sprintf@flag^(0+128),w
  4698  0714  00A0               	movwf	??_sprintf^(0+128)
  4699  0715  3000               	movlw	0
  4700  0716  053A               	andwf	(sprintf@flag+1)^(0+128),w
  4701  0717  00A1               	movwf	(??_sprintf+1)^(0+128)
  4702  0718  0820               	movf	??_sprintf^(0+128),w
  4703  0719  0421               	iorwf	(??_sprintf^(0+128)+1),w
  4704  071A  1903               	btfsc	3,2
  4705  071B  2F20               	goto	l3192
  4706                           
  4707                           ;doprnt.c: 1346: width--;
  4708  071C  30FF               	movlw	255
  4709  071D  07BE               	addwf	sprintf@width^(0+128),f
  4710  071E  30FF               	movlw	255
  4711  071F  3DBF               	addwfc	(sprintf@width+1)^(0+128),f
  4712  0720                     l3192:	
  4713                           
  4714                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4715  0720  1F3A               	btfss	(sprintf@flag+1)^(0+128),6
  4716  0721  2F37               	goto	l3200
  4717                           
  4718                           ;doprnt.c: 1349: if(width > prec)
  4719  0722  0841               	movf	(sprintf@prec+1)^(0+128),w
  4720  0723  3A80               	xorlw	128
  4721  0724  00A0               	movwf	??_sprintf^(0+128)
  4722  0725  083F               	movf	(sprintf@width+1)^(0+128),w
  4723  0726  3A80               	xorlw	128
  4724  0727  0220               	subwf	??_sprintf^(0+128),w
  4725  0728  1D03               	skipz
  4726  0729  2F2C               	goto	u4475
  4727  072A  083E               	movf	sprintf@width^(0+128),w
  4728  072B  0240               	subwf	sprintf@prec^(0+128),w
  4729  072C                     u4475:	
  4730  072C  1803               	skipnc
  4731  072D  2F34               	goto	l3198
  4732                           
  4733                           ;doprnt.c: 1350: width -= prec;
  4734  072E  0141               	movlb	1	; select bank1
  4735  072F  0840               	movf	sprintf@prec^(0+128),w
  4736  0730  02BE               	subwf	sprintf@width^(0+128),f
  4737  0731  0841               	movf	(sprintf@prec+1)^(0+128),w
  4738  0732  3BBF               	subwfb	(sprintf@width+1)^(0+128),f
  4739  0733  2F37               	goto	l3200
  4740  0734                     l3198:	
  4741                           
  4742                           ;doprnt.c: 1351: else
  4743                           ;doprnt.c: 1352: width = 0;
  4744  0734  0141               	movlb	1	; select bank1
  4745  0735  01BE               	clrf	sprintf@width^(0+128)
  4746  0736  01BF               	clrf	(sprintf@width+1)^(0+128)
  4747  0737                     l3200:	
  4748                           
  4749                           ;doprnt.c: 1353: }
  4750                           ;doprnt.c: 1381: if(width > c)
  4751  0737  0842               	movf	sprintf@c^(0+128),w
  4752  0738  00A0               	movwf	??_sprintf^(0+128)
  4753  0739  01A1               	clrf	(??_sprintf^(0+128)+1)
  4754  073A  1BA0               	btfsc	??_sprintf^(0+128),7
  4755  073B  03A1               	decf	(??_sprintf^(0+128)+1),f
  4756  073C  0821               	movf	(??_sprintf+1)^(0+128),w
  4757  073D  3A80               	xorlw	128
  4758  073E  00A2               	movwf	(??_sprintf+2)^(0+128)
  4759  073F  083F               	movf	(sprintf@width+1)^(0+128),w
  4760  0740  3A80               	xorlw	128
  4761  0741  0222               	subwf	(??_sprintf+2)^(0+128),w
  4762  0742  1D03               	skipz
  4763  0743  2F46               	goto	u4485
  4764  0744  083E               	movf	sprintf@width^(0+128),w
  4765  0745  0220               	subwf	??_sprintf^(0+128),w
  4766  0746                     u4485:	
  4767  0746  1803               	skipnc
  4768  0747  2F53               	goto	l3204
  4769                           
  4770                           ;doprnt.c: 1382: width -= c;
  4771  0748  0141               	movlb	1	; select bank1
  4772  0749  0842               	movf	sprintf@c^(0+128),w
  4773  074A  00A0               	movwf	??_sprintf^(0+128)
  4774  074B  01A1               	clrf	(??_sprintf^(0+128)+1)
  4775  074C  1BA0               	btfsc	??_sprintf^(0+128),7
  4776  074D  03A1               	decf	(??_sprintf^(0+128)+1),f
  4777  074E  0820               	movf	??_sprintf^(0+128),w
  4778  074F  02BE               	subwf	sprintf@width^(0+128),f
  4779  0750  0821               	movf	(??_sprintf+1)^(0+128),w
  4780  0751  3BBF               	subwfb	(sprintf@width+1)^(0+128),f
  4781  0752  2F56               	goto	l3206
  4782  0753                     l3204:	
  4783                           
  4784                           ;doprnt.c: 1383: else
  4785                           ;doprnt.c: 1384: width = 0;
  4786  0753  0141               	movlb	1	; select bank1
  4787  0754  01BE               	clrf	sprintf@width^(0+128)
  4788  0755  01BF               	clrf	(sprintf@width+1)^(0+128)
  4789  0756                     l3206:	
  4790                           
  4791                           ;doprnt.c: 1387: if(flag & 0x04) {
  4792  0756  1D39               	btfss	sprintf@flag^(0+128),2
  4793  0757  2F83               	goto	l3222
  4794                           
  4795                           ;doprnt.c: 1392: if(flag & 0x03)
  4796  0758  3003               	movlw	3
  4797  0759  0539               	andwf	sprintf@flag^(0+128),w
  4798  075A  00A0               	movwf	??_sprintf^(0+128)
  4799  075B  3000               	movlw	0
  4800  075C  053A               	andwf	(sprintf@flag+1)^(0+128),w
  4801  075D  00A1               	movwf	(??_sprintf+1)^(0+128)
  4802  075E  0820               	movf	??_sprintf^(0+128),w
  4803  075F  0421               	iorwf	(??_sprintf^(0+128)+1),w
  4804  0760  1903               	btfsc	3,2
  4805  0761  2F6D               	goto	l3214
  4806                           
  4807                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4808  0762  0140               	movlb	0	; select bank0
  4809  0763  085B               	movf	sprintf@sp,w
  4810  0764  0086               	movwf	6
  4811  0765  085C               	movf	sprintf@sp+1,w
  4812  0766  0087               	movwf	7
  4813  0767  302D               	movlw	45
  4814  0768  0081               	movwf	1
  4815  0769  3001               	movlw	1
  4816  076A  07DB               	addwf	sprintf@sp,f
  4817  076B  3000               	movlw	0
  4818  076C  3DDC               	addwfc	sprintf@sp+1,f
  4819  076D                     l3214:	
  4820                           
  4821                           ;doprnt.c: 1415: if(width)
  4822  076D  0141               	movlb	1	; select bank1
  4823  076E                     L9:	
  4824  076E  083E               	movf	sprintf@width^(0+128),w
  4825  076F  043F               	iorwf	(sprintf@width+1)^(0+128),w
  4826  0770  1903               	btfsc	3,2
  4827  0771  2FB0               	goto	l3244
  4828                           
  4829                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4830                           
  4831                           ;doprnt.c: 1416: do
  4832  0772  0140               	movlb	0	; select bank0
  4833  0773  085B               	movf	sprintf@sp,w
  4834  0774  0086               	movwf	6
  4835  0775  085C               	movf	sprintf@sp+1,w
  4836  0776  0087               	movwf	7
  4837  0777  3030               	movlw	48
  4838  0778  0081               	movwf	1
  4839  0779  3001               	movlw	1
  4840  077A  07DB               	addwf	sprintf@sp,f
  4841  077B  3000               	movlw	0
  4842  077C  3DDC               	addwfc	sprintf@sp+1,f
  4843                           
  4844                           ;doprnt.c: 1418: while(--width);
  4845  077D  30FF               	movlw	255
  4846  077E  0141               	movlb	1	; select bank1
  4847  077F  07BE               	addwf	sprintf@width^(0+128),f
  4848  0780  30FF               	movlw	255
  4849  0781  3DBF               	addwfc	(sprintf@width+1)^(0+128),f
  4850  0782  2F6E               	goto	L9
  4851  0783                     l3222:	
  4852                           ;doprnt.c: 1420: } else
  4853                           
  4854                           
  4855                           ;doprnt.c: 1422: {
  4856                           ;doprnt.c: 1424: if(width
  4857                           ;doprnt.c: 1428: )
  4858  0783  083E               	movf	sprintf@width^(0+128),w
  4859  0784  043F               	iorwf	(sprintf@width+1)^(0+128),w
  4860  0785  1903               	btfsc	3,2
  4861  0786  2F9B               	goto	l3230
  4862  0787                     l3224:	
  4863                           ;doprnt.c: 1429: do
  4864                           
  4865                           
  4866                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4867  0787  0140               	movlb	0	; select bank0
  4868  0788  085B               	movf	sprintf@sp,w
  4869  0789  0086               	movwf	6
  4870  078A  085C               	movf	sprintf@sp+1,w
  4871  078B  0087               	movwf	7
  4872  078C  3020               	movlw	32
  4873  078D  0081               	movwf	1
  4874  078E  3001               	movlw	1
  4875  078F  07DB               	addwf	sprintf@sp,f
  4876  0790  3000               	movlw	0
  4877  0791  3DDC               	addwfc	sprintf@sp+1,f
  4878                           
  4879                           ;doprnt.c: 1431: while(--width);
  4880  0792  30FF               	movlw	255
  4881  0793  0141               	movlb	1	; select bank1
  4882  0794  07BE               	addwf	sprintf@width^(0+128),f
  4883  0795  30FF               	movlw	255
  4884  0796  3DBF               	addwfc	(sprintf@width+1)^(0+128),f
  4885  0797  083E               	movf	sprintf@width^(0+128),w
  4886  0798  043F               	iorwf	(sprintf@width+1)^(0+128),w
  4887  0799  1D03               	btfss	3,2
  4888  079A  2F87               	goto	l3224
  4889  079B                     l3230:	
  4890                           
  4891                           ;doprnt.c: 1438: if(flag & 0x03)
  4892  079B  3003               	movlw	3
  4893  079C  0539               	andwf	sprintf@flag^(0+128),w
  4894  079D  00A0               	movwf	??_sprintf^(0+128)
  4895  079E  3000               	movlw	0
  4896  079F  053A               	andwf	(sprintf@flag+1)^(0+128),w
  4897  07A0  00A1               	movwf	(??_sprintf+1)^(0+128)
  4898  07A1  0820               	movf	??_sprintf^(0+128),w
  4899  07A2  0421               	iorwf	(??_sprintf^(0+128)+1),w
  4900  07A3  1903               	btfsc	3,2
  4901  07A4  2FB0               	goto	l3244
  4902                           
  4903                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4904  07A5  0140               	movlb	0	; select bank0
  4905  07A6  085B               	movf	sprintf@sp,w
  4906  07A7  0086               	movwf	6
  4907  07A8  085C               	movf	sprintf@sp+1,w
  4908  07A9  0087               	movwf	7
  4909  07AA  302D               	movlw	45
  4910  07AB  0081               	movwf	1
  4911  07AC  3001               	movlw	1
  4912  07AD                     L8:	
  4913  07AD  07DB               	addwf	sprintf@sp,f
  4914  07AE  3000               	movlw	0
  4915  07AF  3DDC               	addwfc	sprintf@sp+1,f
  4916  07B0                     l3244:	
  4917  07B0  30FF               	movlw	255
  4918  07B1  0141               	movlb	1	; select bank1
  4919  07B2  07C0               	addwf	sprintf@prec^(0+128),f
  4920  07B3  30FF               	movlw	255
  4921  07B4  3DC1               	addwfc	(sprintf@prec+1)^(0+128),f
  4922  07B5  0A40               	incf	sprintf@prec^(0+128),w
  4923  07B6  1903               	btfsc	3,2
  4924  07B7  0A41               	incf	(sprintf@prec+1)^(0+128),w
  4925  07B8  1903               	btfsc	3,2
  4926  07B9  28D4               	goto	l3246
  4927                           
  4928                           ;doprnt.c: 1478: {
  4929                           ;doprnt.c: 1499: {
  4930                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4931                           
  4932                           ;doprnt.c: 1469: }
  4933                           ;doprnt.c: 1474: while(prec--) {
  4934  07BA  0141               	movlb	1	; select bank1
  4935  07BB  0841               	movf	(sprintf@prec+1)^(0+128),w
  4936  07BC  0085               	movwf	5
  4937  07BD  0840               	movf	sprintf@prec^(0+128),w
  4938  07BE  0084               	movwf	4
  4939  07BF  3584               	lslf	4,f
  4940  07C0  0D85               	rlf	5,f
  4941  07C1  3584               	lslf	4,f
  4942  07C2  0D85               	rlf	5,f
  4943  07C3  3000               	movlw	low (_hexpowers| (0+32768))
  4944  07C4  0784               	addwf	4,f
  4945  07C5  3098               	movlw	high (_hexpowers| (0+32768))
  4946  07C6  3D85               	addwfc	5,f
  4947  07C7  3F00               	moviw [0]fsr0
  4948  07C8  00F0               	movwf	___lldiv@divisor
  4949  07C9  3F01               	moviw [1]fsr0
  4950  07CA  00F1               	movwf	___lldiv@divisor+1
  4951  07CB  3F02               	moviw [2]fsr0
  4952  07CC  00F2               	movwf	___lldiv@divisor+2
  4953  07CD  3F03               	moviw [3]fsr0
  4954  07CE  00F3               	movwf	___lldiv@divisor+3
  4955  07CF  0832               	movf	(sprintf@val+3)^(0+128),w
  4956  07D0  00F7               	movwf	___lldiv@dividend+3
  4957  07D1  0831               	movf	(sprintf@val+2)^(0+128),w
  4958  07D2  00F6               	movwf	___lldiv@dividend+2
  4959  07D3  0830               	movf	(sprintf@val+1)^(0+128),w
  4960  07D4  00F5               	movwf	___lldiv@dividend+1
  4961  07D5  082F               	movf	sprintf@val^(0+128),w
  4962  07D6  00F4               	movwf	___lldiv@dividend
  4963  07D7  3194  24B0  3180   	fcall	___lldiv
  4964  07DA  0870               	movf	?___lldiv,w
  4965  07DB  390F               	andlw	15
  4966  07DC  0141               	movlb	1	; select bank1
  4967  07DD  00A0               	movwf	??_sprintf^(0+128)
  4968  07DE  0820               	movf	??_sprintf^(0+128),w
  4969  07DF  00A9               	movwf	sprintf@idx^(0+128)
  4970                           
  4971                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  4972  07E0  0829               	movf	sprintf@idx^(0+128),w
  4973  07E1  3EB7               	addlw	low (STR_8| (0+32768))
  4974  07E2  0084               	movwf	4
  4975  07E3  3098               	movlw	high (STR_8| (0+32768))
  4976  07E4  1803               	skipnc
  4977  07E5  3E01               	addlw	1
  4978  07E6  0085               	movwf	5
  4979  07E7  0800               	movf	0,w	;code access
  4980  07E8  00A0               	movwf	??_sprintf^(0+128)
  4981  07E9  0820               	movf	??_sprintf^(0+128),w
  4982  07EA  00C2               	movwf	sprintf@c^(0+128)
  4983                           
  4984                           ;doprnt.c: 1508: }
  4985                           ;doprnt.c: 1523: }
  4986                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4987  07EB  0140               	movlb	0	; select bank0
  4988  07EC  085B               	movf	sprintf@sp,w
  4989  07ED  0086               	movwf	6
  4990  07EE  085C               	movf	sprintf@sp+1,w
  4991  07EF  0087               	movwf	7
  4992  07F0  0141               	movlb	1	; select bank1
  4993  07F1  0842               	movf	sprintf@c^(0+128),w
  4994  07F2  0081               	movwf	1
  4995  07F3  3001               	movlw	1
  4996  07F4  0140               	movlb	0	; select bank0
  4997  07F5  2FAD               	goto	L8
  4998  07F6                     l3248:	
  4999                           ;doprnt.c: 1525: }
  5000                           ;doprnt.c: 1533: }
  5001                           ;doprnt.c: 1535: alldone:
  5002                           
  5003                           
  5004                           ;doprnt.c: 1538: *sp = 0;
  5005  07F6  0140               	movlb	0	; select bank0
  5006  07F7  085B               	movf	sprintf@sp,w
  5007  07F8  0086               	movwf	6
  5008  07F9  085C               	movf	sprintf@sp+1,w
  5009  07FA  0087               	movwf	7
  5010  07FB  0181               	clrf	1
  5011  07FC  0008               	return
  5012  07FD                     __end_of_sprintf:	
  5013                           ;doprnt.c: 1540: return 0;
  5014                           ;	Return value of _sprintf is never used
  5015                           
  5016                           
  5017                           	psect	text2
  5018  0DBC                     __ptext2:	
  5019 ;; *************** function _scale *****************
  5020 ;; Defined at:
  5021 ;;		line 425 in file "/Applications/microchip/xc8/v1.42/sources/common/doprnt.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;  scl             1    wreg     char 
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;  scl             1   32[BANK0 ] char 
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  3   24[BANK0 ] char 
  5028 ;; Registers used:
  5029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5035 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5036 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5037 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5038 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5039 ;;Total ram usage:        9 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    2
  5042 ;; This function calls:
  5043 ;;		___awdiv
  5044 ;;		___awmod
  5045 ;;		___ftmul
  5046 ;;		___wmul
  5047 ;; This function is called by:
  5048 ;;		_sprintf
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           
  5052                           
  5053                           ;psect for function _scale
  5054  0DBC                     _scale:	
  5055                           
  5056                           ;incstack = 0
  5057                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5058                           ;scale@scl stored from wreg
  5059  0DBC  0140               	movlb	0	; select bank0
  5060  0DBD  00C0               	movwf	scale@scl
  5061                           
  5062                           ;doprnt.c: 428: if(scl < 0) {
  5063  0DBE  1FC0               	btfss	scale@scl,7
  5064  0DBF  2EE1               	goto	l2460
  5065                           
  5066                           ;doprnt.c: 429: scl = -scl;
  5067  0DC0  09C0               	comf	scale@scl,f
  5068  0DC1  0AC0               	incf	scale@scl,f
  5069                           
  5070                           ;doprnt.c: 430: if(scl>=110)
  5071  0DC2  0840               	movf	scale@scl,w
  5072  0DC3  3A80               	xorlw	128
  5073  0DC4  3E12               	addlw	-238
  5074  0DC5  1C03               	skipc
  5075  0DC6  2E65               	goto	l2450
  5076                           
  5077                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5078  0DC7  300A               	movlw	10
  5079  0DC8  00F7               	movwf	___awdiv@divisor
  5080  0DC9  3000               	movlw	0
  5081  0DCA  00F8               	movwf	___awdiv@divisor+1
  5082  0DCB  0840               	movf	scale@scl,w
  5083  0DCC  00F2               	movwf	___awmod@dividend
  5084  0DCD  01F3               	clrf	___awmod@dividend+1
  5085  0DCE  1BF2               	btfsc	___awmod@dividend,7
  5086  0DCF  03F3               	decf	___awmod@dividend+1,f
  5087  0DD0  3064               	movlw	100
  5088  0DD1  00F0               	movwf	___awmod@divisor
  5089  0DD2  3000               	movlw	0
  5090  0DD3  00F1               	movwf	___awmod@divisor+1
  5091  0DD4  3194  246B  318D   	fcall	___awmod
  5092  0DD7  0871               	movf	?___awmod+1,w
  5093  0DD8  00FA               	movwf	___awdiv@dividend+1
  5094  0DD9  0870               	movf	?___awmod,w
  5095  0DDA  00F9               	movwf	___awdiv@dividend
  5096  0DDB  3188  2004  318D   	fcall	___awdiv
  5097  0DDE  0877               	movf	?___awdiv,w
  5098  0DDF  3E09               	addlw	9
  5099  0DE0  0140               	movlb	0	; select bank0
  5100  0DE1  00A4               	movwf	___wmul@multiplier
  5101  0DE2  3000               	movlw	0
  5102  0DE3  3D78               	addwfc	?___awdiv+1,w
  5103  0DE4  00A5               	movwf	___wmul@multiplier+1
  5104  0DE5  3003               	movlw	3
  5105  0DE6  00A6               	movwf	___wmul@multiplicand
  5106  0DE7  3000               	movlw	0
  5107  0DE8  00A7               	movwf	___wmul@multiplicand+1
  5108  0DE9  3192  229A  318D   	fcall	___wmul
  5109  0DEC  0140               	movlb	0	; select bank0
  5110  0DED  0825               	movf	?___wmul+1,w
  5111  0DEE  0085               	movwf	5
  5112  0DEF  0824               	movf	?___wmul,w
  5113  0DF0  0084               	movwf	4
  5114  0DF1  3090               	movlw	low (__npowers_| (0+32768))
  5115  0DF2  0784               	addwf	4,f
  5116  0DF3  3098               	movlw	high (__npowers_| (0+32768))
  5117  0DF4  3D85               	addwfc	5,f
  5118  0DF5  3F00               	moviw [0]fsr0
  5119  0DF6  00A8               	movwf	___ftmul@f1
  5120  0DF7  3F01               	moviw [1]fsr0
  5121  0DF8  00A9               	movwf	___ftmul@f1+1
  5122  0DF9  3F02               	moviw [2]fsr0
  5123  0DFA  00AA               	movwf	___ftmul@f1+2
  5124  0DFB  3064               	movlw	100
  5125  0DFC  00F7               	movwf	___awdiv@divisor
  5126  0DFD  3000               	movlw	0
  5127  0DFE  00F8               	movwf	___awdiv@divisor+1
  5128  0DFF  0840               	movf	scale@scl,w
  5129  0E00  00F9               	movwf	___awdiv@dividend
  5130  0E01  01FA               	clrf	___awdiv@dividend+1
  5131  0E02  1BF9               	btfsc	___awdiv@dividend,7
  5132  0E03  03FA               	decf	___awdiv@dividend+1,f
  5133  0E04  3188  2004  318D   	fcall	___awdiv
  5134  0E07  0877               	movf	?___awdiv,w
  5135  0E08  3E12               	addlw	18
  5136  0E09  0140               	movlb	0	; select bank0
  5137  0E0A  00A4               	movwf	___wmul@multiplier
  5138  0E0B  3000               	movlw	0
  5139  0E0C  3D78               	addwfc	?___awdiv+1,w
  5140  0E0D  00A5               	movwf	___wmul@multiplier+1
  5141  0E0E  3003               	movlw	3
  5142  0E0F  00A6               	movwf	___wmul@multiplicand
  5143  0E10  3000               	movlw	0
  5144  0E11  00A7               	movwf	___wmul@multiplicand+1
  5145  0E12  3192  229A  318D   	fcall	___wmul
  5146  0E15  0140               	movlb	0	; select bank0
  5147  0E16  0825               	movf	?___wmul+1,w
  5148  0E17  0085               	movwf	5
  5149  0E18  0824               	movf	?___wmul,w
  5150  0E19  0084               	movwf	4
  5151  0E1A  3090               	movlw	low (__npowers_| (0+32768))
  5152  0E1B  0784               	addwf	4,f
  5153  0E1C  3098               	movlw	high (__npowers_| (0+32768))
  5154  0E1D  3D85               	addwfc	5,f
  5155  0E1E  3F00               	moviw [0]fsr0
  5156  0E1F  00AB               	movwf	___ftmul@f2
  5157  0E20  3F01               	moviw [1]fsr0
  5158  0E21  00AC               	movwf	___ftmul@f2+1
  5159  0E22  3F02               	moviw [2]fsr0
  5160  0E23  00AD               	movwf	___ftmul@f2+2
  5161  0E24  3196  2696  318D   	fcall	___ftmul
  5162  0E27  0140               	movlb	0	; select bank0
  5163  0E28  0828               	movf	?___ftmul,w
  5164  0E29  00BD               	movwf	_scale$623
  5165  0E2A  0829               	movf	?___ftmul+1,w
  5166  0E2B  00BE               	movwf	_scale$623+1
  5167  0E2C  082A               	movf	?___ftmul+2,w
  5168  0E2D  00BF               	movwf	_scale$623+2
  5169                           
  5170                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5171  0E2E  0840               	movf	scale@scl,w
  5172  0E2F  00F2               	movwf	___awmod@dividend
  5173  0E30  01F3               	clrf	___awmod@dividend+1
  5174  0E31  1BF2               	btfsc	___awmod@dividend,7
  5175  0E32  03F3               	decf	___awmod@dividend+1,f
  5176  0E33  300A               	movlw	10
  5177  0E34  00F0               	movwf	___awmod@divisor
  5178  0E35  3000               	movlw	0
  5179  0E36  00F1               	movwf	___awmod@divisor+1
  5180  0E37  3194  246B  318D   	fcall	___awmod
  5181  0E3A  0871               	movf	?___awmod+1,w
  5182  0E3B  0140               	movlb	0	; select bank0
  5183  0E3C  00A5               	movwf	___wmul@multiplier+1
  5184  0E3D  0870               	movf	?___awmod,w
  5185  0E3E  00A4               	movwf	___wmul@multiplier
  5186  0E3F  3003               	movlw	3
  5187  0E40  00A6               	movwf	___wmul@multiplicand
  5188  0E41  3000               	movlw	0
  5189  0E42  00A7               	movwf	___wmul@multiplicand+1
  5190  0E43  3192  229A  318D   	fcall	___wmul
  5191  0E46  0140               	movlb	0	; select bank0
  5192  0E47  0825               	movf	?___wmul+1,w
  5193  0E48  0085               	movwf	5
  5194  0E49  0824               	movf	?___wmul,w
  5195  0E4A  0084               	movwf	4
  5196  0E4B  3090               	movlw	low (__npowers_| (0+32768))
  5197  0E4C  0784               	addwf	4,f
  5198  0E4D  3098               	movlw	high (__npowers_| (0+32768))
  5199  0E4E  3D85               	addwfc	5,f
  5200  0E4F  3F00               	moviw [0]fsr0
  5201  0E50  00A8               	movwf	___ftmul@f1
  5202  0E51  3F01               	moviw [1]fsr0
  5203  0E52  00A9               	movwf	___ftmul@f1+1
  5204  0E53  3F02               	moviw [2]fsr0
  5205  0E54  00AA               	movwf	___ftmul@f1+2
  5206  0E55  083D               	movf	_scale$623,w
  5207  0E56  00AB               	movwf	___ftmul@f2
  5208  0E57  083E               	movf	_scale$623+1,w
  5209  0E58  00AC               	movwf	___ftmul@f2+1
  5210  0E59  083F               	movf	_scale$623+2,w
  5211  0E5A  00AD               	movwf	___ftmul@f2+2
  5212  0E5B  3196  2696         	fcall	___ftmul
  5213  0E5D  0140               	movlb	0	; select bank0
  5214  0E5E  0828               	movf	?___ftmul,w
  5215  0E5F  00B8               	movwf	?_scale
  5216  0E60  0829               	movf	?___ftmul+1,w
  5217  0E61  00B9               	movwf	?_scale+1
  5218  0E62  082A               	movf	?___ftmul+2,w
  5219  0E63  00BA               	movwf	?_scale+2
  5220  0E64  0008               	return
  5221  0E65                     l2450:	
  5222                           
  5223                           ;doprnt.c: 432: else if(scl > 10)
  5224  0E65  0840               	movf	scale@scl,w
  5225  0E66  3A80               	xorlw	128
  5226  0E67  3E75               	addlw	-139
  5227  0E68  1C03               	skipc
  5228  0E69  2EC4               	goto	l2456
  5229                           
  5230                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5231  0E6A  0840               	movf	scale@scl,w
  5232  0E6B  00F2               	movwf	___awmod@dividend
  5233  0E6C  01F3               	clrf	___awmod@dividend+1
  5234  0E6D  1BF2               	btfsc	___awmod@dividend,7
  5235  0E6E  03F3               	decf	___awmod@dividend+1,f
  5236  0E6F  300A               	movlw	10
  5237  0E70  00F0               	movwf	___awmod@divisor
  5238  0E71  3000               	movlw	0
  5239  0E72  00F1               	movwf	___awmod@divisor+1
  5240  0E73  3194  246B  318D   	fcall	___awmod
  5241  0E76  0871               	movf	?___awmod+1,w
  5242  0E77  0140               	movlb	0	; select bank0
  5243  0E78  00A5               	movwf	___wmul@multiplier+1
  5244  0E79  0870               	movf	?___awmod,w
  5245  0E7A  00A4               	movwf	___wmul@multiplier
  5246  0E7B  3003               	movlw	3
  5247  0E7C  00A6               	movwf	___wmul@multiplicand
  5248  0E7D  3000               	movlw	0
  5249  0E7E  00A7               	movwf	___wmul@multiplicand+1
  5250  0E7F  3192  229A  318D   	fcall	___wmul
  5251  0E82  0140               	movlb	0	; select bank0
  5252  0E83  0825               	movf	?___wmul+1,w
  5253  0E84  0085               	movwf	5
  5254  0E85  0824               	movf	?___wmul,w
  5255  0E86  0084               	movwf	4
  5256  0E87  3090               	movlw	low (__npowers_| (0+32768))
  5257  0E88  0784               	addwf	4,f
  5258  0E89  3098               	movlw	high (__npowers_| (0+32768))
  5259  0E8A  3D85               	addwfc	5,f
  5260  0E8B  3F00               	moviw [0]fsr0
  5261  0E8C  00A8               	movwf	___ftmul@f1
  5262  0E8D  3F01               	moviw [1]fsr0
  5263  0E8E  00A9               	movwf	___ftmul@f1+1
  5264  0E8F  3F02               	moviw [2]fsr0
  5265  0E90  00AA               	movwf	___ftmul@f1+2
  5266  0E91  300A               	movlw	10
  5267  0E92  00F7               	movwf	___awdiv@divisor
  5268  0E93  3000               	movlw	0
  5269  0E94  00F8               	movwf	___awdiv@divisor+1
  5270  0E95  0840               	movf	scale@scl,w
  5271  0E96  00F9               	movwf	___awdiv@dividend
  5272  0E97  01FA               	clrf	___awdiv@dividend+1
  5273  0E98  1BF9               	btfsc	___awdiv@dividend,7
  5274  0E99  03FA               	decf	___awdiv@dividend+1,f
  5275  0E9A  3188  2004  318D   	fcall	___awdiv
  5276  0E9D  0877               	movf	?___awdiv,w
  5277  0E9E  3E09               	addlw	9
  5278  0E9F  0140               	movlb	0	; select bank0
  5279  0EA0  00A4               	movwf	___wmul@multiplier
  5280  0EA1  3000               	movlw	0
  5281  0EA2  3D78               	addwfc	?___awdiv+1,w
  5282  0EA3  00A5               	movwf	___wmul@multiplier+1
  5283  0EA4  3003               	movlw	3
  5284  0EA5  00A6               	movwf	___wmul@multiplicand
  5285  0EA6  3000               	movlw	0
  5286  0EA7  00A7               	movwf	___wmul@multiplicand+1
  5287  0EA8  3192  229A  318D   	fcall	___wmul
  5288  0EAB  0140               	movlb	0	; select bank0
  5289  0EAC  0825               	movf	?___wmul+1,w
  5290  0EAD  0085               	movwf	5
  5291  0EAE  0824               	movf	?___wmul,w
  5292  0EAF  0084               	movwf	4
  5293  0EB0  3090               	movlw	low (__npowers_| (0+32768))
  5294  0EB1  0784               	addwf	4,f
  5295  0EB2  3098               	movlw	high (__npowers_| (0+32768))
  5296  0EB3  3D85               	addwfc	5,f
  5297  0EB4  3F00               	moviw [0]fsr0
  5298  0EB5  00AB               	movwf	___ftmul@f2
  5299  0EB6  3F01               	moviw [1]fsr0
  5300  0EB7  00AC               	movwf	___ftmul@f2+1
  5301  0EB8  3F02               	moviw [2]fsr0
  5302  0EB9  00AD               	movwf	___ftmul@f2+2
  5303  0EBA  3196  2696         	fcall	___ftmul
  5304  0EBC  0140               	movlb	0	; select bank0
  5305  0EBD  0828               	movf	?___ftmul,w
  5306  0EBE  00B8               	movwf	?_scale
  5307  0EBF  0829               	movf	?___ftmul+1,w
  5308  0EC0  00B9               	movwf	?_scale+1
  5309  0EC1  082A               	movf	?___ftmul+2,w
  5310  0EC2  00BA               	movwf	?_scale+2
  5311  0EC3  0008               	return
  5312  0EC4                     l2456:	
  5313                           
  5314                           ;doprnt.c: 434: return _npowers_[scl];
  5315  0EC4  0840               	movf	scale@scl,w
  5316  0EC5  00BB               	movwf	??_scale
  5317  0EC6  01BC               	clrf	??_scale+1
  5318  0EC7  083B               	movf	??_scale,w
  5319  0EC8  00A4               	movwf	___wmul@multiplier
  5320  0EC9  083C               	movf	??_scale+1,w
  5321  0ECA  00A5               	movwf	___wmul@multiplier+1
  5322  0ECB  3003               	movlw	3
  5323  0ECC  00A6               	movwf	___wmul@multiplicand
  5324  0ECD  3000               	movlw	0
  5325  0ECE  00A7               	movwf	___wmul@multiplicand+1
  5326  0ECF  3192  229A         	fcall	___wmul
  5327  0ED1  0140               	movlb	0	; select bank0
  5328  0ED2  0825               	movf	?___wmul+1,w
  5329  0ED3  0085               	movwf	5
  5330  0ED4  0824               	movf	?___wmul,w
  5331  0ED5  0084               	movwf	4
  5332  0ED6  3090               	movlw	low (__npowers_| (0+32768))
  5333  0ED7  0784               	addwf	4,f
  5334  0ED8  3098               	movlw	high (__npowers_| (0+32768))
  5335  0ED9  3D85               	addwfc	5,f
  5336  0EDA  3F00               	moviw [0]fsr0
  5337  0EDB  00B8               	movwf	?_scale
  5338  0EDC  3F01               	moviw [1]fsr0
  5339  0EDD  00B9               	movwf	?_scale+1
  5340  0EDE  3F02               	moviw [2]fsr0
  5341  0EDF  00BA               	movwf	?_scale+2
  5342  0EE0  0008               	return
  5343  0EE1                     l2460:	
  5344                           
  5345                           ;doprnt.c: 435: }
  5346                           ;doprnt.c: 436: if(scl>=110)
  5347  0EE1  0840               	movf	scale@scl,w
  5348  0EE2  3A80               	xorlw	128
  5349  0EE3  3E12               	addlw	-238
  5350  0EE4  1C03               	skipc
  5351  0EE5  2F84               	goto	l2468
  5352                           
  5353                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5354  0EE6  300A               	movlw	10
  5355  0EE7  00F7               	movwf	___awdiv@divisor
  5356  0EE8  3000               	movlw	0
  5357  0EE9  00F8               	movwf	___awdiv@divisor+1
  5358  0EEA  0840               	movf	scale@scl,w
  5359  0EEB  00F2               	movwf	___awmod@dividend
  5360  0EEC  01F3               	clrf	___awmod@dividend+1
  5361  0EED  1BF2               	btfsc	___awmod@dividend,7
  5362  0EEE  03F3               	decf	___awmod@dividend+1,f
  5363  0EEF  3064               	movlw	100
  5364  0EF0  00F0               	movwf	___awmod@divisor
  5365  0EF1  3000               	movlw	0
  5366  0EF2  00F1               	movwf	___awmod@divisor+1
  5367  0EF3  3194  246B  318D   	fcall	___awmod
  5368  0EF6  0871               	movf	?___awmod+1,w
  5369  0EF7  00FA               	movwf	___awdiv@dividend+1
  5370  0EF8  0870               	movf	?___awmod,w
  5371  0EF9  00F9               	movwf	___awdiv@dividend
  5372  0EFA  3188  2004  318D   	fcall	___awdiv
  5373  0EFD  0877               	movf	?___awdiv,w
  5374  0EFE  3E09               	addlw	9
  5375  0EFF  0140               	movlb	0	; select bank0
  5376  0F00  00A4               	movwf	___wmul@multiplier
  5377  0F01  3000               	movlw	0
  5378  0F02  3D78               	addwfc	?___awdiv+1,w
  5379  0F03  00A5               	movwf	___wmul@multiplier+1
  5380  0F04  3003               	movlw	3
  5381  0F05  00A6               	movwf	___wmul@multiplicand
  5382  0F06  3000               	movlw	0
  5383  0F07  00A7               	movwf	___wmul@multiplicand+1
  5384  0F08  3192  229A  318D   	fcall	___wmul
  5385  0F0B  0140               	movlb	0	; select bank0
  5386  0F0C  0825               	movf	?___wmul+1,w
  5387  0F0D  0085               	movwf	5
  5388  0F0E  0824               	movf	?___wmul,w
  5389  0F0F  0084               	movwf	4
  5390  0F10  3069               	movlw	low (__powers_| (0+32768))
  5391  0F11  0784               	addwf	4,f
  5392  0F12  3098               	movlw	high (__powers_| (0+32768))
  5393  0F13  3D85               	addwfc	5,f
  5394  0F14  3F00               	moviw [0]fsr0
  5395  0F15  00A8               	movwf	___ftmul@f1
  5396  0F16  3F01               	moviw [1]fsr0
  5397  0F17  00A9               	movwf	___ftmul@f1+1
  5398  0F18  3F02               	moviw [2]fsr0
  5399  0F19  00AA               	movwf	___ftmul@f1+2
  5400  0F1A  3064               	movlw	100
  5401  0F1B  00F7               	movwf	___awdiv@divisor
  5402  0F1C  3000               	movlw	0
  5403  0F1D  00F8               	movwf	___awdiv@divisor+1
  5404  0F1E  0840               	movf	scale@scl,w
  5405  0F1F  00F9               	movwf	___awdiv@dividend
  5406  0F20  01FA               	clrf	___awdiv@dividend+1
  5407  0F21  1BF9               	btfsc	___awdiv@dividend,7
  5408  0F22  03FA               	decf	___awdiv@dividend+1,f
  5409  0F23  3188  2004  318D   	fcall	___awdiv
  5410  0F26  0877               	movf	?___awdiv,w
  5411  0F27  3E12               	addlw	18
  5412  0F28  0140               	movlb	0	; select bank0
  5413  0F29  00A4               	movwf	___wmul@multiplier
  5414  0F2A  3000               	movlw	0
  5415  0F2B  3D78               	addwfc	?___awdiv+1,w
  5416  0F2C  00A5               	movwf	___wmul@multiplier+1
  5417  0F2D  3003               	movlw	3
  5418  0F2E  00A6               	movwf	___wmul@multiplicand
  5419  0F2F  3000               	movlw	0
  5420  0F30  00A7               	movwf	___wmul@multiplicand+1
  5421  0F31  3192  229A  318D   	fcall	___wmul
  5422  0F34  0140               	movlb	0	; select bank0
  5423  0F35  0825               	movf	?___wmul+1,w
  5424  0F36  0085               	movwf	5
  5425  0F37  0824               	movf	?___wmul,w
  5426  0F38  0084               	movwf	4
  5427  0F39  3069               	movlw	low (__powers_| (0+32768))
  5428  0F3A  0784               	addwf	4,f
  5429  0F3B  3098               	movlw	high (__powers_| (0+32768))
  5430  0F3C  3D85               	addwfc	5,f
  5431  0F3D  3F00               	moviw [0]fsr0
  5432  0F3E  00AB               	movwf	___ftmul@f2
  5433  0F3F  3F01               	moviw [1]fsr0
  5434  0F40  00AC               	movwf	___ftmul@f2+1
  5435  0F41  3F02               	moviw [2]fsr0
  5436  0F42  00AD               	movwf	___ftmul@f2+2
  5437  0F43  3196  2696  318D   	fcall	___ftmul
  5438  0F46  0140               	movlb	0	; select bank0
  5439  0F47  0828               	movf	?___ftmul,w
  5440  0F48  00BD               	movwf	_scale$623
  5441  0F49  0829               	movf	?___ftmul+1,w
  5442  0F4A  00BE               	movwf	_scale$623+1
  5443  0F4B  082A               	movf	?___ftmul+2,w
  5444  0F4C  00BF               	movwf	_scale$623+2
  5445                           
  5446                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5447  0F4D  0840               	movf	scale@scl,w
  5448  0F4E  00F2               	movwf	___awmod@dividend
  5449  0F4F  01F3               	clrf	___awmod@dividend+1
  5450  0F50  1BF2               	btfsc	___awmod@dividend,7
  5451  0F51  03F3               	decf	___awmod@dividend+1,f
  5452  0F52  300A               	movlw	10
  5453  0F53  00F0               	movwf	___awmod@divisor
  5454  0F54  3000               	movlw	0
  5455  0F55  00F1               	movwf	___awmod@divisor+1
  5456  0F56  3194  246B  318D   	fcall	___awmod
  5457  0F59  0871               	movf	?___awmod+1,w
  5458  0F5A  0140               	movlb	0	; select bank0
  5459  0F5B  00A5               	movwf	___wmul@multiplier+1
  5460  0F5C  0870               	movf	?___awmod,w
  5461  0F5D  00A4               	movwf	___wmul@multiplier
  5462  0F5E  3003               	movlw	3
  5463  0F5F  00A6               	movwf	___wmul@multiplicand
  5464  0F60  3000               	movlw	0
  5465  0F61  00A7               	movwf	___wmul@multiplicand+1
  5466  0F62  3192  229A  318D   	fcall	___wmul
  5467  0F65  0140               	movlb	0	; select bank0
  5468  0F66  0825               	movf	?___wmul+1,w
  5469  0F67  0085               	movwf	5
  5470  0F68  0824               	movf	?___wmul,w
  5471  0F69  0084               	movwf	4
  5472  0F6A  3069               	movlw	low (__powers_| (0+32768))
  5473  0F6B  0784               	addwf	4,f
  5474  0F6C  3098               	movlw	high (__powers_| (0+32768))
  5475  0F6D  3D85               	addwfc	5,f
  5476  0F6E  3F00               	moviw [0]fsr0
  5477  0F6F  00A8               	movwf	___ftmul@f1
  5478  0F70  3F01               	moviw [1]fsr0
  5479  0F71  00A9               	movwf	___ftmul@f1+1
  5480  0F72  3F02               	moviw [2]fsr0
  5481  0F73  00AA               	movwf	___ftmul@f1+2
  5482  0F74  083D               	movf	_scale$623,w
  5483  0F75  00AB               	movwf	___ftmul@f2
  5484  0F76  083E               	movf	_scale$623+1,w
  5485  0F77  00AC               	movwf	___ftmul@f2+1
  5486  0F78  083F               	movf	_scale$623+2,w
  5487  0F79  00AD               	movwf	___ftmul@f2+2
  5488  0F7A  3196  2696         	fcall	___ftmul
  5489  0F7C  0140               	movlb	0	; select bank0
  5490  0F7D  0828               	movf	?___ftmul,w
  5491  0F7E  00B8               	movwf	?_scale
  5492  0F7F  0829               	movf	?___ftmul+1,w
  5493  0F80  00B9               	movwf	?_scale+1
  5494  0F81  082A               	movf	?___ftmul+2,w
  5495  0F82  00BA               	movwf	?_scale+2
  5496  0F83  0008               	return
  5497  0F84                     l2468:	
  5498                           
  5499                           ;doprnt.c: 438: else if(scl > 10)
  5500  0F84  0840               	movf	scale@scl,w
  5501  0F85  3A80               	xorlw	128
  5502  0F86  3E75               	addlw	-139
  5503  0F87  1C03               	skipc
  5504  0F88  2FE3               	goto	l2474
  5505                           
  5506                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5507  0F89  0840               	movf	scale@scl,w
  5508  0F8A  00F2               	movwf	___awmod@dividend
  5509  0F8B  01F3               	clrf	___awmod@dividend+1
  5510  0F8C  1BF2               	btfsc	___awmod@dividend,7
  5511  0F8D  03F3               	decf	___awmod@dividend+1,f
  5512  0F8E  300A               	movlw	10
  5513  0F8F  00F0               	movwf	___awmod@divisor
  5514  0F90  3000               	movlw	0
  5515  0F91  00F1               	movwf	___awmod@divisor+1
  5516  0F92  3194  246B  318D   	fcall	___awmod
  5517  0F95  0871               	movf	?___awmod+1,w
  5518  0F96  0140               	movlb	0	; select bank0
  5519  0F97  00A5               	movwf	___wmul@multiplier+1
  5520  0F98  0870               	movf	?___awmod,w
  5521  0F99  00A4               	movwf	___wmul@multiplier
  5522  0F9A  3003               	movlw	3
  5523  0F9B  00A6               	movwf	___wmul@multiplicand
  5524  0F9C  3000               	movlw	0
  5525  0F9D  00A7               	movwf	___wmul@multiplicand+1
  5526  0F9E  3192  229A  318D   	fcall	___wmul
  5527  0FA1  0140               	movlb	0	; select bank0
  5528  0FA2  0825               	movf	?___wmul+1,w
  5529  0FA3  0085               	movwf	5
  5530  0FA4  0824               	movf	?___wmul,w
  5531  0FA5  0084               	movwf	4
  5532  0FA6  3069               	movlw	low (__powers_| (0+32768))
  5533  0FA7  0784               	addwf	4,f
  5534  0FA8  3098               	movlw	high (__powers_| (0+32768))
  5535  0FA9  3D85               	addwfc	5,f
  5536  0FAA  3F00               	moviw [0]fsr0
  5537  0FAB  00A8               	movwf	___ftmul@f1
  5538  0FAC  3F01               	moviw [1]fsr0
  5539  0FAD  00A9               	movwf	___ftmul@f1+1
  5540  0FAE  3F02               	moviw [2]fsr0
  5541  0FAF  00AA               	movwf	___ftmul@f1+2
  5542  0FB0  300A               	movlw	10
  5543  0FB1  00F7               	movwf	___awdiv@divisor
  5544  0FB2  3000               	movlw	0
  5545  0FB3  00F8               	movwf	___awdiv@divisor+1
  5546  0FB4  0840               	movf	scale@scl,w
  5547  0FB5  00F9               	movwf	___awdiv@dividend
  5548  0FB6  01FA               	clrf	___awdiv@dividend+1
  5549  0FB7  1BF9               	btfsc	___awdiv@dividend,7
  5550  0FB8  03FA               	decf	___awdiv@dividend+1,f
  5551  0FB9  3188  2004  318D   	fcall	___awdiv
  5552  0FBC  0877               	movf	?___awdiv,w
  5553  0FBD  3E09               	addlw	9
  5554  0FBE  0140               	movlb	0	; select bank0
  5555  0FBF  00A4               	movwf	___wmul@multiplier
  5556  0FC0  3000               	movlw	0
  5557  0FC1  3D78               	addwfc	?___awdiv+1,w
  5558  0FC2  00A5               	movwf	___wmul@multiplier+1
  5559  0FC3  3003               	movlw	3
  5560  0FC4  00A6               	movwf	___wmul@multiplicand
  5561  0FC5  3000               	movlw	0
  5562  0FC6  00A7               	movwf	___wmul@multiplicand+1
  5563  0FC7  3192  229A  318D   	fcall	___wmul
  5564  0FCA  0140               	movlb	0	; select bank0
  5565  0FCB  0825               	movf	?___wmul+1,w
  5566  0FCC  0085               	movwf	5
  5567  0FCD  0824               	movf	?___wmul,w
  5568  0FCE  0084               	movwf	4
  5569  0FCF  3069               	movlw	low (__powers_| (0+32768))
  5570  0FD0  0784               	addwf	4,f
  5571  0FD1  3098               	movlw	high (__powers_| (0+32768))
  5572  0FD2  3D85               	addwfc	5,f
  5573  0FD3  3F00               	moviw [0]fsr0
  5574  0FD4  00AB               	movwf	___ftmul@f2
  5575  0FD5  3F01               	moviw [1]fsr0
  5576  0FD6  00AC               	movwf	___ftmul@f2+1
  5577  0FD7  3F02               	moviw [2]fsr0
  5578  0FD8  00AD               	movwf	___ftmul@f2+2
  5579  0FD9  3196  2696         	fcall	___ftmul
  5580  0FDB  0140               	movlb	0	; select bank0
  5581  0FDC  0828               	movf	?___ftmul,w
  5582  0FDD  00B8               	movwf	?_scale
  5583  0FDE  0829               	movf	?___ftmul+1,w
  5584  0FDF  00B9               	movwf	?_scale+1
  5585  0FE0  082A               	movf	?___ftmul+2,w
  5586  0FE1  00BA               	movwf	?_scale+2
  5587  0FE2  0008               	return
  5588  0FE3                     l2474:	
  5589                           
  5590                           ;doprnt.c: 440: return _powers_[scl];
  5591  0FE3  0840               	movf	scale@scl,w
  5592  0FE4  00BB               	movwf	??_scale
  5593  0FE5  01BC               	clrf	??_scale+1
  5594  0FE6  083B               	movf	??_scale,w
  5595  0FE7  00A4               	movwf	___wmul@multiplier
  5596  0FE8  083C               	movf	??_scale+1,w
  5597  0FE9  00A5               	movwf	___wmul@multiplier+1
  5598  0FEA  3003               	movlw	3
  5599  0FEB  00A6               	movwf	___wmul@multiplicand
  5600  0FEC  3000               	movlw	0
  5601  0FED  00A7               	movwf	___wmul@multiplicand+1
  5602  0FEE  3192  229A         	fcall	___wmul
  5603  0FF0  0140               	movlb	0	; select bank0
  5604  0FF1  0825               	movf	?___wmul+1,w
  5605  0FF2  0085               	movwf	5
  5606  0FF3  0824               	movf	?___wmul,w
  5607  0FF4  0084               	movwf	4
  5608  0FF5  3069               	movlw	low (__powers_| (0+32768))
  5609  0FF6  0784               	addwf	4,f
  5610  0FF7  3098               	movlw	high (__powers_| (0+32768))
  5611  0FF8  3D85               	addwfc	5,f
  5612  0FF9  3F00               	moviw [0]fsr0
  5613  0FFA  00B8               	movwf	?_scale
  5614  0FFB  3F01               	moviw [1]fsr0
  5615  0FFC  00B9               	movwf	?_scale+1
  5616  0FFD  3F02               	moviw [2]fsr0
  5617  0FFE  00BA               	movwf	?_scale+2
  5618  0FFF  0008               	return
  5619  1000                     __end_of_scale:	
  5620                           
  5621                           	psect	text3
  5622  11E1                     __ptext3:	
  5623 ;; *************** function _isdigit *****************
  5624 ;; Defined at:
  5625 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/isdigit.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;  c               1    wreg     unsigned char 
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;  c               1    1[COMMON] unsigned char 
  5630 ;; Return value:  Size  Location     Type
  5631 ;;		None               void
  5632 ;; Registers used:
  5633 ;;		wreg, status,2, status,0
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 0/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5642 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5643 ;;Total ram usage:        2 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; This function calls:
  5646 ;;		Nothing
  5647 ;; This function is called by:
  5648 ;;		_sprintf
  5649 ;; This function uses a non-reentrant model
  5650 ;;
  5651                           
  5652                           
  5653                           ;psect for function _isdigit
  5654  11E1                     _isdigit:	
  5655                           
  5656                           ;incstack = 0
  5657                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5658                           ;isdigit@c stored from wreg
  5659  11E1  00F1               	movwf	isdigit@c
  5660  11E2  01F0               	clrf	_isdigit$415
  5661  11E3  303A               	movlw	58
  5662  11E4  0271               	subwf	isdigit@c,w
  5663  11E5  1803               	skipnc
  5664  11E6  29ED               	goto	l2486
  5665  11E7  3030               	movlw	48
  5666  11E8  0271               	subwf	isdigit@c,w
  5667  11E9  1C03               	skipc
  5668  11EA  29ED               	goto	l2486
  5669  11EB  01F0               	clrf	_isdigit$415
  5670  11EC  0AF0               	incf	_isdigit$415,f
  5671  11ED                     l2486:	
  5672  11ED  0C70               	rrf	_isdigit$415,w
  5673  11EE  0008               	return
  5674  11EF                     __end_of_isdigit:	
  5675                           
  5676                           	psect	text4
  5677  0A69                     __ptext4:	
  5678 ;; *************** function _fround *****************
  5679 ;; Defined at:
  5680 ;;		line 409 in file "/Applications/microchip/xc8/v1.42/sources/common/doprnt.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;  prec            1    wreg     unsigned char 
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;  prec            1   37[BANK0 ] unsigned char 
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  3   24[BANK0 ] unsigned char 
  5687 ;; Registers used:
  5688 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5694 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5695 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5697 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5698 ;;Total ram usage:       14 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    2
  5701 ;; This function calls:
  5702 ;;		___awdiv
  5703 ;;		___awmod
  5704 ;;		___ftmul
  5705 ;;		___wmul
  5706 ;; This function is called by:
  5707 ;;		_sprintf
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           
  5712                           ;psect for function _fround
  5713  0A69                     _fround:	
  5714                           
  5715                           ;incstack = 0
  5716                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5717                           ;fround@prec stored from wreg
  5718  0A69  0140               	movlb	0	; select bank0
  5719  0A6A  00C5               	movwf	fround@prec
  5720                           
  5721                           ;doprnt.c: 413: if(prec>=110)
  5722  0A6B  306E               	movlw	110
  5723  0A6C  0245               	subwf	fround@prec,w
  5724  0A6D  1C03               	skipc
  5725  0A6E  2B29               	goto	l2426
  5726                           
  5727                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5728  0A6F  300A               	movlw	10
  5729  0A70  00F7               	movwf	___awdiv@divisor
  5730  0A71  3000               	movlw	0
  5731  0A72  00F8               	movwf	___awdiv@divisor+1
  5732  0A73  0845               	movf	fround@prec,w
  5733  0A74  00BB               	movwf	??_fround
  5734  0A75  01BC               	clrf	??_fround+1
  5735  0A76  083B               	movf	??_fround,w
  5736  0A77  00F2               	movwf	___awmod@dividend
  5737  0A78  083C               	movf	??_fround+1,w
  5738  0A79  00F3               	movwf	___awmod@dividend+1
  5739  0A7A  3064               	movlw	100
  5740  0A7B  00F0               	movwf	___awmod@divisor
  5741  0A7C  3000               	movlw	0
  5742  0A7D  00F1               	movwf	___awmod@divisor+1
  5743  0A7E  3194  246B  318A   	fcall	___awmod
  5744  0A81  0871               	movf	?___awmod+1,w
  5745  0A82  00FA               	movwf	___awdiv@dividend+1
  5746  0A83  0870               	movf	?___awmod,w
  5747  0A84  00F9               	movwf	___awdiv@dividend
  5748  0A85  3188  2004  318A   	fcall	___awdiv
  5749  0A88  0877               	movf	?___awdiv,w
  5750  0A89  3E09               	addlw	9
  5751  0A8A  0140               	movlb	0	; select bank0
  5752  0A8B  00A4               	movwf	___wmul@multiplier
  5753  0A8C  3000               	movlw	0
  5754  0A8D  3D78               	addwfc	?___awdiv+1,w
  5755  0A8E  00A5               	movwf	___wmul@multiplier+1
  5756  0A8F  3003               	movlw	3
  5757  0A90  00A6               	movwf	___wmul@multiplicand
  5758  0A91  3000               	movlw	0
  5759  0A92  00A7               	movwf	___wmul@multiplicand+1
  5760  0A93  3192  229A  318A   	fcall	___wmul
  5761  0A96  0140               	movlb	0	; select bank0
  5762  0A97  0825               	movf	?___wmul+1,w
  5763  0A98  0085               	movwf	5
  5764  0A99  0824               	movf	?___wmul,w
  5765  0A9A  0084               	movwf	4
  5766  0A9B  3090               	movlw	low (__npowers_| (0+32768))
  5767  0A9C  0784               	addwf	4,f
  5768  0A9D  3098               	movlw	high (__npowers_| (0+32768))
  5769  0A9E  3D85               	addwfc	5,f
  5770  0A9F  3F00               	moviw [0]fsr0
  5771  0AA0  00A8               	movwf	___ftmul@f1
  5772  0AA1  3F01               	moviw [1]fsr0
  5773  0AA2  00A9               	movwf	___ftmul@f1+1
  5774  0AA3  3F02               	moviw [2]fsr0
  5775  0AA4  00AA               	movwf	___ftmul@f1+2
  5776  0AA5  3064               	movlw	100
  5777  0AA6  00F7               	movwf	___awdiv@divisor
  5778  0AA7  3000               	movlw	0
  5779  0AA8  00F8               	movwf	___awdiv@divisor+1
  5780  0AA9  0845               	movf	fround@prec,w
  5781  0AAA  00BD               	movwf	??_fround+2
  5782  0AAB  01BE               	clrf	??_fround+3
  5783  0AAC  083D               	movf	??_fround+2,w
  5784  0AAD  00F9               	movwf	___awdiv@dividend
  5785  0AAE  083E               	movf	??_fround+3,w
  5786  0AAF  00FA               	movwf	___awdiv@dividend+1
  5787  0AB0  3188  2004  318A   	fcall	___awdiv
  5788  0AB3  0877               	movf	?___awdiv,w
  5789  0AB4  3E12               	addlw	18
  5790  0AB5  0140               	movlb	0	; select bank0
  5791  0AB6  00A4               	movwf	___wmul@multiplier
  5792  0AB7  3000               	movlw	0
  5793  0AB8  3D78               	addwfc	?___awdiv+1,w
  5794  0AB9  00A5               	movwf	___wmul@multiplier+1
  5795  0ABA  3003               	movlw	3
  5796  0ABB  00A6               	movwf	___wmul@multiplicand
  5797  0ABC  3000               	movlw	0
  5798  0ABD  00A7               	movwf	___wmul@multiplicand+1
  5799  0ABE  3192  229A  318A   	fcall	___wmul
  5800  0AC1  0140               	movlb	0	; select bank0
  5801  0AC2  0825               	movf	?___wmul+1,w
  5802  0AC3  0085               	movwf	5
  5803  0AC4  0824               	movf	?___wmul,w
  5804  0AC5  0084               	movwf	4
  5805  0AC6  3090               	movlw	low (__npowers_| (0+32768))
  5806  0AC7  0784               	addwf	4,f
  5807  0AC8  3098               	movlw	high (__npowers_| (0+32768))
  5808  0AC9  3D85               	addwfc	5,f
  5809  0ACA  3F00               	moviw [0]fsr0
  5810  0ACB  00AB               	movwf	___ftmul@f2
  5811  0ACC  3F01               	moviw [1]fsr0
  5812  0ACD  00AC               	movwf	___ftmul@f2+1
  5813  0ACE  3F02               	moviw [2]fsr0
  5814  0ACF  00AD               	movwf	___ftmul@f2+2
  5815  0AD0  3196  2696  318A   	fcall	___ftmul
  5816  0AD3  0140               	movlb	0	; select bank0
  5817  0AD4  0828               	movf	?___ftmul,w
  5818  0AD5  00C2               	movwf	_fround$621
  5819  0AD6  0829               	movf	?___ftmul+1,w
  5820  0AD7  00C3               	movwf	_fround$621+1
  5821  0AD8  082A               	movf	?___ftmul+2,w
  5822  0AD9  00C4               	movwf	_fround$621+2
  5823                           
  5824                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5825  0ADA  0845               	movf	fround@prec,w
  5826  0ADB  00BB               	movwf	??_fround
  5827  0ADC  01BC               	clrf	??_fround+1
  5828  0ADD  083B               	movf	??_fround,w
  5829  0ADE  00F2               	movwf	___awmod@dividend
  5830  0ADF  083C               	movf	??_fround+1,w
  5831  0AE0  00F3               	movwf	___awmod@dividend+1
  5832  0AE1  300A               	movlw	10
  5833  0AE2  00F0               	movwf	___awmod@divisor
  5834  0AE3  3000               	movlw	0
  5835  0AE4  00F1               	movwf	___awmod@divisor+1
  5836  0AE5  3194  246B  318A   	fcall	___awmod
  5837  0AE8  0871               	movf	?___awmod+1,w
  5838  0AE9  0140               	movlb	0	; select bank0
  5839  0AEA  00A5               	movwf	___wmul@multiplier+1
  5840  0AEB  0870               	movf	?___awmod,w
  5841  0AEC  00A4               	movwf	___wmul@multiplier
  5842  0AED  3003               	movlw	3
  5843  0AEE  00A6               	movwf	___wmul@multiplicand
  5844  0AEF  3000               	movlw	0
  5845  0AF0  00A7               	movwf	___wmul@multiplicand+1
  5846  0AF1  3192  229A  318A   	fcall	___wmul
  5847  0AF4  0140               	movlb	0	; select bank0
  5848  0AF5  0825               	movf	?___wmul+1,w
  5849  0AF6  0085               	movwf	5
  5850  0AF7  0824               	movf	?___wmul,w
  5851  0AF8  0084               	movwf	4
  5852  0AF9  3090               	movlw	low (__npowers_| (0+32768))
  5853  0AFA  0784               	addwf	4,f
  5854  0AFB  3098               	movlw	high (__npowers_| (0+32768))
  5855  0AFC  3D85               	addwfc	5,f
  5856  0AFD  3F00               	moviw [0]fsr0
  5857  0AFE  00A8               	movwf	___ftmul@f1
  5858  0AFF  3F01               	moviw [1]fsr0
  5859  0B00  00A9               	movwf	___ftmul@f1+1
  5860  0B01  3F02               	moviw [2]fsr0
  5861  0B02  00AA               	movwf	___ftmul@f1+2
  5862  0B03  0842               	movf	_fround$621,w
  5863  0B04  00AB               	movwf	___ftmul@f2
  5864  0B05  0843               	movf	_fround$621+1,w
  5865  0B06  00AC               	movwf	___ftmul@f2+1
  5866  0B07  0844               	movf	_fround$621+2,w
  5867  0B08  00AD               	movwf	___ftmul@f2+2
  5868  0B09  3196  2696  318A   	fcall	___ftmul
  5869  0B0C  0140               	movlb	0	; select bank0
  5870  0B0D  0828               	movf	?___ftmul,w
  5871  0B0E  00BF               	movwf	_fround$622
  5872  0B0F  0829               	movf	?___ftmul+1,w
  5873  0B10  00C0               	movwf	_fround$622+1
  5874  0B11  082A               	movf	?___ftmul+2,w
  5875  0B12  00C1               	movwf	_fround$622+2
  5876                           
  5877                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5878  0B13  3000               	movlw	0
  5879  0B14  00A8               	movwf	___ftmul@f1
  5880  0B15  3000               	movlw	0
  5881  0B16  00A9               	movwf	___ftmul@f1+1
  5882  0B17  303F               	movlw	63
  5883  0B18  00AA               	movwf	___ftmul@f1+2
  5884  0B19  083F               	movf	_fround$622,w
  5885  0B1A  00AB               	movwf	___ftmul@f2
  5886  0B1B  0840               	movf	_fround$622+1,w
  5887  0B1C  00AC               	movwf	___ftmul@f2+1
  5888  0B1D  0841               	movf	_fround$622+2,w
  5889  0B1E  00AD               	movwf	___ftmul@f2+2
  5890  0B1F  3196  2696         	fcall	___ftmul
  5891  0B21  0140               	movlb	0	; select bank0
  5892  0B22  0828               	movf	?___ftmul,w
  5893  0B23  00B8               	movwf	?_fround
  5894  0B24  0829               	movf	?___ftmul+1,w
  5895  0B25  00B9               	movwf	?_fround+1
  5896  0B26  082A               	movf	?___ftmul+2,w
  5897  0B27  00BA               	movwf	?_fround+2
  5898  0B28  0008               	return
  5899  0B29                     l2426:	
  5900                           
  5901                           ;doprnt.c: 415: else if(prec > 10)
  5902  0B29  300B               	movlw	11
  5903  0B2A  0245               	subwf	fround@prec,w
  5904  0B2B  1C03               	skipc
  5905  0B2C  2BA1               	goto	l2434
  5906                           
  5907                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5908  0B2D  0845               	movf	fround@prec,w
  5909  0B2E  00BB               	movwf	??_fround
  5910  0B2F  01BC               	clrf	??_fround+1
  5911  0B30  083B               	movf	??_fround,w
  5912  0B31  00F2               	movwf	___awmod@dividend
  5913  0B32  083C               	movf	??_fround+1,w
  5914  0B33  00F3               	movwf	___awmod@dividend+1
  5915  0B34  300A               	movlw	10
  5916  0B35  00F0               	movwf	___awmod@divisor
  5917  0B36  3000               	movlw	0
  5918  0B37  00F1               	movwf	___awmod@divisor+1
  5919  0B38  3194  246B  318A   	fcall	___awmod
  5920  0B3B  0871               	movf	?___awmod+1,w
  5921  0B3C  0140               	movlb	0	; select bank0
  5922  0B3D  00A5               	movwf	___wmul@multiplier+1
  5923  0B3E  0870               	movf	?___awmod,w
  5924  0B3F  00A4               	movwf	___wmul@multiplier
  5925  0B40  3003               	movlw	3
  5926  0B41  00A6               	movwf	___wmul@multiplicand
  5927  0B42  3000               	movlw	0
  5928  0B43  00A7               	movwf	___wmul@multiplicand+1
  5929  0B44  3192  229A  318A   	fcall	___wmul
  5930  0B47  0140               	movlb	0	; select bank0
  5931  0B48  0825               	movf	?___wmul+1,w
  5932  0B49  0085               	movwf	5
  5933  0B4A  0824               	movf	?___wmul,w
  5934  0B4B  0084               	movwf	4
  5935  0B4C  3090               	movlw	low (__npowers_| (0+32768))
  5936  0B4D  0784               	addwf	4,f
  5937  0B4E  3098               	movlw	high (__npowers_| (0+32768))
  5938  0B4F  3D85               	addwfc	5,f
  5939  0B50  3F00               	moviw [0]fsr0
  5940  0B51  00A8               	movwf	___ftmul@f1
  5941  0B52  3F01               	moviw [1]fsr0
  5942  0B53  00A9               	movwf	___ftmul@f1+1
  5943  0B54  3F02               	moviw [2]fsr0
  5944  0B55  00AA               	movwf	___ftmul@f1+2
  5945  0B56  300A               	movlw	10
  5946  0B57  00F7               	movwf	___awdiv@divisor
  5947  0B58  3000               	movlw	0
  5948  0B59  00F8               	movwf	___awdiv@divisor+1
  5949  0B5A  0845               	movf	fround@prec,w
  5950  0B5B  00BD               	movwf	??_fround+2
  5951  0B5C  01BE               	clrf	??_fround+3
  5952  0B5D  083D               	movf	??_fround+2,w
  5953  0B5E  00F9               	movwf	___awdiv@dividend
  5954  0B5F  083E               	movf	??_fround+3,w
  5955  0B60  00FA               	movwf	___awdiv@dividend+1
  5956  0B61  3188  2004  318A   	fcall	___awdiv
  5957  0B64  0877               	movf	?___awdiv,w
  5958  0B65  3E09               	addlw	9
  5959  0B66  0140               	movlb	0	; select bank0
  5960  0B67  00A4               	movwf	___wmul@multiplier
  5961  0B68  3000               	movlw	0
  5962  0B69  3D78               	addwfc	?___awdiv+1,w
  5963  0B6A  00A5               	movwf	___wmul@multiplier+1
  5964  0B6B  3003               	movlw	3
  5965  0B6C  00A6               	movwf	___wmul@multiplicand
  5966  0B6D  3000               	movlw	0
  5967  0B6E  00A7               	movwf	___wmul@multiplicand+1
  5968  0B6F  3192  229A  318A   	fcall	___wmul
  5969  0B72  0140               	movlb	0	; select bank0
  5970  0B73  0825               	movf	?___wmul+1,w
  5971  0B74  0085               	movwf	5
  5972  0B75  0824               	movf	?___wmul,w
  5973  0B76  0084               	movwf	4
  5974  0B77  3090               	movlw	low (__npowers_| (0+32768))
  5975  0B78  0784               	addwf	4,f
  5976  0B79  3098               	movlw	high (__npowers_| (0+32768))
  5977  0B7A  3D85               	addwfc	5,f
  5978  0B7B  3F00               	moviw [0]fsr0
  5979  0B7C  00AB               	movwf	___ftmul@f2
  5980  0B7D  3F01               	moviw [1]fsr0
  5981  0B7E  00AC               	movwf	___ftmul@f2+1
  5982  0B7F  3F02               	moviw [2]fsr0
  5983  0B80  00AD               	movwf	___ftmul@f2+2
  5984  0B81  3196  2696  318A   	fcall	___ftmul
  5985  0B84  0140               	movlb	0	; select bank0
  5986  0B85  0828               	movf	?___ftmul,w
  5987  0B86  00C2               	movwf	_fround$621
  5988  0B87  0829               	movf	?___ftmul+1,w
  5989  0B88  00C3               	movwf	_fround$621+1
  5990  0B89  082A               	movf	?___ftmul+2,w
  5991  0B8A  00C4               	movwf	_fround$621+2
  5992                           
  5993                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5994  0B8B  3000               	movlw	0
  5995  0B8C  00A8               	movwf	___ftmul@f1
  5996  0B8D  3000               	movlw	0
  5997  0B8E  00A9               	movwf	___ftmul@f1+1
  5998  0B8F  303F               	movlw	63
  5999  0B90  00AA               	movwf	___ftmul@f1+2
  6000  0B91  0842               	movf	_fround$621,w
  6001  0B92  00AB               	movwf	___ftmul@f2
  6002  0B93  0843               	movf	_fround$621+1,w
  6003  0B94  00AC               	movwf	___ftmul@f2+1
  6004  0B95  0844               	movf	_fround$621+2,w
  6005  0B96  00AD               	movwf	___ftmul@f2+2
  6006  0B97  3196  2696         	fcall	___ftmul
  6007  0B99  0140               	movlb	0	; select bank0
  6008  0B9A  0828               	movf	?___ftmul,w
  6009  0B9B  00B8               	movwf	?_fround
  6010  0B9C  0829               	movf	?___ftmul+1,w
  6011  0B9D  00B9               	movwf	?_fround+1
  6012  0B9E  082A               	movf	?___ftmul+2,w
  6013  0B9F  00BA               	movwf	?_fround+2
  6014  0BA0  0008               	return
  6015  0BA1                     l2434:	
  6016                           
  6017                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6018  0BA1  3000               	movlw	0
  6019  0BA2  00A8               	movwf	___ftmul@f1
  6020  0BA3  3000               	movlw	0
  6021  0BA4  00A9               	movwf	___ftmul@f1+1
  6022  0BA5  303F               	movlw	63
  6023  0BA6  00AA               	movwf	___ftmul@f1+2
  6024  0BA7  0845               	movf	fround@prec,w
  6025  0BA8  00BB               	movwf	??_fround
  6026  0BA9  01BC               	clrf	??_fround+1
  6027  0BAA  083B               	movf	??_fround,w
  6028  0BAB  00A4               	movwf	___wmul@multiplier
  6029  0BAC  083C               	movf	??_fround+1,w
  6030  0BAD  00A5               	movwf	___wmul@multiplier+1
  6031  0BAE  3003               	movlw	3
  6032  0BAF  00A6               	movwf	___wmul@multiplicand
  6033  0BB0  3000               	movlw	0
  6034  0BB1  00A7               	movwf	___wmul@multiplicand+1
  6035  0BB2  3192  229A  318A   	fcall	___wmul
  6036  0BB5  0140               	movlb	0	; select bank0
  6037  0BB6  0825               	movf	?___wmul+1,w
  6038  0BB7  0085               	movwf	5
  6039  0BB8  0824               	movf	?___wmul,w
  6040  0BB9  0084               	movwf	4
  6041  0BBA  3090               	movlw	low (__npowers_| (0+32768))
  6042  0BBB  0784               	addwf	4,f
  6043  0BBC  3098               	movlw	high (__npowers_| (0+32768))
  6044  0BBD  3D85               	addwfc	5,f
  6045  0BBE  3F00               	moviw [0]fsr0
  6046  0BBF  00AB               	movwf	___ftmul@f2
  6047  0BC0  3F01               	moviw [1]fsr0
  6048  0BC1  00AC               	movwf	___ftmul@f2+1
  6049  0BC2  3F02               	moviw [2]fsr0
  6050  0BC3  00AD               	movwf	___ftmul@f2+2
  6051  0BC4  3196  2696         	fcall	___ftmul
  6052  0BC6  0140               	movlb	0	; select bank0
  6053  0BC7  0828               	movf	?___ftmul,w
  6054  0BC8  00B8               	movwf	?_fround
  6055  0BC9  0829               	movf	?___ftmul+1,w
  6056  0BCA  00B9               	movwf	?_fround+1
  6057  0BCB  082A               	movf	?___ftmul+2,w
  6058  0BCC  00BA               	movwf	?_fround+2
  6059  0BCD  0008               	return
  6060  0BCE                     __end_of_fround:	
  6061                           
  6062                           	psect	text5
  6063  129A                     __ptext5:	
  6064 ;; *************** function ___wmul *****************
  6065 ;; Defined at:
  6066 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul16.c"
  6067 ;; Parameters:    Size  Location     Type
  6068 ;;  multiplier      2    4[BANK0 ] unsigned int 
  6069 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;  product         2   12[COMMON] unsigned int 
  6072 ;; Return value:  Size  Location     Type
  6073 ;;                  2    4[BANK0 ] unsigned int 
  6074 ;; Registers used:
  6075 ;;		wreg, status,2, status,0
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6081 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6082 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;Total ram usage:        6 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; This function calls:
  6088 ;;		Nothing
  6089 ;; This function is called by:
  6090 ;;		_fround
  6091 ;;		_scale
  6092 ;;		_sprintf
  6093 ;; This function uses a non-reentrant model
  6094 ;;
  6095                           
  6096                           
  6097                           ;psect for function ___wmul
  6098  129A                     ___wmul:	
  6099                           
  6100                           ;incstack = 0
  6101                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6102  129A  01FC               	clrf	___wmul@product
  6103  129B  01FD               	clrf	___wmul@product+1
  6104  129C                     l2120:	
  6105  129C  0140               	movlb	0	; select bank0
  6106  129D  1C24               	btfss	___wmul@multiplier,0
  6107  129E  2AA3               	goto	l327
  6108  129F  0826               	movf	___wmul@multiplicand,w
  6109  12A0  07FC               	addwf	___wmul@product,f
  6110  12A1  0827               	movf	___wmul@multiplicand+1,w
  6111  12A2  3DFD               	addwfc	___wmul@product+1,f
  6112  12A3                     l327:	
  6113  12A3  3001               	movlw	1
  6114  12A4                     u2505:	
  6115  12A4  35A6               	lslf	___wmul@multiplicand,f
  6116  12A5  0DA7               	rlf	___wmul@multiplicand+1,f
  6117  12A6  0B89               	decfsz	9,f
  6118  12A7  2AA4               	goto	u2505
  6119  12A8  3001               	movlw	1
  6120  12A9                     u2515:	
  6121  12A9  36A5               	lsrf	___wmul@multiplier+1,f
  6122  12AA  0CA4               	rrf	___wmul@multiplier,f
  6123  12AB  0B89               	decfsz	9,f
  6124  12AC  2AA9               	goto	u2515
  6125  12AD  0824               	movf	___wmul@multiplier,w
  6126  12AE  0425               	iorwf	___wmul@multiplier+1,w
  6127  12AF  1D03               	btfss	3,2
  6128  12B0  2A9C               	goto	l2120
  6129  12B1  087D               	movf	___wmul@product+1,w
  6130  12B2  00A5               	movwf	?___wmul+1
  6131  12B3  087C               	movf	___wmul@product,w
  6132  12B4  00A4               	movwf	?___wmul
  6133  12B5  0008               	return
  6134  12B6                     __end_of___wmul:	
  6135                           
  6136                           	psect	text6
  6137  146B                     __ptext6:	
  6138 ;; *************** function ___awmod *****************
  6139 ;; Defined at:
  6140 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/awmod.c"
  6141 ;; Parameters:    Size  Location     Type
  6142 ;;  divisor         2    0[COMMON] int 
  6143 ;;  dividend        2    2[COMMON] int 
  6144 ;; Auto vars:     Size  Location     Type
  6145 ;;  sign            1    6[COMMON] unsigned char 
  6146 ;;  counter         1    5[COMMON] unsigned char 
  6147 ;; Return value:  Size  Location     Type
  6148 ;;                  2    0[COMMON] int 
  6149 ;; Registers used:
  6150 ;;		wreg, status,2, status,0
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6156 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6157 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6158 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6159 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;Total ram usage:        7 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; This function calls:
  6163 ;;		Nothing
  6164 ;; This function is called by:
  6165 ;;		_fround
  6166 ;;		_scale
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           
  6171                           ;psect for function ___awmod
  6172  146B                     ___awmod:	
  6173                           
  6174                           ;incstack = 0
  6175                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6176  146B  01F6               	clrf	___awmod@sign
  6177  146C  1FF3               	btfss	___awmod@dividend+1,7
  6178  146D  2C75               	goto	l2184
  6179  146E  09F2               	comf	___awmod@dividend,f
  6180  146F  09F3               	comf	___awmod@dividend+1,f
  6181  1470  0AF2               	incf	___awmod@dividend,f
  6182  1471  1903               	skipnz
  6183  1472  0AF3               	incf	___awmod@dividend+1,f
  6184  1473  01F6               	clrf	___awmod@sign
  6185  1474  0AF6               	incf	___awmod@sign,f
  6186  1475                     l2184:	
  6187  1475  1FF1               	btfss	___awmod@divisor+1,7
  6188  1476  2C7C               	goto	l2188
  6189  1477  09F0               	comf	___awmod@divisor,f
  6190  1478  09F1               	comf	___awmod@divisor+1,f
  6191  1479  0AF0               	incf	___awmod@divisor,f
  6192  147A  1903               	skipnz
  6193  147B  0AF1               	incf	___awmod@divisor+1,f
  6194  147C                     l2188:	
  6195  147C  0870               	movf	___awmod@divisor,w
  6196  147D  0471               	iorwf	___awmod@divisor+1,w
  6197  147E  1903               	btfsc	3,2
  6198  147F  2CA3               	goto	l2206
  6199  1480  01F5               	clrf	___awmod@counter
  6200  1481  0AF5               	incf	___awmod@counter,f
  6201  1482                     l2196:	
  6202  1482  1BF1               	btfsc	___awmod@divisor+1,7
  6203  1483  2C8E               	goto	l2198
  6204  1484  3001               	movlw	1
  6205  1485                     u2665:	
  6206  1485  35F0               	lslf	___awmod@divisor,f
  6207  1486  0DF1               	rlf	___awmod@divisor+1,f
  6208  1487  0B89               	decfsz	9,f
  6209  1488  2C85               	goto	u2665
  6210  1489  3001               	movlw	1
  6211  148A  00F4               	movwf	??___awmod
  6212  148B  0874               	movf	??___awmod,w
  6213  148C  07F5               	addwf	___awmod@counter,f
  6214  148D  2C82               	goto	l2196
  6215  148E                     l2198:	
  6216  148E  0871               	movf	___awmod@divisor+1,w
  6217  148F  0273               	subwf	___awmod@dividend+1,w
  6218  1490  1D03               	skipz
  6219  1491  2C94               	goto	u2685
  6220  1492  0870               	movf	___awmod@divisor,w
  6221  1493  0272               	subwf	___awmod@dividend,w
  6222  1494                     u2685:	
  6223  1494  1C03               	skipc
  6224  1495  2C9A               	goto	l2202
  6225  1496  0870               	movf	___awmod@divisor,w
  6226  1497  02F2               	subwf	___awmod@dividend,f
  6227  1498  0871               	movf	___awmod@divisor+1,w
  6228  1499  3BF3               	subwfb	___awmod@dividend+1,f
  6229  149A                     l2202:	
  6230  149A  3001               	movlw	1
  6231  149B                     u2695:	
  6232  149B  36F1               	lsrf	___awmod@divisor+1,f
  6233  149C  0CF0               	rrf	___awmod@divisor,f
  6234  149D  0B89               	decfsz	9,f
  6235  149E  2C9B               	goto	u2695
  6236  149F  3001               	movlw	1
  6237  14A0  02F5               	subwf	___awmod@counter,f
  6238  14A1  1D03               	btfss	3,2
  6239  14A2  2C8E               	goto	l2198
  6240  14A3                     l2206:	
  6241  14A3  0876               	movf	___awmod@sign,w
  6242  14A4  1903               	btfsc	3,2
  6243  14A5  2CAB               	goto	l2210
  6244  14A6  09F2               	comf	___awmod@dividend,f
  6245  14A7  09F3               	comf	___awmod@dividend+1,f
  6246  14A8  0AF2               	incf	___awmod@dividend,f
  6247  14A9  1903               	skipnz
  6248  14AA  0AF3               	incf	___awmod@dividend+1,f
  6249  14AB                     l2210:	
  6250  14AB  0873               	movf	___awmod@dividend+1,w
  6251  14AC  00F1               	movwf	?___awmod+1
  6252  14AD  0872               	movf	___awmod@dividend,w
  6253  14AE  00F0               	movwf	?___awmod
  6254  14AF  0008               	return
  6255  14B0                     __end_of___awmod:	
  6256                           
  6257                           	psect	text7
  6258  0804                     __ptext7:	
  6259 ;; *************** function ___awdiv *****************
  6260 ;; Defined at:
  6261 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/awdiv.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;  divisor         2    7[COMMON] int 
  6264 ;;  dividend        2    9[COMMON] int 
  6265 ;; Auto vars:     Size  Location     Type
  6266 ;;  quotient        2    2[BANK0 ] int 
  6267 ;;  sign            1    1[BANK0 ] unsigned char 
  6268 ;;  counter         1    0[BANK0 ] unsigned char 
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  2    7[COMMON] int 
  6271 ;; Registers used:
  6272 ;;		wreg, status,2, status,0
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6278 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6279 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6280 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6281 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6282 ;;Total ram usage:        9 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; This function calls:
  6285 ;;		Nothing
  6286 ;; This function is called by:
  6287 ;;		_fround
  6288 ;;		_scale
  6289 ;;		_sprintf
  6290 ;; This function uses a non-reentrant model
  6291 ;;
  6292                           
  6293                           
  6294                           ;psect for function ___awdiv
  6295  0804                     ___awdiv:	
  6296                           
  6297                           ;incstack = 0
  6298                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6299  0804  0140               	movlb	0	; select bank0
  6300  0805  01A1               	clrf	___awdiv@sign
  6301  0806  1FF8               	btfss	___awdiv@divisor+1,7
  6302  0807  280F               	goto	l2140
  6303  0808  09F7               	comf	___awdiv@divisor,f
  6304  0809  09F8               	comf	___awdiv@divisor+1,f
  6305  080A  0AF7               	incf	___awdiv@divisor,f
  6306  080B  1903               	skipnz
  6307  080C  0AF8               	incf	___awdiv@divisor+1,f
  6308  080D  01A1               	clrf	___awdiv@sign
  6309  080E  0AA1               	incf	___awdiv@sign,f
  6310  080F                     l2140:	
  6311  080F  1FFA               	btfss	___awdiv@dividend+1,7
  6312  0810  281A               	goto	l2146
  6313  0811  09F9               	comf	___awdiv@dividend,f
  6314  0812  09FA               	comf	___awdiv@dividend+1,f
  6315  0813  0AF9               	incf	___awdiv@dividend,f
  6316  0814  1903               	skipnz
  6317  0815  0AFA               	incf	___awdiv@dividend+1,f
  6318  0816  3001               	movlw	1
  6319  0817  00FB               	movwf	??___awdiv
  6320  0818  087B               	movf	??___awdiv,w
  6321  0819  06A1               	xorwf	___awdiv@sign,f
  6322  081A                     l2146:	
  6323  081A  01A2               	clrf	___awdiv@quotient
  6324  081B  01A3               	clrf	___awdiv@quotient+1
  6325  081C  0877               	movf	___awdiv@divisor,w
  6326  081D  0478               	iorwf	___awdiv@divisor+1,w
  6327  081E  1903               	btfsc	3,2
  6328  081F  2849               	goto	l2168
  6329  0820  01A0               	clrf	___awdiv@counter
  6330  0821  0AA0               	incf	___awdiv@counter,f
  6331  0822                     l2156:	
  6332  0822  1BF8               	btfsc	___awdiv@divisor+1,7
  6333  0823  282E               	goto	l2158
  6334  0824  3001               	movlw	1
  6335  0825                     u2565:	
  6336  0825  35F7               	lslf	___awdiv@divisor,f
  6337  0826  0DF8               	rlf	___awdiv@divisor+1,f
  6338  0827  0B89               	decfsz	9,f
  6339  0828  2825               	goto	u2565
  6340  0829  3001               	movlw	1
  6341  082A  00FB               	movwf	??___awdiv
  6342  082B  087B               	movf	??___awdiv,w
  6343  082C  07A0               	addwf	___awdiv@counter,f
  6344  082D  2822               	goto	l2156
  6345  082E                     l2158:	
  6346  082E  3001               	movlw	1
  6347  082F                     u2585:	
  6348  082F  35A2               	lslf	___awdiv@quotient,f
  6349  0830  0DA3               	rlf	___awdiv@quotient+1,f
  6350  0831  0B89               	decfsz	9,f
  6351  0832  282F               	goto	u2585
  6352  0833  0878               	movf	___awdiv@divisor+1,w
  6353  0834  027A               	subwf	___awdiv@dividend+1,w
  6354  0835  1D03               	skipz
  6355  0836  2839               	goto	u2595
  6356  0837  0877               	movf	___awdiv@divisor,w
  6357  0838  0279               	subwf	___awdiv@dividend,w
  6358  0839                     u2595:	
  6359  0839  1C03               	skipc
  6360  083A  2840               	goto	l2164
  6361  083B  0877               	movf	___awdiv@divisor,w
  6362  083C  02F9               	subwf	___awdiv@dividend,f
  6363  083D  0878               	movf	___awdiv@divisor+1,w
  6364  083E  3BFA               	subwfb	___awdiv@dividend+1,f
  6365  083F  1422               	bsf	___awdiv@quotient,0
  6366  0840                     l2164:	
  6367  0840  3001               	movlw	1
  6368  0841                     u2605:	
  6369  0841  36F8               	lsrf	___awdiv@divisor+1,f
  6370  0842  0CF7               	rrf	___awdiv@divisor,f
  6371  0843  0B89               	decfsz	9,f
  6372  0844  2841               	goto	u2605
  6373  0845  3001               	movlw	1
  6374  0846  02A0               	subwf	___awdiv@counter,f
  6375  0847  1D03               	btfss	3,2
  6376  0848  282E               	goto	l2158
  6377  0849                     l2168:	
  6378  0849  0821               	movf	___awdiv@sign,w
  6379  084A  1903               	btfsc	3,2
  6380  084B  2851               	goto	l2172
  6381  084C  09A2               	comf	___awdiv@quotient,f
  6382  084D  09A3               	comf	___awdiv@quotient+1,f
  6383  084E  0AA2               	incf	___awdiv@quotient,f
  6384  084F  1903               	skipnz
  6385  0850  0AA3               	incf	___awdiv@quotient+1,f
  6386  0851                     l2172:	
  6387  0851  0823               	movf	___awdiv@quotient+1,w
  6388  0852  00F8               	movwf	?___awdiv+1
  6389  0853  0822               	movf	___awdiv@quotient,w
  6390  0854  00F7               	movwf	?___awdiv
  6391  0855  0008               	return
  6392  0856                     __end_of___awdiv:	
  6393                           
  6394                           	psect	text8
  6395  174A                     __ptext8:	
  6396 ;; *************** function __tdiv_to_l_ *****************
  6397 ;; Defined at:
  6398 ;;		line 60 in file "/Applications/microchip/xc8/v1.42/sources/common/ftdivl.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;  f1              3    0[COMMON] float 
  6401 ;;  f2              3    3[COMMON] float 
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;  quot            4    0[BANK0 ] unsigned long 
  6404 ;;  exp1            1    5[BANK0 ] unsigned char 
  6405 ;;  cntr            1    4[BANK0 ] unsigned char 
  6406 ;; Return value:  Size  Location     Type
  6407 ;;                  4    0[COMMON] unsigned long 
  6408 ;; Registers used:
  6409 ;;		wreg, status,2, status,0
  6410 ;; Tracked objects:
  6411 ;;		On entry : 0/0
  6412 ;;		On exit  : 0/0
  6413 ;;		Unchanged: 0/0
  6414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6415 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6416 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6417 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6418 ;;      Totals:        10       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6419 ;;Total ram usage:       16 bytes
  6420 ;; Hardware stack levels used:    1
  6421 ;; This function calls:
  6422 ;;		Nothing
  6423 ;; This function is called by:
  6424 ;;		_sprintf
  6425 ;; This function uses a non-reentrant model
  6426 ;;
  6427                           
  6428                           
  6429                           ;psect for function __tdiv_to_l_
  6430  174A                     __tdiv_to_l_:	
  6431                           
  6432                           ;incstack = 0
  6433                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  6434  174A  0870               	movf	__tdiv_to_l_@f1,w
  6435  174B  00F6               	movwf	??__tdiv_to_l_
  6436  174C  0871               	movf	__tdiv_to_l_@f1+1,w
  6437  174D  00F7               	movwf	??__tdiv_to_l_+1
  6438  174E  0872               	movf	__tdiv_to_l_@f1+2,w
  6439  174F  00F8               	movwf	??__tdiv_to_l_+2
  6440  1750  1003               	clrc
  6441  1751  0D77               	rlf	??__tdiv_to_l_+1,w
  6442  1752  0D78               	rlf	??__tdiv_to_l_+2,w
  6443  1753  00F9               	movwf	??__tdiv_to_l_+3
  6444  1754  0879               	movf	??__tdiv_to_l_+3,w
  6445  1755  0140               	movlb	0	; select bank0
  6446  1756  00A5               	movwf	__tdiv_to_l_@exp1
  6447  1757  0825               	movf	__tdiv_to_l_@exp1,w
  6448  1758  1D03               	btfss	3,2
  6449  1759  2F63               	goto	l2496
  6450  175A  3000               	movlw	0
  6451  175B  00F3               	movwf	?__tdiv_to_l_+3
  6452  175C  3000               	movlw	0
  6453  175D  00F2               	movwf	?__tdiv_to_l_+2
  6454  175E  3000               	movlw	0
  6455  175F  00F1               	movwf	?__tdiv_to_l_+1
  6456  1760  3000               	movlw	0
  6457  1761  00F0               	movwf	?__tdiv_to_l_
  6458  1762  0008               	return
  6459  1763                     l2496:	
  6460  1763  0873               	movf	__tdiv_to_l_@f2,w
  6461  1764  00F6               	movwf	??__tdiv_to_l_
  6462  1765  0874               	movf	__tdiv_to_l_@f2+1,w
  6463  1766  00F7               	movwf	??__tdiv_to_l_+1
  6464  1767  0875               	movf	__tdiv_to_l_@f2+2,w
  6465  1768  00F8               	movwf	??__tdiv_to_l_+2
  6466  1769  1003               	clrc
  6467  176A  0D77               	rlf	??__tdiv_to_l_+1,w
  6468  176B  0D78               	rlf	??__tdiv_to_l_+2,w
  6469  176C  00F9               	movwf	??__tdiv_to_l_+3
  6470  176D  0879               	movf	??__tdiv_to_l_+3,w
  6471  176E  00A4               	movwf	__tdiv_to_l_@cntr
  6472  176F  0824               	movf	__tdiv_to_l_@cntr,w
  6473  1770  1D03               	btfss	3,2
  6474  1771  2F7B               	goto	l562
  6475  1772  3000               	movlw	0
  6476  1773  00F3               	movwf	?__tdiv_to_l_+3
  6477  1774  3000               	movlw	0
  6478  1775  00F2               	movwf	?__tdiv_to_l_+2
  6479  1776  3000               	movlw	0
  6480  1777  00F1               	movwf	?__tdiv_to_l_+1
  6481  1778  3000               	movlw	0
  6482  1779  00F0               	movwf	?__tdiv_to_l_
  6483  177A  0008               	return
  6484  177B                     l562:	
  6485  177B  17F1               	bsf	__tdiv_to_l_@f1+1,7
  6486  177C  30FF               	movlw	255
  6487  177D  05F0               	andwf	__tdiv_to_l_@f1,f
  6488  177E  30FF               	movlw	255
  6489  177F  05F1               	andwf	__tdiv_to_l_@f1+1,f
  6490  1780  3000               	movlw	0
  6491  1781  05F2               	andwf	__tdiv_to_l_@f1+2,f
  6492  1782  17F4               	bsf	__tdiv_to_l_@f2+1,7
  6493  1783  30FF               	movlw	255
  6494  1784  05F3               	andwf	__tdiv_to_l_@f2,f
  6495  1785  30FF               	movlw	255
  6496  1786  05F4               	andwf	__tdiv_to_l_@f2+1,f
  6497  1787  3000               	movlw	0
  6498  1788  05F5               	andwf	__tdiv_to_l_@f2+2,f
  6499  1789  3000               	movlw	0
  6500  178A  00A3               	movwf	__tdiv_to_l_@quot+3
  6501  178B  3000               	movlw	0
  6502  178C  00A2               	movwf	__tdiv_to_l_@quot+2
  6503  178D  3000               	movlw	0
  6504  178E  00A1               	movwf	__tdiv_to_l_@quot+1
  6505  178F  3000               	movlw	0
  6506  1790  00A0               	movwf	__tdiv_to_l_@quot
  6507  1791  307F               	movlw	127
  6508  1792  02A5               	subwf	__tdiv_to_l_@exp1,f
  6509  1793  3098               	movlw	152
  6510  1794  0724               	addwf	__tdiv_to_l_@cntr,w
  6511  1795  00F6               	movwf	??__tdiv_to_l_
  6512  1796  0876               	movf	??__tdiv_to_l_,w
  6513  1797  02A5               	subwf	__tdiv_to_l_@exp1,f
  6514  1798  3018               	movlw	24
  6515  1799  00F6               	movwf	??__tdiv_to_l_
  6516  179A  0876               	movf	??__tdiv_to_l_,w
  6517  179B  00A4               	movwf	__tdiv_to_l_@cntr
  6518  179C                     l2510:	
  6519  179C  3001               	movlw	1
  6520  179D                     u3205:	
  6521  179D  35A0               	lslf	__tdiv_to_l_@quot,f
  6522  179E  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  6523  179F  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  6524  17A0  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  6525  17A1  0B89               	decfsz	9,f
  6526  17A2  2F9D               	goto	u3205
  6527  17A3  0875               	movf	__tdiv_to_l_@f2+2,w
  6528  17A4  0272               	subwf	__tdiv_to_l_@f1+2,w
  6529  17A5  1D03               	skipz
  6530  17A6  2FAD               	goto	u3215
  6531  17A7  0874               	movf	__tdiv_to_l_@f2+1,w
  6532  17A8  0271               	subwf	__tdiv_to_l_@f1+1,w
  6533  17A9  1D03               	skipz
  6534  17AA  2FAD               	goto	u3215
  6535  17AB  0873               	movf	__tdiv_to_l_@f2,w
  6536  17AC  0270               	subwf	__tdiv_to_l_@f1,w
  6537  17AD                     u3215:	
  6538  17AD  1C03               	skipc
  6539  17AE  2FB6               	goto	l2518
  6540  17AF  0873               	movf	__tdiv_to_l_@f2,w
  6541  17B0  02F0               	subwf	__tdiv_to_l_@f1,f
  6542  17B1  0874               	movf	__tdiv_to_l_@f2+1,w
  6543  17B2  3BF1               	subwfb	__tdiv_to_l_@f1+1,f
  6544  17B3  0875               	movf	__tdiv_to_l_@f2+2,w
  6545  17B4  3BF2               	subwfb	__tdiv_to_l_@f1+2,f
  6546  17B5  1420               	bsf	__tdiv_to_l_@quot,0
  6547  17B6                     l2518:	
  6548  17B6  3001               	movlw	1
  6549  17B7                     u3225:	
  6550  17B7  35F0               	lslf	__tdiv_to_l_@f1,f
  6551  17B8  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  6552  17B9  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  6553  17BA  0B89               	decfsz	9,f
  6554  17BB  2FB7               	goto	u3225
  6555  17BC  3001               	movlw	1
  6556  17BD  02A4               	subwf	__tdiv_to_l_@cntr,f
  6557  17BE  1D03               	btfss	3,2
  6558  17BF  2F9C               	goto	l2510
  6559  17C0  1FA5               	btfss	__tdiv_to_l_@exp1,7
  6560  17C1  2FDE               	goto	l2530
  6561  17C2  0825               	movf	__tdiv_to_l_@exp1,w
  6562  17C3  3A80               	xorlw	128
  6563  17C4  3E97               	addlw	151
  6564  17C5  1803               	skipnc
  6565  17C6  2FD0               	goto	l2528
  6566  17C7  3000               	movlw	0
  6567  17C8  00F3               	movwf	?__tdiv_to_l_+3
  6568  17C9  3000               	movlw	0
  6569  17CA  00F2               	movwf	?__tdiv_to_l_+2
  6570  17CB  3000               	movlw	0
  6571  17CC  00F1               	movwf	?__tdiv_to_l_+1
  6572  17CD  3000               	movlw	0
  6573  17CE  00F0               	movwf	?__tdiv_to_l_
  6574  17CF  0008               	return
  6575  17D0                     l2528:	
  6576  17D0  3001               	movlw	1
  6577  17D1                     u3265:	
  6578  17D1  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  6579  17D2  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  6580  17D3  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  6581  17D4  0CA0               	rrf	__tdiv_to_l_@quot,f
  6582  17D5  0B89               	decfsz	9,f
  6583  17D6  2FD1               	goto	u3265
  6584  17D7  3001               	movlw	1
  6585  17D8  00F6               	movwf	??__tdiv_to_l_
  6586  17D9  0876               	movf	??__tdiv_to_l_,w
  6587  17DA  07A5               	addwf	__tdiv_to_l_@exp1,f
  6588  17DB  1903               	btfsc	3,2
  6589  17DC  2FF7               	goto	l2538
  6590  17DD  2FD0               	goto	l2528
  6591  17DE                     l2530:	
  6592  17DE  3018               	movlw	24
  6593  17DF  0225               	subwf	__tdiv_to_l_@exp1,w
  6594  17E0  1C03               	skipc
  6595  17E1  2FF4               	goto	l572
  6596  17E2  3000               	movlw	0
  6597  17E3  00F3               	movwf	?__tdiv_to_l_+3
  6598  17E4  3000               	movlw	0
  6599  17E5  00F2               	movwf	?__tdiv_to_l_+2
  6600  17E6  3000               	movlw	0
  6601  17E7  00F1               	movwf	?__tdiv_to_l_+1
  6602  17E8  3000               	movlw	0
  6603  17E9  00F0               	movwf	?__tdiv_to_l_
  6604  17EA  0008               	return
  6605  17EB                     l2536:	
  6606  17EB  3001               	movlw	1
  6607  17EC                     u3295:	
  6608  17EC  35A0               	lslf	__tdiv_to_l_@quot,f
  6609  17ED  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  6610  17EE  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  6611  17EF  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  6612  17F0  0B89               	decfsz	9,f
  6613  17F1  2FEC               	goto	u3295
  6614  17F2  3001               	movlw	1
  6615  17F3  02A5               	subwf	__tdiv_to_l_@exp1,f
  6616  17F4                     l572:	
  6617  17F4  0825               	movf	__tdiv_to_l_@exp1,w
  6618  17F5  1D03               	btfss	3,2
  6619  17F6  2FEB               	goto	l2536
  6620  17F7                     l2538:	
  6621  17F7  0823               	movf	__tdiv_to_l_@quot+3,w
  6622  17F8  00F3               	movwf	?__tdiv_to_l_+3
  6623  17F9  0822               	movf	__tdiv_to_l_@quot+2,w
  6624  17FA  00F2               	movwf	?__tdiv_to_l_+2
  6625  17FB  0821               	movf	__tdiv_to_l_@quot+1,w
  6626  17FC  00F1               	movwf	?__tdiv_to_l_+1
  6627  17FD  0820               	movf	__tdiv_to_l_@quot,w
  6628  17FE  00F0               	movwf	?__tdiv_to_l_
  6629  17FF  0008               	return
  6630  1800                     __end_of__tdiv_to_l_:	
  6631                           
  6632                           	psect	text9
  6633  094C                     __ptext9:	
  6634 ;; *************** function __div_to_l_ *****************
  6635 ;; Defined at:
  6636 ;;		line 60 in file "/Applications/microchip/xc8/v1.42/sources/common/fldivl.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;  f1              3    0[COMMON] unsigned long 
  6639 ;;  f2              3    3[COMMON] unsigned long 
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;  quot            4    0[BANK0 ] unsigned long 
  6642 ;;  exp1            1    5[BANK0 ] unsigned char 
  6643 ;;  cntr            1    4[BANK0 ] unsigned char 
  6644 ;; Return value:  Size  Location     Type
  6645 ;;                  4    0[COMMON] unsigned long 
  6646 ;; Registers used:
  6647 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6653 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;      Totals:        14       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;Total ram usage:       20 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; This function calls:
  6660 ;;		Nothing
  6661 ;; This function is called by:
  6662 ;;		_sprintf
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           
  6667                           ;psect for function __div_to_l_
  6668  094C                     __div_to_l_:	
  6669                           
  6670                           ;incstack = 0
  6671                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  6672  094C  3070               	movlw	low (__div_to_l_@f1| 0)
  6673  094D  0086               	movwf	6
  6674  094E  0187               	clrf	7
  6675  094F  3F40               	moviw [0]fsr1
  6676  0950  00F6               	movwf	??__div_to_l_
  6677  0951  3F41               	moviw [1]fsr1
  6678  0952  00F7               	movwf	??__div_to_l_+1
  6679  0953  3F42               	moviw [2]fsr1
  6680  0954  00F8               	movwf	??__div_to_l_+2
  6681  0955  3F43               	moviw [3]fsr1
  6682  0956  00F9               	movwf	??__div_to_l_+3
  6683  0957  1003               	clrc
  6684  0958  0D78               	rlf	??__div_to_l_+2,w
  6685  0959  0D79               	rlf	??__div_to_l_+3,w
  6686  095A  00FA               	movwf	??__div_to_l_+4
  6687  095B  087A               	movf	??__div_to_l_+4,w
  6688  095C  0140               	movlb	0	; select bank0
  6689  095D  00A5               	movwf	__div_to_l_@exp1
  6690  095E  0825               	movf	__div_to_l_@exp1,w
  6691  095F  1D03               	btfss	3,2
  6692  0960  296A               	goto	l2548
  6693  0961  3000               	movlw	0
  6694  0962  00F3               	movwf	?__div_to_l_+3
  6695  0963  3000               	movlw	0
  6696  0964  00F2               	movwf	?__div_to_l_+2
  6697  0965  3000               	movlw	0
  6698  0966  00F1               	movwf	?__div_to_l_+1
  6699  0967  3000               	movlw	0
  6700  0968  00F0               	movwf	?__div_to_l_
  6701  0969  0008               	return
  6702  096A                     l2548:	
  6703  096A  3073               	movlw	low (__div_to_l_@f2| 0)
  6704  096B  0086               	movwf	6
  6705  096C  0187               	clrf	7
  6706  096D  3F40               	moviw [0]fsr1
  6707  096E  00F6               	movwf	??__div_to_l_
  6708  096F  3F41               	moviw [1]fsr1
  6709  0970  00F7               	movwf	??__div_to_l_+1
  6710  0971  3F42               	moviw [2]fsr1
  6711  0972  00F8               	movwf	??__div_to_l_+2
  6712  0973  3F43               	moviw [3]fsr1
  6713  0974  00F9               	movwf	??__div_to_l_+3
  6714  0975  1003               	clrc
  6715  0976  0D78               	rlf	??__div_to_l_+2,w
  6716  0977  0D79               	rlf	??__div_to_l_+3,w
  6717  0978  00FA               	movwf	??__div_to_l_+4
  6718  0979  087A               	movf	??__div_to_l_+4,w
  6719  097A  00A4               	movwf	__div_to_l_@cntr
  6720  097B  0824               	movf	__div_to_l_@cntr,w
  6721  097C  1D03               	btfss	3,2
  6722  097D  2987               	goto	l2554
  6723  097E  3000               	movlw	0
  6724  097F  00F3               	movwf	?__div_to_l_+3
  6725  0980  3000               	movlw	0
  6726  0981  00F2               	movwf	?__div_to_l_+2
  6727  0982  3000               	movlw	0
  6728  0983  00F1               	movwf	?__div_to_l_+1
  6729  0984  3000               	movlw	0
  6730  0985  00F0               	movwf	?__div_to_l_
  6731  0986  0008               	return
  6732  0987                     l2554:	
  6733  0987  3070               	movlw	low (__div_to_l_@f1| 0)
  6734  0988  0086               	movwf	6
  6735  0989  0187               	clrf	7
  6736  098A  3000               	movlw	0
  6737  098B  0481               	iorwf	1,f
  6738  098C  3141               	addfsr 1,1
  6739  098D  3000               	movlw	0
  6740  098E  0481               	iorwf	1,f
  6741  098F  3141               	addfsr 1,1
  6742  0990  3080               	movlw	128
  6743  0991  0481               	iorwf	1,f
  6744  0992  3141               	addfsr 1,1
  6745  0993  3000               	movlw	0
  6746  0994  0481               	iorwf	1,f
  6747  0995  3070               	movlw	low (__div_to_l_@f1| 0)
  6748  0996  0086               	movwf	6
  6749  0997  0187               	clrf	7
  6750  0998  30FF               	movlw	255
  6751  0999  0581               	andwf	1,f
  6752  099A  3141               	addfsr 1,1
  6753  099B  30FF               	movlw	255
  6754  099C  0581               	andwf	1,f
  6755  099D  3141               	addfsr 1,1
  6756  099E  30FF               	movlw	255
  6757  099F  0581               	andwf	1,f
  6758  09A0  3141               	addfsr 1,1
  6759  09A1  3000               	movlw	0
  6760  09A2  0581               	andwf	1,f
  6761  09A3  3073               	movlw	low (__div_to_l_@f2| 0)
  6762  09A4  0086               	movwf	6
  6763  09A5  0187               	clrf	7
  6764  09A6  3000               	movlw	0
  6765  09A7  0481               	iorwf	1,f
  6766  09A8  3141               	addfsr 1,1
  6767  09A9  3000               	movlw	0
  6768  09AA  0481               	iorwf	1,f
  6769  09AB  3141               	addfsr 1,1
  6770  09AC  3080               	movlw	128
  6771  09AD  0481               	iorwf	1,f
  6772  09AE  3141               	addfsr 1,1
  6773  09AF  3000               	movlw	0
  6774  09B0  0481               	iorwf	1,f
  6775  09B1  3073               	movlw	low (__div_to_l_@f2| 0)
  6776  09B2  0086               	movwf	6
  6777  09B3  0187               	clrf	7
  6778  09B4  30FF               	movlw	255
  6779  09B5  0581               	andwf	1,f
  6780  09B6  3141               	addfsr 1,1
  6781  09B7  30FF               	movlw	255
  6782  09B8  0581               	andwf	1,f
  6783  09B9  3141               	addfsr 1,1
  6784  09BA  30FF               	movlw	255
  6785  09BB  0581               	andwf	1,f
  6786  09BC  3141               	addfsr 1,1
  6787  09BD  3000               	movlw	0
  6788  09BE  0581               	andwf	1,f
  6789  09BF  3000               	movlw	0
  6790  09C0  00A3               	movwf	__div_to_l_@quot+3
  6791  09C1  3000               	movlw	0
  6792  09C2  00A2               	movwf	__div_to_l_@quot+2
  6793  09C3  3000               	movlw	0
  6794  09C4  00A1               	movwf	__div_to_l_@quot+1
  6795  09C5  3000               	movlw	0
  6796  09C6  00A0               	movwf	__div_to_l_@quot
  6797  09C7  307F               	movlw	127
  6798  09C8  02A5               	subwf	__div_to_l_@exp1,f
  6799  09C9  30A0               	movlw	160
  6800  09CA  0724               	addwf	__div_to_l_@cntr,w
  6801  09CB  00F6               	movwf	??__div_to_l_
  6802  09CC  0876               	movf	??__div_to_l_,w
  6803  09CD  02A5               	subwf	__div_to_l_@exp1,f
  6804  09CE  3020               	movlw	32
  6805  09CF  00F6               	movwf	??__div_to_l_
  6806  09D0  0876               	movf	??__div_to_l_,w
  6807  09D1  00A4               	movwf	__div_to_l_@cntr
  6808  09D2                     l2564:	
  6809  09D2  3001               	movlw	1
  6810  09D3                     u3335:	
  6811  09D3  35A0               	lslf	__div_to_l_@quot,f
  6812  09D4  0DA1               	rlf	__div_to_l_@quot+1,f
  6813  09D5  0DA2               	rlf	__div_to_l_@quot+2,f
  6814  09D6  0DA3               	rlf	__div_to_l_@quot+3,f
  6815  09D7  0B89               	decfsz	9,f
  6816  09D8  29D3               	goto	u3335
  6817  09D9  3073               	movlw	low (__div_to_l_@f2| 0)
  6818  09DA  0086               	movwf	6
  6819  09DB  0187               	clrf	7
  6820  09DC  3F40               	moviw [0]fsr1
  6821  09DD  00F6               	movwf	??__div_to_l_
  6822  09DE  3F41               	moviw [1]fsr1
  6823  09DF  00F7               	movwf	??__div_to_l_+1
  6824  09E0  3F42               	moviw [2]fsr1
  6825  09E1  00F8               	movwf	??__div_to_l_+2
  6826  09E2  3F43               	moviw [3]fsr1
  6827  09E3  00F9               	movwf	??__div_to_l_+3
  6828  09E4  3070               	movlw	low (__div_to_l_@f1| 0)
  6829  09E5  0086               	movwf	6
  6830  09E6  0187               	clrf	7
  6831  09E7  3F40               	moviw [0]fsr1
  6832  09E8  00FA               	movwf	??__div_to_l_+4
  6833  09E9  3F41               	moviw [1]fsr1
  6834  09EA  00FB               	movwf	??__div_to_l_+5
  6835  09EB  3F42               	moviw [2]fsr1
  6836  09EC  00FC               	movwf	??__div_to_l_+6
  6837  09ED  3F43               	moviw [3]fsr1
  6838  09EE  00FD               	movwf	??__div_to_l_+7
  6839  09EF  0879               	movf	??__div_to_l_+3,w
  6840  09F0  027D               	subwf	??__div_to_l_+7,w
  6841  09F1  1D03               	skipz
  6842  09F2  29FD               	goto	u3345
  6843  09F3  0878               	movf	??__div_to_l_+2,w
  6844  09F4  027C               	subwf	??__div_to_l_+6,w
  6845  09F5  1D03               	skipz
  6846  09F6  29FD               	goto	u3345
  6847  09F7  0877               	movf	??__div_to_l_+1,w
  6848  09F8  027B               	subwf	??__div_to_l_+5,w
  6849  09F9  1D03               	skipz
  6850  09FA  29FD               	goto	u3345
  6851  09FB  0876               	movf	??__div_to_l_,w
  6852  09FC  027A               	subwf	??__div_to_l_+4,w
  6853  09FD                     u3345:	
  6854  09FD  1C03               	skipc
  6855  09FE  2A1A               	goto	l2572
  6856  09FF  3073               	movlw	low (__div_to_l_@f2| 0)
  6857  0A00  0086               	movwf	6
  6858  0A01  0187               	clrf	7
  6859  0A02  3F40               	moviw [0]fsr1
  6860  0A03  00F6               	movwf	??__div_to_l_
  6861  0A04  3F41               	moviw [1]fsr1
  6862  0A05  00F7               	movwf	??__div_to_l_+1
  6863  0A06  3F42               	moviw [2]fsr1
  6864  0A07  00F8               	movwf	??__div_to_l_+2
  6865  0A08  3F43               	moviw [3]fsr1
  6866  0A09  00F9               	movwf	??__div_to_l_+3
  6867  0A0A  3070               	movlw	low (__div_to_l_@f1| 0)
  6868  0A0B  0086               	movwf	6
  6869  0A0C  0187               	clrf	7
  6870  0A0D  0876               	movf	??__div_to_l_,w
  6871  0A0E  0281               	subwf	1,f
  6872  0A0F  3141               	addfsr 1,1
  6873  0A10  0877               	movf	??__div_to_l_+1,w
  6874  0A11  3B81               	subwfb	1,f
  6875  0A12  3141               	addfsr 1,1
  6876  0A13  0878               	movf	??__div_to_l_+2,w
  6877  0A14  3B81               	subwfb	1,f
  6878  0A15  3141               	addfsr 1,1
  6879  0A16  0879               	movf	??__div_to_l_+3,w
  6880  0A17  3B81               	subwfb	1,f
  6881  0A18  317D               	addfsr 1,-3
  6882  0A19  1420               	bsf	__div_to_l_@quot,0
  6883  0A1A                     l2572:	
  6884  0A1A  3070               	movlw	low (__div_to_l_@f1| 0)
  6885  0A1B  0086               	movwf	6
  6886  0A1C  0187               	clrf	7
  6887  0A1D  3581               	lslf	1,f
  6888  0A1E  3141               	addfsr 1,1
  6889  0A1F  0D81               	rlf	1,f
  6890  0A20  3141               	addfsr 1,1
  6891  0A21  0D81               	rlf	1,f
  6892  0A22  3141               	addfsr 1,1
  6893  0A23  0D81               	rlf	1,f
  6894  0A24  317D               	addfsr 1,-3
  6895  0A25  3001               	movlw	1
  6896  0A26  02A4               	subwf	__div_to_l_@cntr,f
  6897  0A27  1D03               	btfss	3,2
  6898  0A28  29D2               	goto	l2564
  6899  0A29  1FA5               	btfss	__div_to_l_@exp1,7
  6900  0A2A  2A47               	goto	l2584
  6901  0A2B  0825               	movf	__div_to_l_@exp1,w
  6902  0A2C  3A80               	xorlw	128
  6903  0A2D  3E9F               	addlw	159
  6904  0A2E  1803               	skipnc
  6905  0A2F  2A39               	goto	l2582
  6906  0A30  3000               	movlw	0
  6907  0A31  00F3               	movwf	?__div_to_l_+3
  6908  0A32  3000               	movlw	0
  6909  0A33  00F2               	movwf	?__div_to_l_+2
  6910  0A34  3000               	movlw	0
  6911  0A35  00F1               	movwf	?__div_to_l_+1
  6912  0A36  3000               	movlw	0
  6913  0A37  00F0               	movwf	?__div_to_l_
  6914  0A38  0008               	return
  6915  0A39                     l2582:	
  6916  0A39  3001               	movlw	1
  6917  0A3A                     u3385:	
  6918  0A3A  36A3               	lsrf	__div_to_l_@quot+3,f
  6919  0A3B  0CA2               	rrf	__div_to_l_@quot+2,f
  6920  0A3C  0CA1               	rrf	__div_to_l_@quot+1,f
  6921  0A3D  0CA0               	rrf	__div_to_l_@quot,f
  6922  0A3E  0B89               	decfsz	9,f
  6923  0A3F  2A3A               	goto	u3385
  6924  0A40  3001               	movlw	1
  6925  0A41  00F6               	movwf	??__div_to_l_
  6926  0A42  0876               	movf	??__div_to_l_,w
  6927  0A43  07A5               	addwf	__div_to_l_@exp1,f
  6928  0A44  1903               	btfsc	3,2
  6929  0A45  2A60               	goto	l2592
  6930  0A46  2A39               	goto	l2582
  6931  0A47                     l2584:	
  6932  0A47  3020               	movlw	32
  6933  0A48  0225               	subwf	__div_to_l_@exp1,w
  6934  0A49  1C03               	skipc
  6935  0A4A  2A5D               	goto	l493
  6936  0A4B  3000               	movlw	0
  6937  0A4C  00F3               	movwf	?__div_to_l_+3
  6938  0A4D  3000               	movlw	0
  6939  0A4E  00F2               	movwf	?__div_to_l_+2
  6940  0A4F  3000               	movlw	0
  6941  0A50  00F1               	movwf	?__div_to_l_+1
  6942  0A51  3000               	movlw	0
  6943  0A52  00F0               	movwf	?__div_to_l_
  6944  0A53  0008               	return
  6945  0A54                     l2590:	
  6946  0A54  3001               	movlw	1
  6947  0A55                     u3415:	
  6948  0A55  35A0               	lslf	__div_to_l_@quot,f
  6949  0A56  0DA1               	rlf	__div_to_l_@quot+1,f
  6950  0A57  0DA2               	rlf	__div_to_l_@quot+2,f
  6951  0A58  0DA3               	rlf	__div_to_l_@quot+3,f
  6952  0A59  0B89               	decfsz	9,f
  6953  0A5A  2A55               	goto	u3415
  6954  0A5B  3001               	movlw	1
  6955  0A5C  02A5               	subwf	__div_to_l_@exp1,f
  6956  0A5D                     l493:	
  6957  0A5D  0825               	movf	__div_to_l_@exp1,w
  6958  0A5E  1D03               	btfss	3,2
  6959  0A5F  2A54               	goto	l2590
  6960  0A60                     l2592:	
  6961  0A60  0823               	movf	__div_to_l_@quot+3,w
  6962  0A61  00F3               	movwf	?__div_to_l_+3
  6963  0A62  0822               	movf	__div_to_l_@quot+2,w
  6964  0A63  00F2               	movwf	?__div_to_l_+2
  6965  0A64  0821               	movf	__div_to_l_@quot+1,w
  6966  0A65  00F1               	movwf	?__div_to_l_+1
  6967  0A66  0820               	movf	__div_to_l_@quot,w
  6968  0A67  00F0               	movwf	?__div_to_l_
  6969  0A68  0008               	return
  6970  0A69                     __end_of__div_to_l_:	
  6971                           
  6972                           	psect	text10
  6973  1318                     __ptext10:	
  6974 ;; *************** function ___lltoft *****************
  6975 ;; Defined at:
  6976 ;;		line 35 in file "/Applications/microchip/xc8/v1.42/sources/common/lltoft.c"
  6977 ;; Parameters:    Size  Location     Type
  6978 ;;  c               4    8[COMMON] unsigned long 
  6979 ;; Auto vars:     Size  Location     Type
  6980 ;;  exp             1   13[COMMON] unsigned char 
  6981 ;; Return value:  Size  Location     Type
  6982 ;;                  3    8[COMMON] float 
  6983 ;; Registers used:
  6984 ;;		wreg, status,2, status,0, pclath, cstack
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/0
  6987 ;;		On exit  : 0/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6990 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6991 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;Total ram usage:        6 bytes
  6995 ;; Hardware stack levels used:    1
  6996 ;; Hardware stack levels required when called:    1
  6997 ;; This function calls:
  6998 ;;		___ftpack
  6999 ;; This function is called by:
  7000 ;;		_sprintf
  7001 ;; This function uses a non-reentrant model
  7002 ;;
  7003                           
  7004                           
  7005                           ;psect for function ___lltoft
  7006  1318                     ___lltoft:	
  7007                           
  7008                           ;incstack = 0
  7009                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  7010  1318  308E               	movlw	142
  7011  1319  00FC               	movwf	??___lltoft
  7012  131A  087C               	movf	??___lltoft,w
  7013  131B  00FD               	movwf	___lltoft@exp
  7014  131C                     l2764:	
  7015  131C  30FF               	movlw	255
  7016  131D  057B               	andwf	___lltoft@c+3,w
  7017  131E  1903               	btfsc	3,2
  7018  131F  2B2C               	goto	l2766
  7019  1320  3001               	movlw	1
  7020  1321                     u3795:	
  7021  1321  36FB               	lsrf	___lltoft@c+3,f
  7022  1322  0CFA               	rrf	___lltoft@c+2,f
  7023  1323  0CF9               	rrf	___lltoft@c+1,f
  7024  1324  0CF8               	rrf	___lltoft@c,f
  7025  1325  0B89               	decfsz	9,f
  7026  1326  2B21               	goto	u3795
  7027  1327  3001               	movlw	1
  7028  1328  00FC               	movwf	??___lltoft
  7029  1329  087C               	movf	??___lltoft,w
  7030  132A  07FD               	addwf	___lltoft@exp,f
  7031  132B  2B1C               	goto	l2764
  7032  132C                     l2766:	
  7033  132C  0878               	movf	___lltoft@c,w
  7034  132D  00F0               	movwf	___ftpack@arg
  7035  132E  0879               	movf	___lltoft@c+1,w
  7036  132F  00F1               	movwf	___ftpack@arg+1
  7037  1330  087A               	movf	___lltoft@c+2,w
  7038  1331  00F2               	movwf	___ftpack@arg+2
  7039  1332  087D               	movf	___lltoft@exp,w
  7040  1333  00FC               	movwf	??___lltoft
  7041  1334  087C               	movf	??___lltoft,w
  7042  1335  00F3               	movwf	___ftpack@exp
  7043  1336  01F4               	clrf	___ftpack@sign
  7044  1337  3195  2502         	fcall	___ftpack
  7045  1339  0870               	movf	?___ftpack,w
  7046  133A  00F8               	movwf	?___lltoft
  7047  133B  0871               	movf	?___ftpack+1,w
  7048  133C  00F9               	movwf	?___lltoft+1
  7049  133D  0872               	movf	?___ftpack+2,w
  7050  133E  00FA               	movwf	?___lltoft+2
  7051  133F  0008               	return
  7052  1340                     __end_of___lltoft:	
  7053                           
  7054                           	psect	text11
  7055  1429                     __ptext11:	
  7056 ;; *************** function ___llmod *****************
  7057 ;; Defined at:
  7058 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/llmod.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;  divisor         4    0[COMMON] unsigned long 
  7061 ;;  dividend        4    4[COMMON] unsigned long 
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;  counter         1    9[COMMON] unsigned char 
  7064 ;; Return value:  Size  Location     Type
  7065 ;;                  4    0[COMMON] unsigned long 
  7066 ;; Registers used:
  7067 ;;		wreg, status,2, status,0
  7068 ;; Tracked objects:
  7069 ;;		On entry : 0/0
  7070 ;;		On exit  : 0/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7073 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7077 ;;Total ram usage:       10 bytes
  7078 ;; Hardware stack levels used:    1
  7079 ;; This function calls:
  7080 ;;		Nothing
  7081 ;; This function is called by:
  7082 ;;		_sprintf
  7083 ;; This function uses a non-reentrant model
  7084 ;;
  7085                           
  7086                           
  7087                           ;psect for function ___llmod
  7088  1429                     ___llmod:	
  7089                           
  7090                           ;incstack = 0
  7091                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7092  1429  0873               	movf	___llmod@divisor+3,w
  7093  142A  0472               	iorwf	___llmod@divisor+2,w
  7094  142B  0471               	iorwf	___llmod@divisor+1,w
  7095  142C  0470               	iorwf	___llmod@divisor,w
  7096  142D  1903               	skipnz
  7097  142E  2C62               	goto	l2756
  7098  142F  01F9               	clrf	___llmod@counter
  7099  1430  0AF9               	incf	___llmod@counter,f
  7100  1431                     l2746:	
  7101  1431  1BF3               	btfsc	___llmod@divisor+3,7
  7102  1432  2C3F               	goto	l2748
  7103  1433  3001               	movlw	1
  7104  1434                     u3745:	
  7105  1434  35F0               	lslf	___llmod@divisor,f
  7106  1435  0DF1               	rlf	___llmod@divisor+1,f
  7107  1436  0DF2               	rlf	___llmod@divisor+2,f
  7108  1437  0DF3               	rlf	___llmod@divisor+3,f
  7109  1438  0B89               	decfsz	9,f
  7110  1439  2C34               	goto	u3745
  7111  143A  3001               	movlw	1
  7112  143B  00F8               	movwf	??___llmod
  7113  143C  0878               	movf	??___llmod,w
  7114  143D  07F9               	addwf	___llmod@counter,f
  7115  143E  2C31               	goto	l2746
  7116  143F                     l2748:	
  7117  143F  0873               	movf	___llmod@divisor+3,w
  7118  1440  0277               	subwf	___llmod@dividend+3,w
  7119  1441  1D03               	skipz
  7120  1442  2C4D               	goto	u3765
  7121  1443  0872               	movf	___llmod@divisor+2,w
  7122  1444  0276               	subwf	___llmod@dividend+2,w
  7123  1445  1D03               	skipz
  7124  1446  2C4D               	goto	u3765
  7125  1447  0871               	movf	___llmod@divisor+1,w
  7126  1448  0275               	subwf	___llmod@dividend+1,w
  7127  1449  1D03               	skipz
  7128  144A  2C4D               	goto	u3765
  7129  144B  0870               	movf	___llmod@divisor,w
  7130  144C  0274               	subwf	___llmod@dividend,w
  7131  144D                     u3765:	
  7132  144D  1C03               	skipc
  7133  144E  2C57               	goto	l2752
  7134  144F  0870               	movf	___llmod@divisor,w
  7135  1450  02F4               	subwf	___llmod@dividend,f
  7136  1451  0871               	movf	___llmod@divisor+1,w
  7137  1452  3BF5               	subwfb	___llmod@dividend+1,f
  7138  1453  0872               	movf	___llmod@divisor+2,w
  7139  1454  3BF6               	subwfb	___llmod@dividend+2,f
  7140  1455  0873               	movf	___llmod@divisor+3,w
  7141  1456  3BF7               	subwfb	___llmod@dividend+3,f
  7142  1457                     l2752:	
  7143  1457  3001               	movlw	1
  7144  1458                     u3775:	
  7145  1458  36F3               	lsrf	___llmod@divisor+3,f
  7146  1459  0CF2               	rrf	___llmod@divisor+2,f
  7147  145A  0CF1               	rrf	___llmod@divisor+1,f
  7148  145B  0CF0               	rrf	___llmod@divisor,f
  7149  145C  0B89               	decfsz	9,f
  7150  145D  2C58               	goto	u3775
  7151  145E  3001               	movlw	1
  7152  145F  02F9               	subwf	___llmod@counter,f
  7153  1460  1D03               	btfss	3,2
  7154  1461  2C3F               	goto	l2748
  7155  1462                     l2756:	
  7156  1462  0877               	movf	___llmod@dividend+3,w
  7157  1463  00F3               	movwf	?___llmod+3
  7158  1464  0876               	movf	___llmod@dividend+2,w
  7159  1465  00F2               	movwf	?___llmod+2
  7160  1466  0875               	movf	___llmod@dividend+1,w
  7161  1467  00F1               	movwf	?___llmod+1
  7162  1468  0874               	movf	___llmod@dividend,w
  7163  1469  00F0               	movwf	?___llmod
  7164  146A  0008               	return
  7165  146B                     __end_of___llmod:	
  7166                           
  7167                           	psect	text12
  7168  14B0                     __ptext12:	
  7169 ;; *************** function ___lldiv *****************
  7170 ;; Defined at:
  7171 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lldiv.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;  divisor         4    0[COMMON] unsigned long 
  7174 ;;  dividend        4    4[COMMON] unsigned long 
  7175 ;; Auto vars:     Size  Location     Type
  7176 ;;  quotient        4    9[COMMON] unsigned long 
  7177 ;;  counter         1   13[COMMON] unsigned char 
  7178 ;; Return value:  Size  Location     Type
  7179 ;;                  4    0[COMMON] unsigned long 
  7180 ;; Registers used:
  7181 ;;		wreg, status,2, status,0
  7182 ;; Tracked objects:
  7183 ;;		On entry : 0/0
  7184 ;;		On exit  : 0/0
  7185 ;;		Unchanged: 0/0
  7186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7187 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7188 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7189 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7190 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7191 ;;Total ram usage:       14 bytes
  7192 ;; Hardware stack levels used:    1
  7193 ;; This function calls:
  7194 ;;		Nothing
  7195 ;; This function is called by:
  7196 ;;		_sprintf
  7197 ;; This function uses a non-reentrant model
  7198 ;;
  7199                           
  7200                           
  7201                           ;psect for function ___lldiv
  7202  14B0                     ___lldiv:	
  7203                           
  7204                           ;incstack = 0
  7205                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7206  14B0  3000               	movlw	0
  7207  14B1  00FC               	movwf	___lldiv@quotient+3
  7208  14B2  3000               	movlw	0
  7209  14B3  00FB               	movwf	___lldiv@quotient+2
  7210  14B4  3000               	movlw	0
  7211  14B5  00FA               	movwf	___lldiv@quotient+1
  7212  14B6  3000               	movlw	0
  7213  14B7  00F9               	movwf	___lldiv@quotient
  7214  14B8  0873               	movf	___lldiv@divisor+3,w
  7215  14B9  0472               	iorwf	___lldiv@divisor+2,w
  7216  14BA  0471               	iorwf	___lldiv@divisor+1,w
  7217  14BB  0470               	iorwf	___lldiv@divisor,w
  7218  14BC  1903               	skipnz
  7219  14BD  2CF9               	goto	l2736
  7220  14BE  01FD               	clrf	___lldiv@counter
  7221  14BF  0AFD               	incf	___lldiv@counter,f
  7222  14C0                     l2722:	
  7223  14C0  1BF3               	btfsc	___lldiv@divisor+3,7
  7224  14C1  2CCE               	goto	l2724
  7225  14C2  3001               	movlw	1
  7226  14C3                     u3675:	
  7227  14C3  35F0               	lslf	___lldiv@divisor,f
  7228  14C4  0DF1               	rlf	___lldiv@divisor+1,f
  7229  14C5  0DF2               	rlf	___lldiv@divisor+2,f
  7230  14C6  0DF3               	rlf	___lldiv@divisor+3,f
  7231  14C7  0B89               	decfsz	9,f
  7232  14C8  2CC3               	goto	u3675
  7233  14C9  3001               	movlw	1
  7234  14CA  00F8               	movwf	??___lldiv
  7235  14CB  0878               	movf	??___lldiv,w
  7236  14CC  07FD               	addwf	___lldiv@counter,f
  7237  14CD  2CC0               	goto	l2722
  7238  14CE                     l2724:	
  7239  14CE  3001               	movlw	1
  7240  14CF                     u3695:	
  7241  14CF  35F9               	lslf	___lldiv@quotient,f
  7242  14D0  0DFA               	rlf	___lldiv@quotient+1,f
  7243  14D1  0DFB               	rlf	___lldiv@quotient+2,f
  7244  14D2  0DFC               	rlf	___lldiv@quotient+3,f
  7245  14D3  0B89               	decfsz	9,f
  7246  14D4  2CCF               	goto	u3695
  7247  14D5  0873               	movf	___lldiv@divisor+3,w
  7248  14D6  0277               	subwf	___lldiv@dividend+3,w
  7249  14D7  1D03               	skipz
  7250  14D8  2CE3               	goto	u3705
  7251  14D9  0872               	movf	___lldiv@divisor+2,w
  7252  14DA  0276               	subwf	___lldiv@dividend+2,w
  7253  14DB  1D03               	skipz
  7254  14DC  2CE3               	goto	u3705
  7255  14DD  0871               	movf	___lldiv@divisor+1,w
  7256  14DE  0275               	subwf	___lldiv@dividend+1,w
  7257  14DF  1D03               	skipz
  7258  14E0  2CE3               	goto	u3705
  7259  14E1  0870               	movf	___lldiv@divisor,w
  7260  14E2  0274               	subwf	___lldiv@dividend,w
  7261  14E3                     u3705:	
  7262  14E3  1C03               	skipc
  7263  14E4  2CEE               	goto	l2732
  7264  14E5  0870               	movf	___lldiv@divisor,w
  7265  14E6  02F4               	subwf	___lldiv@dividend,f
  7266  14E7  0871               	movf	___lldiv@divisor+1,w
  7267  14E8  3BF5               	subwfb	___lldiv@dividend+1,f
  7268  14E9  0872               	movf	___lldiv@divisor+2,w
  7269  14EA  3BF6               	subwfb	___lldiv@dividend+2,f
  7270  14EB  0873               	movf	___lldiv@divisor+3,w
  7271  14EC  3BF7               	subwfb	___lldiv@dividend+3,f
  7272  14ED  1479               	bsf	___lldiv@quotient,0
  7273  14EE                     l2732:	
  7274  14EE  3001               	movlw	1
  7275  14EF                     u3715:	
  7276  14EF  36F3               	lsrf	___lldiv@divisor+3,f
  7277  14F0  0CF2               	rrf	___lldiv@divisor+2,f
  7278  14F1  0CF1               	rrf	___lldiv@divisor+1,f
  7279  14F2  0CF0               	rrf	___lldiv@divisor,f
  7280  14F3  0B89               	decfsz	9,f
  7281  14F4  2CEF               	goto	u3715
  7282  14F5  3001               	movlw	1
  7283  14F6  02FD               	subwf	___lldiv@counter,f
  7284  14F7  1D03               	btfss	3,2
  7285  14F8  2CCE               	goto	l2724
  7286  14F9                     l2736:	
  7287  14F9  087C               	movf	___lldiv@quotient+3,w
  7288  14FA  00F3               	movwf	?___lldiv+3
  7289  14FB  087B               	movf	___lldiv@quotient+2,w
  7290  14FC  00F2               	movwf	?___lldiv+2
  7291  14FD  087A               	movf	___lldiv@quotient+1,w
  7292  14FE  00F1               	movwf	?___lldiv+1
  7293  14FF  0879               	movf	___lldiv@quotient,w
  7294  1500  00F0               	movwf	?___lldiv
  7295  1501  0008               	return
  7296  1502                     __end_of___lldiv:	
  7297                           
  7298                           	psect	text13
  7299  1566                     __ptext13:	
  7300 ;; *************** function ___fttol *****************
  7301 ;; Defined at:
  7302 ;;		line 44 in file "/Applications/microchip/xc8/v1.42/sources/common/fttol.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;  f1              3   33[BANK0 ] float 
  7305 ;; Auto vars:     Size  Location     Type
  7306 ;;  lval            4   42[BANK0 ] unsigned long 
  7307 ;;  exp1            1   46[BANK0 ] unsigned char 
  7308 ;;  sign1           1   41[BANK0 ] unsigned char 
  7309 ;; Return value:  Size  Location     Type
  7310 ;;                  4   33[BANK0 ] long 
  7311 ;; Registers used:
  7312 ;;		wreg, status,2, status,0
  7313 ;; Tracked objects:
  7314 ;;		On entry : 0/0
  7315 ;;		On exit  : 0/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7318 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7319 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;Total ram usage:       14 bytes
  7323 ;; Hardware stack levels used:    1
  7324 ;; This function calls:
  7325 ;;		Nothing
  7326 ;; This function is called by:
  7327 ;;		_sprintf
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           
  7332                           ;psect for function ___fttol
  7333  1566                     ___fttol:	
  7334                           
  7335                           ;incstack = 0
  7336                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7337  1566  0140               	movlb	0	; select bank0
  7338  1567  0841               	movf	___fttol@f1,w
  7339  1568  00C5               	movwf	??___fttol
  7340  1569  0842               	movf	___fttol@f1+1,w
  7341  156A  00C6               	movwf	??___fttol+1
  7342  156B  0843               	movf	___fttol@f1+2,w
  7343  156C  00C7               	movwf	??___fttol+2
  7344  156D  1003               	clrc
  7345  156E  0D46               	rlf	??___fttol+1,w
  7346  156F  0D47               	rlf	??___fttol+2,w
  7347  1570  00C8               	movwf	??___fttol+3
  7348  1571  0848               	movf	??___fttol+3,w
  7349  1572  00CE               	movwf	___fttol@exp1
  7350  1573  084E               	movf	___fttol@exp1,w
  7351  1574  1D03               	btfss	3,2
  7352  1575  2D7F               	goto	l2680
  7353  1576  3000               	movlw	0
  7354  1577  00C4               	movwf	?___fttol+3
  7355  1578  3000               	movlw	0
  7356  1579  00C3               	movwf	?___fttol+2
  7357  157A  3000               	movlw	0
  7358  157B  00C2               	movwf	?___fttol+1
  7359  157C  3000               	movlw	0
  7360  157D  00C1               	movwf	?___fttol
  7361  157E  0008               	return
  7362  157F                     l2680:	
  7363  157F  0841               	movf	___fttol@f1,w
  7364  1580  00C5               	movwf	??___fttol
  7365  1581  0842               	movf	___fttol@f1+1,w
  7366  1582  00C6               	movwf	??___fttol+1
  7367  1583  0843               	movf	___fttol@f1+2,w
  7368  1584  00C7               	movwf	??___fttol+2
  7369  1585  3017               	movlw	23
  7370  1586                     u3575:	
  7371  1586  36C7               	lsrf	??___fttol+2,f
  7372  1587  0CC6               	rrf	??___fttol+1,f
  7373  1588  0CC5               	rrf	??___fttol,f
  7374  1589  0B89               	decfsz	9,f
  7375  158A  2D86               	goto	u3575
  7376  158B  0845               	movf	??___fttol,w
  7377  158C  00C8               	movwf	??___fttol+3
  7378  158D  0848               	movf	??___fttol+3,w
  7379  158E  00C9               	movwf	___fttol@sign1
  7380  158F  17C2               	bsf	___fttol@f1+1,7
  7381  1590  30FF               	movlw	255
  7382  1591  05C1               	andwf	___fttol@f1,f
  7383  1592  30FF               	movlw	255
  7384  1593  05C2               	andwf	___fttol@f1+1,f
  7385  1594  3000               	movlw	0
  7386  1595  05C3               	andwf	___fttol@f1+2,f
  7387  1596  0841               	movf	___fttol@f1,w
  7388  1597  00CA               	movwf	___fttol@lval
  7389  1598  0842               	movf	___fttol@f1+1,w
  7390  1599  00CB               	movwf	___fttol@lval+1
  7391  159A  0843               	movf	___fttol@f1+2,w
  7392  159B  00CC               	movwf	___fttol@lval+2
  7393  159C  01CD               	clrf	___fttol@lval+3
  7394  159D  308E               	movlw	142
  7395  159E  02CE               	subwf	___fttol@exp1,f
  7396  159F  1FCE               	btfss	___fttol@exp1,7
  7397  15A0  2DBD               	goto	l2700
  7398  15A1  084E               	movf	___fttol@exp1,w
  7399  15A2  3A80               	xorlw	128
  7400  15A3  3E8F               	addlw	143
  7401  15A4  1803               	skipnc
  7402  15A5  2DAF               	goto	l2698
  7403  15A6  3000               	movlw	0
  7404  15A7  00C4               	movwf	?___fttol+3
  7405  15A8  3000               	movlw	0
  7406  15A9  00C3               	movwf	?___fttol+2
  7407  15AA  3000               	movlw	0
  7408  15AB  00C2               	movwf	?___fttol+1
  7409  15AC  3000               	movlw	0
  7410  15AD  00C1               	movwf	?___fttol
  7411  15AE  0008               	return
  7412  15AF                     l2698:	
  7413  15AF  3001               	movlw	1
  7414  15B0                     u3605:	
  7415  15B0  36CD               	lsrf	___fttol@lval+3,f
  7416  15B1  0CCC               	rrf	___fttol@lval+2,f
  7417  15B2  0CCB               	rrf	___fttol@lval+1,f
  7418  15B3  0CCA               	rrf	___fttol@lval,f
  7419  15B4  0B89               	decfsz	9,f
  7420  15B5  2DB0               	goto	u3605
  7421  15B6  3001               	movlw	1
  7422  15B7  00C5               	movwf	??___fttol
  7423  15B8  0845               	movf	??___fttol,w
  7424  15B9  07CE               	addwf	___fttol@exp1,f
  7425  15BA  1903               	btfsc	3,2
  7426  15BB  2DD6               	goto	l2708
  7427  15BC  2DAF               	goto	l2698
  7428  15BD                     l2700:	
  7429  15BD  3018               	movlw	24
  7430  15BE  024E               	subwf	___fttol@exp1,w
  7431  15BF  1C03               	skipc
  7432  15C0  2DD3               	goto	l613
  7433  15C1  3000               	movlw	0
  7434  15C2  00C4               	movwf	?___fttol+3
  7435  15C3  3000               	movlw	0
  7436  15C4  00C3               	movwf	?___fttol+2
  7437  15C5  3000               	movlw	0
  7438  15C6  00C2               	movwf	?___fttol+1
  7439  15C7  3000               	movlw	0
  7440  15C8  00C1               	movwf	?___fttol
  7441  15C9  0008               	return
  7442  15CA                     l2706:	
  7443  15CA  3001               	movlw	1
  7444  15CB                     u3635:	
  7445  15CB  35CA               	lslf	___fttol@lval,f
  7446  15CC  0DCB               	rlf	___fttol@lval+1,f
  7447  15CD  0DCC               	rlf	___fttol@lval+2,f
  7448  15CE  0DCD               	rlf	___fttol@lval+3,f
  7449  15CF  0B89               	decfsz	9,f
  7450  15D0  2DCB               	goto	u3635
  7451  15D1  3001               	movlw	1
  7452  15D2  02CE               	subwf	___fttol@exp1,f
  7453  15D3                     l613:	
  7454  15D3  084E               	movf	___fttol@exp1,w
  7455  15D4  1D03               	btfss	3,2
  7456  15D5  2DCA               	goto	l2706
  7457  15D6                     l2708:	
  7458  15D6  0849               	movf	___fttol@sign1,w
  7459  15D7  1903               	btfsc	3,2
  7460  15D8  2DE4               	goto	l2712
  7461  15D9  09CA               	comf	___fttol@lval,f
  7462  15DA  09CB               	comf	___fttol@lval+1,f
  7463  15DB  09CC               	comf	___fttol@lval+2,f
  7464  15DC  09CD               	comf	___fttol@lval+3,f
  7465  15DD  0ACA               	incf	___fttol@lval,f
  7466  15DE  1903               	skipnz
  7467  15DF  0ACB               	incf	___fttol@lval+1,f
  7468  15E0  1903               	skipnz
  7469  15E1  0ACC               	incf	___fttol@lval+2,f
  7470  15E2  1903               	skipnz
  7471  15E3  0ACD               	incf	___fttol@lval+3,f
  7472  15E4                     l2712:	
  7473  15E4  084D               	movf	___fttol@lval+3,w
  7474  15E5  00C4               	movwf	?___fttol+3
  7475  15E6  084C               	movf	___fttol@lval+2,w
  7476  15E7  00C3               	movwf	?___fttol+2
  7477  15E8  084B               	movf	___fttol@lval+1,w
  7478  15E9  00C2               	movwf	?___fttol+1
  7479  15EA  084A               	movf	___fttol@lval,w
  7480  15EB  00C1               	movwf	?___fttol
  7481  15EC  0008               	return
  7482  15ED                     __end_of___fttol:	
  7483                           
  7484                           	psect	text14
  7485  12B6                     __ptext14:	
  7486 ;; *************** function ___ftsub *****************
  7487 ;; Defined at:
  7488 ;;		line 18 in file "/Applications/microchip/xc8/v1.42/sources/common/ftsub.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;  f2              3   53[BANK0 ] float 
  7491 ;;  f1              3   56[BANK0 ] float 
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;		None
  7494 ;; Return value:  Size  Location     Type
  7495 ;;                  3   53[BANK0 ] float 
  7496 ;; Registers used:
  7497 ;;		wreg, status,2, status,0, pclath, cstack
  7498 ;; Tracked objects:
  7499 ;;		On entry : 0/0
  7500 ;;		On exit  : 0/0
  7501 ;;		Unchanged: 0/0
  7502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7503 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7506 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7507 ;;Total ram usage:        6 bytes
  7508 ;; Hardware stack levels used:    1
  7509 ;; Hardware stack levels required when called:    2
  7510 ;; This function calls:
  7511 ;;		___ftadd
  7512 ;; This function is called by:
  7513 ;;		_sprintf
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           
  7518                           ;psect for function ___ftsub
  7519  12B6                     ___ftsub:	
  7520                           
  7521                           ;incstack = 0
  7522                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7523  12B6  0140               	movlb	0	; select bank0
  7524  12B7  0857               	movf	___ftsub@f2+2,w
  7525  12B8  0456               	iorwf	___ftsub@f2+1,w
  7526  12B9  0455               	iorwf	___ftsub@f2,w
  7527  12BA  1903               	skipnz
  7528  12BB  2ABE               	goto	l2670
  7529  12BC  3080               	movlw	128
  7530  12BD  06D7               	xorwf	___ftsub@f2+2,f
  7531  12BE                     l2670:	
  7532  12BE  0858               	movf	___ftsub@f1,w
  7533  12BF  00C8               	movwf	___ftadd@f1
  7534  12C0  0859               	movf	___ftsub@f1+1,w
  7535  12C1  00C9               	movwf	___ftadd@f1+1
  7536  12C2  085A               	movf	___ftsub@f1+2,w
  7537  12C3  00CA               	movwf	___ftadd@f1+2
  7538  12C4  0855               	movf	___ftsub@f2,w
  7539  12C5  00CB               	movwf	___ftadd@f2
  7540  12C6  0856               	movf	___ftsub@f2+1,w
  7541  12C7  00CC               	movwf	___ftadd@f2+1
  7542  12C8  0857               	movf	___ftsub@f2+2,w
  7543  12C9  00CD               	movwf	___ftadd@f2+2
  7544  12CA  3188  2056         	fcall	___ftadd
  7545  12CC  0140               	movlb	0	; select bank0
  7546  12CD  0848               	movf	?___ftadd,w
  7547  12CE  00D5               	movwf	?___ftsub
  7548  12CF  0849               	movf	?___ftadd+1,w
  7549  12D0  00D6               	movwf	?___ftsub+1
  7550  12D1  084A               	movf	?___ftadd+2,w
  7551  12D2  00D7               	movwf	?___ftsub+2
  7552  12D3  0008               	return
  7553  12D4                     __end_of___ftsub:	
  7554                           
  7555                           	psect	text15
  7556  11CE                     __ptext15:	
  7557 ;; *************** function ___ftneg *****************
  7558 ;; Defined at:
  7559 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/ftneg.c"
  7560 ;; Parameters:    Size  Location     Type
  7561 ;;  f1              3    0[COMMON] float 
  7562 ;; Auto vars:     Size  Location     Type
  7563 ;;		None
  7564 ;; Return value:  Size  Location     Type
  7565 ;;                  3    0[COMMON] float 
  7566 ;; Registers used:
  7567 ;;		wreg
  7568 ;; Tracked objects:
  7569 ;;		On entry : 0/0
  7570 ;;		On exit  : 0/0
  7571 ;;		Unchanged: 0/0
  7572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7573 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7576 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7577 ;;Total ram usage:        3 bytes
  7578 ;; Hardware stack levels used:    1
  7579 ;; This function calls:
  7580 ;;		Nothing
  7581 ;; This function is called by:
  7582 ;;		_sprintf
  7583 ;; This function uses a non-reentrant model
  7584 ;;
  7585                           
  7586                           
  7587                           ;psect for function ___ftneg
  7588  11CE                     ___ftneg:	
  7589                           
  7590                           ;incstack = 0
  7591                           ; Regs used in ___ftneg: [wreg]
  7592  11CE  0872               	movf	___ftneg@f1+2,w
  7593  11CF  0471               	iorwf	___ftneg@f1+1,w
  7594  11D0  0470               	iorwf	___ftneg@f1,w
  7595  11D1  1903               	skipnz
  7596  11D2  0008               	return
  7597  11D3  3080               	movlw	128
  7598  11D4  06F2               	xorwf	___ftneg@f1+2,f
  7599  11D5  0008               	return
  7600  11D6                     __end_of___ftneg:	
  7601                           
  7602                           	psect	text16
  7603  136C                     __ptext16:	
  7604 ;; *************** function ___ftge *****************
  7605 ;; Defined at:
  7606 ;;		line 4 in file "/Applications/microchip/xc8/v1.42/sources/common/ftge.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;  ff1             3    0[COMMON] float 
  7609 ;;  ff2             3    3[COMMON] float 
  7610 ;; Auto vars:     Size  Location     Type
  7611 ;;		None
  7612 ;; Return value:  Size  Location     Type
  7613 ;;		None               void
  7614 ;; Registers used:
  7615 ;;		wreg, status,2, status,0
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/0
  7618 ;;		On exit  : 0/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7621 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7624 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7625 ;;Total ram usage:        9 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; This function calls:
  7628 ;;		Nothing
  7629 ;; This function is called by:
  7630 ;;		_sprintf
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634                           
  7635                           ;psect for function ___ftge
  7636  136C                     ___ftge:	
  7637                           
  7638                           ;incstack = 0
  7639                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7640  136C  1FF2               	btfss	___ftge@ff1+2,7
  7641  136D  2B82               	goto	l2642
  7642  136E  0970               	comf	___ftge@ff1,w
  7643  136F  00F6               	movwf	??___ftge
  7644  1370  0971               	comf	___ftge@ff1+1,w
  7645  1371  00F7               	movwf	??___ftge+1
  7646  1372  0972               	comf	___ftge@ff1+2,w
  7647  1373  00F8               	movwf	??___ftge+2
  7648  1374  0AF6               	incf	??___ftge,f
  7649  1375  1903               	skipnz
  7650  1376  0AF7               	incf	??___ftge+1,f
  7651  1377  1903               	skipnz
  7652  1378  0AF8               	incf	??___ftge+2,f
  7653  1379  3000               	movlw	0
  7654  137A  0776               	addwf	??___ftge,w
  7655  137B  00F0               	movwf	___ftge@ff1
  7656  137C  3000               	movlw	0
  7657  137D  3D77               	addwfc	??___ftge+1,w
  7658  137E  00F1               	movwf	___ftge@ff1+1
  7659  137F  3080               	movlw	128
  7660  1380  3D78               	addwfc	??___ftge+2,w
  7661  1381  00F2               	movwf	___ftge@ff1+2
  7662  1382                     l2642:	
  7663  1382  1FF5               	btfss	___ftge@ff2+2,7
  7664  1383  2B98               	goto	l2646
  7665  1384  0973               	comf	___ftge@ff2,w
  7666  1385  00F6               	movwf	??___ftge
  7667  1386  0974               	comf	___ftge@ff2+1,w
  7668  1387  00F7               	movwf	??___ftge+1
  7669  1388  0975               	comf	___ftge@ff2+2,w
  7670  1389  00F8               	movwf	??___ftge+2
  7671  138A  0AF6               	incf	??___ftge,f
  7672  138B  1903               	skipnz
  7673  138C  0AF7               	incf	??___ftge+1,f
  7674  138D  1903               	skipnz
  7675  138E  0AF8               	incf	??___ftge+2,f
  7676  138F  3000               	movlw	0
  7677  1390  0776               	addwf	??___ftge,w
  7678  1391  00F3               	movwf	___ftge@ff2
  7679  1392  3000               	movlw	0
  7680  1393  3D77               	addwfc	??___ftge+1,w
  7681  1394  00F4               	movwf	___ftge@ff2+1
  7682  1395  3080               	movlw	128
  7683  1396  3D78               	addwfc	??___ftge+2,w
  7684  1397  00F5               	movwf	___ftge@ff2+2
  7685  1398                     l2646:	
  7686  1398  3080               	movlw	128
  7687  1399  06F2               	xorwf	___ftge@ff1+2,f
  7688  139A  3080               	movlw	128
  7689  139B  06F5               	xorwf	___ftge@ff2+2,f
  7690  139C  0875               	movf	___ftge@ff2+2,w
  7691  139D  0272               	subwf	___ftge@ff1+2,w
  7692  139E  1D03               	skipz
  7693  139F  0008               	return
  7694  13A0  0874               	movf	___ftge@ff2+1,w
  7695  13A1  0271               	subwf	___ftge@ff1+1,w
  7696  13A2  1D03               	skipz
  7697  13A3  0008               	return
  7698  13A4  0873               	movf	___ftge@ff2,w
  7699  13A5  0270               	subwf	___ftge@ff1,w
  7700  13A6  0008               	return
  7701  13A7                     __end_of___ftge:	
  7702                           
  7703                           	psect	text17
  7704  000E                     __ptext17:	
  7705 ;; *************** function _convertTemperatureF *****************
  7706 ;; Defined at:
  7707 ;;		line 8 in file "main.h"
  7708 ;; Parameters:    Size  Location     Type
  7709 ;;  tempL           2   53[BANK0 ] unsigned short 
  7710 ;;  tempH           2   55[BANK0 ] unsigned short 
  7711 ;; Auto vars:     Size  Location     Type
  7712 ;;  tCprecise       3   62[BANK0 ] float 
  7713 ;;  temperatureC    3   59[BANK0 ] float 
  7714 ;;  binaryTemper    2   65[BANK0 ] unsigned int 
  7715 ;; Return value:  Size  Location     Type
  7716 ;;                  3   53[BANK0 ] float 
  7717 ;; Registers used:
  7718 ;;		wreg, status,2, status,0, pclath, cstack
  7719 ;; Tracked objects:
  7720 ;;		On entry : 0/0
  7721 ;;		On exit  : 0/0
  7722 ;;		Unchanged: 0/0
  7723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7724 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7725 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7726 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7727 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7728 ;;Total ram usage:       14 bytes
  7729 ;; Hardware stack levels used:    1
  7730 ;; Hardware stack levels required when called:    2
  7731 ;; This function calls:
  7732 ;;		___ftadd
  7733 ;;		___ftdiv
  7734 ;;		___ftmul
  7735 ;;		___lwtoft
  7736 ;; This function is called by:
  7737 ;;		_main
  7738 ;; This function uses a non-reentrant model
  7739 ;;
  7740                           
  7741                           
  7742                           ;psect for function _convertTemperatureF
  7743  000E                     _convertTemperatureF:	
  7744                           
  7745                           ;main.h: 9: unsigned int binaryTemperatureC = 0;
  7746                           
  7747                           ;incstack = 0
  7748                           ; Regs used in _convertTemperatureF: [wreg+status,2+status,0+pclath+cstack]
  7749  000E  0140               	movlb	0	; select bank0
  7750  000F  01E1               	clrf	convertTemperatureF@binaryTemperatureC
  7751  0010  01E2               	clrf	convertTemperatureF@binaryTemperatureC+1
  7752                           
  7753                           ;main.h: 10: float temperatureCprecise=0.0, tCprecise=0.0;
  7754  0011  3000               	movlw	0
  7755  0012  00DB               	movwf	convertTemperatureF@temperatureCprecise
  7756  0013  3000               	movlw	0
  7757  0014  00DC               	movwf	convertTemperatureF@temperatureCprecise+1
  7758  0015  3000               	movlw	0
  7759  0016  00DD               	movwf	convertTemperatureF@temperatureCprecise+2
  7760  0017  3000               	movlw	0
  7761  0018  00DE               	movwf	convertTemperatureF@tCprecise
  7762  0019  3000               	movlw	0
  7763  001A  00DF               	movwf	convertTemperatureF@tCprecise+1
  7764  001B  3000               	movlw	0
  7765  001C  00E0               	movwf	convertTemperatureF@tCprecise+2
  7766                           
  7767                           ;main.h: 12: binaryTemperatureC=((unsigned int)tempH << 8 ) + (unsigned int)tempL;
  7768  001D  0857               	movf	convertTemperatureF@tempH,w
  7769  001E  00DA               	movwf	??_convertTemperatureF+1
  7770  001F  01D9               	clrf	??_convertTemperatureF
  7771  0020  0855               	movf	convertTemperatureF@tempL,w
  7772  0021  0759               	addwf	??_convertTemperatureF,w
  7773  0022  00E1               	movwf	convertTemperatureF@binaryTemperatureC
  7774  0023  0856               	movf	convertTemperatureF@tempL+1,w
  7775  0024  3D5A               	addwfc	??_convertTemperatureF+1,w
  7776  0025  00E2               	movwf	convertTemperatureF@binaryTemperatureC+1
  7777                           
  7778                           ;main.h: 15: if(binaryTemperatureC & 0x08){
  7779  0026  1DE1               	btfss	convertTemperatureF@binaryTemperatureC,3
  7780  0027  282E               	goto	l2880
  7781                           
  7782                           ;main.h: 16: tCprecise=0.5;
  7783  0028  3000               	movlw	0
  7784  0029  00DE               	movwf	convertTemperatureF@tCprecise
  7785  002A  3000               	movlw	0
  7786  002B  00DF               	movwf	convertTemperatureF@tCprecise+1
  7787  002C  303F               	movlw	63
  7788  002D  00E0               	movwf	convertTemperatureF@tCprecise+2
  7789  002E                     l2880:	
  7790                           
  7791                           ;main.h: 17: }
  7792                           ;main.h: 18: if(binaryTemperatureC & 0x04){
  7793  002E  1D61               	btfss	convertTemperatureF@binaryTemperatureC,2
  7794  002F  2846               	goto	l2884
  7795                           
  7796                           ;main.h: 19: tCprecise=tCprecise+0.25;
  7797  0030  3000               	movlw	0
  7798  0031  00C8               	movwf	___ftadd@f1
  7799  0032  3080               	movlw	128
  7800  0033  00C9               	movwf	___ftadd@f1+1
  7801  0034  303E               	movlw	62
  7802  0035  00CA               	movwf	___ftadd@f1+2
  7803  0036  085E               	movf	convertTemperatureF@tCprecise,w
  7804  0037  00CB               	movwf	___ftadd@f2
  7805  0038  085F               	movf	convertTemperatureF@tCprecise+1,w
  7806  0039  00CC               	movwf	___ftadd@f2+1
  7807  003A  0860               	movf	convertTemperatureF@tCprecise+2,w
  7808  003B  00CD               	movwf	___ftadd@f2+2
  7809  003C  3188  2056  3180   	fcall	___ftadd
  7810  003F  0140               	movlb	0	; select bank0
  7811  0040  0848               	movf	?___ftadd,w
  7812  0041  00DE               	movwf	convertTemperatureF@tCprecise
  7813  0042  0849               	movf	?___ftadd+1,w
  7814  0043  00DF               	movwf	convertTemperatureF@tCprecise+1
  7815  0044  084A               	movf	?___ftadd+2,w
  7816  0045  00E0               	movwf	convertTemperatureF@tCprecise+2
  7817  0046                     l2884:	
  7818                           
  7819                           ;main.h: 20: }
  7820                           ;main.h: 21: if(binaryTemperatureC & 0x02){
  7821  0046  1CE1               	btfss	convertTemperatureF@binaryTemperatureC,1
  7822  0047  285E               	goto	l2888
  7823                           
  7824                           ;main.h: 22: tCprecise=tCprecise+0.125;
  7825  0048  3000               	movlw	0
  7826  0049  00C8               	movwf	___ftadd@f1
  7827  004A  3000               	movlw	0
  7828  004B  00C9               	movwf	___ftadd@f1+1
  7829  004C  303E               	movlw	62
  7830  004D  00CA               	movwf	___ftadd@f1+2
  7831  004E  085E               	movf	convertTemperatureF@tCprecise,w
  7832  004F  00CB               	movwf	___ftadd@f2
  7833  0050  085F               	movf	convertTemperatureF@tCprecise+1,w
  7834  0051  00CC               	movwf	___ftadd@f2+1
  7835  0052  0860               	movf	convertTemperatureF@tCprecise+2,w
  7836  0053  00CD               	movwf	___ftadd@f2+2
  7837  0054  3188  2056  3180   	fcall	___ftadd
  7838  0057  0140               	movlb	0	; select bank0
  7839  0058  0848               	movf	?___ftadd,w
  7840  0059  00DE               	movwf	convertTemperatureF@tCprecise
  7841  005A  0849               	movf	?___ftadd+1,w
  7842  005B  00DF               	movwf	convertTemperatureF@tCprecise+1
  7843  005C  084A               	movf	?___ftadd+2,w
  7844  005D  00E0               	movwf	convertTemperatureF@tCprecise+2
  7845  005E                     l2888:	
  7846                           
  7847                           ;main.h: 23: }
  7848                           ;main.h: 24: if(binaryTemperatureC & 0x01){
  7849  005E  1C61               	btfss	convertTemperatureF@binaryTemperatureC,0
  7850  005F  2876               	goto	l152
  7851                           
  7852                           ;main.h: 25: tCprecise=tCprecise+0.0625;
  7853  0060  3000               	movlw	0
  7854  0061  00C8               	movwf	___ftadd@f1
  7855  0062  3080               	movlw	128
  7856  0063  00C9               	movwf	___ftadd@f1+1
  7857  0064  303D               	movlw	61
  7858  0065  00CA               	movwf	___ftadd@f1+2
  7859  0066  085E               	movf	convertTemperatureF@tCprecise,w
  7860  0067  00CB               	movwf	___ftadd@f2
  7861  0068  085F               	movf	convertTemperatureF@tCprecise+1,w
  7862  0069  00CC               	movwf	___ftadd@f2+1
  7863  006A  0860               	movf	convertTemperatureF@tCprecise+2,w
  7864  006B  00CD               	movwf	___ftadd@f2+2
  7865  006C  3188  2056  3180   	fcall	___ftadd
  7866  006F  0140               	movlb	0	; select bank0
  7867  0070  0848               	movf	?___ftadd,w
  7868  0071  00DE               	movwf	convertTemperatureF@tCprecise
  7869  0072  0849               	movf	?___ftadd+1,w
  7870  0073  00DF               	movwf	convertTemperatureF@tCprecise+1
  7871  0074  084A               	movf	?___ftadd+2,w
  7872  0075  00E0               	movwf	convertTemperatureF@tCprecise+2
  7873  0076                     l152:	
  7874                           
  7875                           ;main.h: 26: }
  7876                           ;main.h: 27: temperatureCprecise=(binaryTemperatureC >> 4) + tCprecise;
  7877  0076  085E               	movf	convertTemperatureF@tCprecise,w
  7878  0077  00C8               	movwf	___ftadd@f1
  7879  0078  085F               	movf	convertTemperatureF@tCprecise+1,w
  7880  0079  00C9               	movwf	___ftadd@f1+1
  7881  007A  0860               	movf	convertTemperatureF@tCprecise+2,w
  7882  007B  00CA               	movwf	___ftadd@f1+2
  7883  007C  0E61               	swapf	convertTemperatureF@binaryTemperatureC,w
  7884  007D  390F               	andlw	15
  7885  007E  00F8               	movwf	___lwtoft@c
  7886  007F  0E62               	swapf	convertTemperatureF@binaryTemperatureC+1,w
  7887  0080  39F0               	andlw	240
  7888  0081  04F8               	iorwf	___lwtoft@c,f
  7889  0082  0E62               	swapf	convertTemperatureF@binaryTemperatureC+1,w
  7890  0083  390F               	andlw	15
  7891  0084  00F9               	movwf	___lwtoft@c+1
  7892  0085  3192  2211  3180   	fcall	___lwtoft
  7893  0088  0878               	movf	?___lwtoft,w
  7894  0089  0140               	movlb	0	; select bank0
  7895  008A  00CB               	movwf	___ftadd@f2
  7896  008B  0879               	movf	?___lwtoft+1,w
  7897  008C  00CC               	movwf	___ftadd@f2+1
  7898  008D  087A               	movf	?___lwtoft+2,w
  7899  008E  00CD               	movwf	___ftadd@f2+2
  7900  008F  3188  2056  3180   	fcall	___ftadd
  7901  0092  0140               	movlb	0	; select bank0
  7902  0093  0848               	movf	?___ftadd,w
  7903  0094  00DB               	movwf	convertTemperatureF@temperatureCprecise
  7904  0095  0849               	movf	?___ftadd+1,w
  7905  0096  00DC               	movwf	convertTemperatureF@temperatureCprecise+1
  7906  0097  084A               	movf	?___ftadd+2,w
  7907  0098  00DD               	movwf	convertTemperatureF@temperatureCprecise+2
  7908                           
  7909                           ;main.h: 28: return (temperatureCprecise * 9)/5 + 32;
  7910  0099  3000               	movlw	0
  7911  009A  00C8               	movwf	___ftadd@f1
  7912  009B  3000               	movlw	0
  7913  009C  00C9               	movwf	___ftadd@f1+1
  7914  009D  3042               	movlw	66
  7915  009E  00CA               	movwf	___ftadd@f1+2
  7916  009F  3000               	movlw	0
  7917  00A0  00B8               	movwf	___ftdiv@f2
  7918  00A1  30A0               	movlw	160
  7919  00A2  00B9               	movwf	___ftdiv@f2+1
  7920  00A3  3040               	movlw	64
  7921  00A4  00BA               	movwf	___ftdiv@f2+2
  7922  00A5  3000               	movlw	0
  7923  00A6  00A8               	movwf	___ftmul@f1
  7924  00A7  3010               	movlw	16
  7925  00A8  00A9               	movwf	___ftmul@f1+1
  7926  00A9  3041               	movlw	65
  7927  00AA  00AA               	movwf	___ftmul@f1+2
  7928  00AB  085B               	movf	convertTemperatureF@temperatureCprecise,w
  7929  00AC  00AB               	movwf	___ftmul@f2
  7930  00AD  085C               	movf	convertTemperatureF@temperatureCprecise+1,w
  7931  00AE  00AC               	movwf	___ftmul@f2+1
  7932  00AF  085D               	movf	convertTemperatureF@temperatureCprecise+2,w
  7933  00B0  00AD               	movwf	___ftmul@f2+2
  7934  00B1  3196  2696  3180   	fcall	___ftmul
  7935  00B4  0140               	movlb	0	; select bank0
  7936  00B5  0828               	movf	?___ftmul,w
  7937  00B6  00BB               	movwf	___ftdiv@f1
  7938  00B7  0829               	movf	?___ftmul+1,w
  7939  00B8  00BC               	movwf	___ftdiv@f1+1
  7940  00B9  082A               	movf	?___ftmul+2,w
  7941  00BA  00BD               	movwf	___ftdiv@f1+2
  7942  00BB  3195  25ED  3180   	fcall	___ftdiv
  7943  00BE  0140               	movlb	0	; select bank0
  7944  00BF  0838               	movf	?___ftdiv,w
  7945  00C0  00CB               	movwf	___ftadd@f2
  7946  00C1  0839               	movf	?___ftdiv+1,w
  7947  00C2  00CC               	movwf	___ftadd@f2+1
  7948  00C3  083A               	movf	?___ftdiv+2,w
  7949  00C4  00CD               	movwf	___ftadd@f2+2
  7950  00C5  3188  2056         	fcall	___ftadd
  7951  00C7  0140               	movlb	0	; select bank0
  7952  00C8  0848               	movf	?___ftadd,w
  7953  00C9  00D5               	movwf	?_convertTemperatureF
  7954  00CA  0849               	movf	?___ftadd+1,w
  7955  00CB  00D6               	movwf	?_convertTemperatureF+1
  7956  00CC  084A               	movf	?___ftadd+2,w
  7957  00CD  00D7               	movwf	?_convertTemperatureF+2
  7958  00CE  0008               	return
  7959  00CF                     __end_of_convertTemperatureF:	
  7960                           
  7961                           	psect	text18
  7962  1211                     __ptext18:	
  7963 ;; *************** function ___lwtoft *****************
  7964 ;; Defined at:
  7965 ;;		line 28 in file "/Applications/microchip/xc8/v1.42/sources/common/lwtoft.c"
  7966 ;; Parameters:    Size  Location     Type
  7967 ;;  c               2    8[COMMON] unsigned int 
  7968 ;; Auto vars:     Size  Location     Type
  7969 ;;		None
  7970 ;; Return value:  Size  Location     Type
  7971 ;;                  3    8[COMMON] float 
  7972 ;; Registers used:
  7973 ;;		wreg, status,2, status,0, pclath, cstack
  7974 ;; Tracked objects:
  7975 ;;		On entry : 0/0
  7976 ;;		On exit  : 0/0
  7977 ;;		Unchanged: 0/0
  7978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7979 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7981 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7982 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7983 ;;Total ram usage:        4 bytes
  7984 ;; Hardware stack levels used:    1
  7985 ;; Hardware stack levels required when called:    1
  7986 ;; This function calls:
  7987 ;;		___ftpack
  7988 ;; This function is called by:
  7989 ;;		_convertTemperatureF
  7990 ;; This function uses a non-reentrant model
  7991 ;;
  7992                           
  7993                           
  7994                           ;psect for function ___lwtoft
  7995  1211                     ___lwtoft:	
  7996                           
  7997                           ;incstack = 0
  7998                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  7999  1211  0878               	movf	___lwtoft@c,w
  8000  1212  00F0               	movwf	___ftpack@arg
  8001  1213  0879               	movf	___lwtoft@c+1,w
  8002  1214  00F1               	movwf	___ftpack@arg+1
  8003  1215  01F2               	clrf	___ftpack@arg+2
  8004  1216  308E               	movlw	142
  8005  1217  00FB               	movwf	??___lwtoft
  8006  1218  087B               	movf	??___lwtoft,w
  8007  1219  00F3               	movwf	___ftpack@exp
  8008  121A  01F4               	clrf	___ftpack@sign
  8009  121B  3195  2502         	fcall	___ftpack
  8010  121D  0870               	movf	?___ftpack,w
  8011  121E  00F8               	movwf	?___lwtoft
  8012  121F  0871               	movf	?___ftpack+1,w
  8013  1220  00F9               	movwf	?___lwtoft+1
  8014  1221  0872               	movf	?___ftpack+2,w
  8015  1222  00FA               	movwf	?___lwtoft+2
  8016  1223  0008               	return
  8017  1224                     __end_of___lwtoft:	
  8018                           
  8019                           	psect	text19
  8020  1696                     __ptext19:	
  8021 ;; *************** function ___ftmul *****************
  8022 ;; Defined at:
  8023 ;;		line 62 in file "/Applications/microchip/xc8/v1.42/sources/common/ftmul.c"
  8024 ;; Parameters:    Size  Location     Type
  8025 ;;  f1              3    8[BANK0 ] float 
  8026 ;;  f2              3   11[BANK0 ] float 
  8027 ;; Auto vars:     Size  Location     Type
  8028 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  8029 ;;  sign            1   23[BANK0 ] unsigned char 
  8030 ;;  cntr            1   22[BANK0 ] unsigned char 
  8031 ;;  exp             1   18[BANK0 ] unsigned char 
  8032 ;; Return value:  Size  Location     Type
  8033 ;;                  3    8[BANK0 ] float 
  8034 ;; Registers used:
  8035 ;;		wreg, status,2, status,0, pclath, cstack
  8036 ;; Tracked objects:
  8037 ;;		On entry : 0/0
  8038 ;;		On exit  : 0/0
  8039 ;;		Unchanged: 0/0
  8040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8041 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;Total ram usage:       16 bytes
  8046 ;; Hardware stack levels used:    1
  8047 ;; Hardware stack levels required when called:    1
  8048 ;; This function calls:
  8049 ;;		___ftpack
  8050 ;; This function is called by:
  8051 ;;		_convertTemperatureF
  8052 ;;		_fround
  8053 ;;		_scale
  8054 ;;		_sprintf
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           
  8059                           ;psect for function ___ftmul
  8060  1696                     ___ftmul:	
  8061                           
  8062                           ;incstack = 0
  8063                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8064  1696  0140               	movlb	0	; select bank0
  8065  1697  0828               	movf	___ftmul@f1,w
  8066  1698  00AE               	movwf	??___ftmul
  8067  1699  0829               	movf	___ftmul@f1+1,w
  8068  169A  00AF               	movwf	??___ftmul+1
  8069  169B  082A               	movf	___ftmul@f1+2,w
  8070  169C  00B0               	movwf	??___ftmul+2
  8071  169D  1003               	clrc
  8072  169E  0D2F               	rlf	??___ftmul+1,w
  8073  169F  0D30               	rlf	??___ftmul+2,w
  8074  16A0  00B1               	movwf	??___ftmul+3
  8075  16A1  0831               	movf	??___ftmul+3,w
  8076  16A2  00B2               	movwf	___ftmul@exp
  8077  16A3  0832               	movf	___ftmul@exp,w
  8078  16A4  1D03               	btfss	3,2
  8079  16A5  2EAD               	goto	l2290
  8080  16A6  3000               	movlw	0
  8081  16A7  00A8               	movwf	?___ftmul
  8082  16A8  3000               	movlw	0
  8083  16A9  00A9               	movwf	?___ftmul+1
  8084  16AA  3000               	movlw	0
  8085  16AB  00AA               	movwf	?___ftmul+2
  8086  16AC  0008               	return
  8087  16AD                     l2290:	
  8088  16AD  082B               	movf	___ftmul@f2,w
  8089  16AE  00AE               	movwf	??___ftmul
  8090  16AF  082C               	movf	___ftmul@f2+1,w
  8091  16B0  00AF               	movwf	??___ftmul+1
  8092  16B1  082D               	movf	___ftmul@f2+2,w
  8093  16B2  00B0               	movwf	??___ftmul+2
  8094  16B3  1003               	clrc
  8095  16B4  0D2F               	rlf	??___ftmul+1,w
  8096  16B5  0D30               	rlf	??___ftmul+2,w
  8097  16B6  00B1               	movwf	??___ftmul+3
  8098  16B7  0831               	movf	??___ftmul+3,w
  8099  16B8  00B7               	movwf	___ftmul@sign
  8100  16B9  0837               	movf	___ftmul@sign,w
  8101  16BA  1D03               	btfss	3,2
  8102  16BB  2EC3               	goto	l2296
  8103  16BC  3000               	movlw	0
  8104  16BD  00A8               	movwf	?___ftmul
  8105  16BE  3000               	movlw	0
  8106  16BF  00A9               	movwf	?___ftmul+1
  8107  16C0  3000               	movlw	0
  8108  16C1  00AA               	movwf	?___ftmul+2
  8109  16C2  0008               	return
  8110  16C3                     l2296:	
  8111  16C3  0837               	movf	___ftmul@sign,w
  8112  16C4  3E7B               	addlw	123
  8113  16C5  00AE               	movwf	??___ftmul
  8114  16C6  082E               	movf	??___ftmul,w
  8115  16C7  07B2               	addwf	___ftmul@exp,f
  8116  16C8  0828               	movf	___ftmul@f1,w
  8117  16C9  00AE               	movwf	??___ftmul
  8118  16CA  0829               	movf	___ftmul@f1+1,w
  8119  16CB  00AF               	movwf	??___ftmul+1
  8120  16CC  082A               	movf	___ftmul@f1+2,w
  8121  16CD  00B0               	movwf	??___ftmul+2
  8122  16CE  3010               	movlw	16
  8123  16CF                     u2975:	
  8124  16CF  36B0               	lsrf	??___ftmul+2,f
  8125  16D0  0CAF               	rrf	??___ftmul+1,f
  8126  16D1  0CAE               	rrf	??___ftmul,f
  8127  16D2  0B89               	decfsz	9,f
  8128  16D3  2ECF               	goto	u2975
  8129  16D4  082E               	movf	??___ftmul,w
  8130  16D5  00B1               	movwf	??___ftmul+3
  8131  16D6  0831               	movf	??___ftmul+3,w
  8132  16D7  00B7               	movwf	___ftmul@sign
  8133  16D8  082B               	movf	___ftmul@f2,w
  8134  16D9  00AE               	movwf	??___ftmul
  8135  16DA  082C               	movf	___ftmul@f2+1,w
  8136  16DB  00AF               	movwf	??___ftmul+1
  8137  16DC  082D               	movf	___ftmul@f2+2,w
  8138  16DD  00B0               	movwf	??___ftmul+2
  8139  16DE  3010               	movlw	16
  8140  16DF                     u2985:	
  8141  16DF  36B0               	lsrf	??___ftmul+2,f
  8142  16E0  0CAF               	rrf	??___ftmul+1,f
  8143  16E1  0CAE               	rrf	??___ftmul,f
  8144  16E2  0B89               	decfsz	9,f
  8145  16E3  2EDF               	goto	u2985
  8146  16E4  082E               	movf	??___ftmul,w
  8147  16E5  00B1               	movwf	??___ftmul+3
  8148  16E6  0831               	movf	??___ftmul+3,w
  8149  16E7  06B7               	xorwf	___ftmul@sign,f
  8150  16E8  3080               	movlw	128
  8151  16E9  00AE               	movwf	??___ftmul
  8152  16EA  082E               	movf	??___ftmul,w
  8153  16EB  05B7               	andwf	___ftmul@sign,f
  8154  16EC  17A9               	bsf	___ftmul@f1+1,7
  8155  16ED  17AC               	bsf	___ftmul@f2+1,7
  8156  16EE  30FF               	movlw	255
  8157  16EF  05AB               	andwf	___ftmul@f2,f
  8158  16F0  30FF               	movlw	255
  8159  16F1  05AC               	andwf	___ftmul@f2+1,f
  8160  16F2  3000               	movlw	0
  8161  16F3  05AD               	andwf	___ftmul@f2+2,f
  8162  16F4  3000               	movlw	0
  8163  16F5  00B3               	movwf	___ftmul@f3_as_product
  8164  16F6  3000               	movlw	0
  8165  16F7  00B4               	movwf	___ftmul@f3_as_product+1
  8166  16F8  3000               	movlw	0
  8167  16F9  00B5               	movwf	___ftmul@f3_as_product+2
  8168  16FA  3007               	movlw	7
  8169  16FB  00AE               	movwf	??___ftmul
  8170  16FC  082E               	movf	??___ftmul,w
  8171  16FD  00B6               	movwf	___ftmul@cntr
  8172  16FE                     l2308:	
  8173  16FE  1C28               	btfss	___ftmul@f1,0
  8174  16FF  2F06               	goto	l2312
  8175  1700  082B               	movf	___ftmul@f2,w
  8176  1701  07B3               	addwf	___ftmul@f3_as_product,f
  8177  1702  082C               	movf	___ftmul@f2+1,w
  8178  1703  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  8179  1704  082D               	movf	___ftmul@f2+2,w
  8180  1705  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  8181  1706                     l2312:	
  8182  1706  3001               	movlw	1
  8183  1707                     u3005:	
  8184  1707  36AA               	lsrf	___ftmul@f1+2,f
  8185  1708  0CA9               	rrf	___ftmul@f1+1,f
  8186  1709  0CA8               	rrf	___ftmul@f1,f
  8187  170A  0B89               	decfsz	9,f
  8188  170B  2F07               	goto	u3005
  8189  170C  3001               	movlw	1
  8190  170D                     u3015:	
  8191  170D  35AB               	lslf	___ftmul@f2,f
  8192  170E  0DAC               	rlf	___ftmul@f2+1,f
  8193  170F  0DAD               	rlf	___ftmul@f2+2,f
  8194  1710  0B89               	decfsz	9,f
  8195  1711  2F0D               	goto	u3015
  8196  1712  3001               	movlw	1
  8197  1713  02B6               	subwf	___ftmul@cntr,f
  8198  1714  1D03               	btfss	3,2
  8199  1715  2EFE               	goto	l2308
  8200  1716  3009               	movlw	9
  8201  1717  00AE               	movwf	??___ftmul
  8202  1718  082E               	movf	??___ftmul,w
  8203  1719  00B6               	movwf	___ftmul@cntr
  8204  171A                     l2320:	
  8205  171A  1C28               	btfss	___ftmul@f1,0
  8206  171B  2F22               	goto	l2324
  8207  171C  082B               	movf	___ftmul@f2,w
  8208  171D  07B3               	addwf	___ftmul@f3_as_product,f
  8209  171E  082C               	movf	___ftmul@f2+1,w
  8210  171F  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  8211  1720  082D               	movf	___ftmul@f2+2,w
  8212  1721  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  8213  1722                     l2324:	
  8214  1722  3001               	movlw	1
  8215  1723                     u3045:	
  8216  1723  36AA               	lsrf	___ftmul@f1+2,f
  8217  1724  0CA9               	rrf	___ftmul@f1+1,f
  8218  1725  0CA8               	rrf	___ftmul@f1,f
  8219  1726  0B89               	decfsz	9,f
  8220  1727  2F23               	goto	u3045
  8221  1728  3001               	movlw	1
  8222  1729                     u3055:	
  8223  1729  36B5               	lsrf	___ftmul@f3_as_product+2,f
  8224  172A  0CB4               	rrf	___ftmul@f3_as_product+1,f
  8225  172B  0CB3               	rrf	___ftmul@f3_as_product,f
  8226  172C  0B89               	decfsz	9,f
  8227  172D  2F29               	goto	u3055
  8228  172E  3001               	movlw	1
  8229  172F  02B6               	subwf	___ftmul@cntr,f
  8230  1730  1D03               	btfss	3,2
  8231  1731  2F1A               	goto	l2320
  8232  1732  0833               	movf	___ftmul@f3_as_product,w
  8233  1733  00F0               	movwf	___ftpack@arg
  8234  1734  0834               	movf	___ftmul@f3_as_product+1,w
  8235  1735  00F1               	movwf	___ftpack@arg+1
  8236  1736  0835               	movf	___ftmul@f3_as_product+2,w
  8237  1737  00F2               	movwf	___ftpack@arg+2
  8238  1738  0832               	movf	___ftmul@exp,w
  8239  1739  00AE               	movwf	??___ftmul
  8240  173A  082E               	movf	??___ftmul,w
  8241  173B  00F3               	movwf	___ftpack@exp
  8242  173C  0837               	movf	___ftmul@sign,w
  8243  173D  00AF               	movwf	??___ftmul+1
  8244  173E  082F               	movf	??___ftmul+1,w
  8245  173F  00F4               	movwf	___ftpack@sign
  8246  1740  3195  2502         	fcall	___ftpack
  8247  1742  0870               	movf	?___ftpack,w
  8248  1743  0140               	movlb	0	; select bank0
  8249  1744  00A8               	movwf	?___ftmul
  8250  1745  0871               	movf	?___ftpack+1,w
  8251  1746  00A9               	movwf	?___ftmul+1
  8252  1747  0872               	movf	?___ftpack+2,w
  8253  1748  00AA               	movwf	?___ftmul+2
  8254  1749  0008               	return
  8255  174A                     __end_of___ftmul:	
  8256                           
  8257                           	psect	text20
  8258  15ED                     __ptext20:	
  8259 ;; *************** function ___ftdiv *****************
  8260 ;; Defined at:
  8261 ;;		line 56 in file "/Applications/microchip/xc8/v1.42/sources/common/ftdiv.c"
  8262 ;; Parameters:    Size  Location     Type
  8263 ;;  f2              3   24[BANK0 ] float 
  8264 ;;  f1              3   27[BANK0 ] float 
  8265 ;; Auto vars:     Size  Location     Type
  8266 ;;  f3              3   35[BANK0 ] float 
  8267 ;;  sign            1   39[BANK0 ] unsigned char 
  8268 ;;  exp             1   38[BANK0 ] unsigned char 
  8269 ;;  cntr            1   34[BANK0 ] unsigned char 
  8270 ;; Return value:  Size  Location     Type
  8271 ;;                  3   24[BANK0 ] float 
  8272 ;; Registers used:
  8273 ;;		wreg, status,2, status,0, pclath, cstack
  8274 ;; Tracked objects:
  8275 ;;		On entry : 0/0
  8276 ;;		On exit  : 0/0
  8277 ;;		Unchanged: 0/0
  8278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8279 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8280 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8282 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;Total ram usage:       16 bytes
  8284 ;; Hardware stack levels used:    1
  8285 ;; Hardware stack levels required when called:    1
  8286 ;; This function calls:
  8287 ;;		___ftpack
  8288 ;; This function is called by:
  8289 ;;		_convertTemperatureF
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           
  8294                           ;psect for function ___ftdiv
  8295  15ED                     ___ftdiv:	
  8296                           
  8297                           ;incstack = 0
  8298                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8299  15ED  0140               	movlb	0	; select bank0
  8300  15EE  083B               	movf	___ftdiv@f1,w
  8301  15EF  00BE               	movwf	??___ftdiv
  8302  15F0  083C               	movf	___ftdiv@f1+1,w
  8303  15F1  00BF               	movwf	??___ftdiv+1
  8304  15F2  083D               	movf	___ftdiv@f1+2,w
  8305  15F3  00C0               	movwf	??___ftdiv+2
  8306  15F4  1003               	clrc
  8307  15F5  0D3F               	rlf	??___ftdiv+1,w
  8308  15F6  0D40               	rlf	??___ftdiv+2,w
  8309  15F7  00C1               	movwf	??___ftdiv+3
  8310  15F8  0841               	movf	??___ftdiv+3,w
  8311  15F9  00C6               	movwf	___ftdiv@exp
  8312  15FA  0846               	movf	___ftdiv@exp,w
  8313  15FB  1D03               	btfss	3,2
  8314  15FC  2E04               	goto	l2602
  8315  15FD  3000               	movlw	0
  8316  15FE  00B8               	movwf	?___ftdiv
  8317  15FF  3000               	movlw	0
  8318  1600  00B9               	movwf	?___ftdiv+1
  8319  1601  3000               	movlw	0
  8320  1602  00BA               	movwf	?___ftdiv+2
  8321  1603  0008               	return
  8322  1604                     l2602:	
  8323  1604  0838               	movf	___ftdiv@f2,w
  8324  1605  00BE               	movwf	??___ftdiv
  8325  1606  0839               	movf	___ftdiv@f2+1,w
  8326  1607  00BF               	movwf	??___ftdiv+1
  8327  1608  083A               	movf	___ftdiv@f2+2,w
  8328  1609  00C0               	movwf	??___ftdiv+2
  8329  160A  1003               	clrc
  8330  160B  0D3F               	rlf	??___ftdiv+1,w
  8331  160C  0D40               	rlf	??___ftdiv+2,w
  8332  160D  00C1               	movwf	??___ftdiv+3
  8333  160E  0841               	movf	??___ftdiv+3,w
  8334  160F  00C7               	movwf	___ftdiv@sign
  8335  1610  0847               	movf	___ftdiv@sign,w
  8336  1611  1D03               	btfss	3,2
  8337  1612  2E1A               	goto	l2608
  8338  1613  3000               	movlw	0
  8339  1614  00B8               	movwf	?___ftdiv
  8340  1615  3000               	movlw	0
  8341  1616  00B9               	movwf	?___ftdiv+1
  8342  1617  3000               	movlw	0
  8343  1618  00BA               	movwf	?___ftdiv+2
  8344  1619  0008               	return
  8345  161A                     l2608:	
  8346  161A  3000               	movlw	0
  8347  161B  00C3               	movwf	___ftdiv@f3
  8348  161C  3000               	movlw	0
  8349  161D  00C4               	movwf	___ftdiv@f3+1
  8350  161E  3000               	movlw	0
  8351  161F  00C5               	movwf	___ftdiv@f3+2
  8352  1620  3089               	movlw	137
  8353  1621  0747               	addwf	___ftdiv@sign,w
  8354  1622  00BE               	movwf	??___ftdiv
  8355  1623  083E               	movf	??___ftdiv,w
  8356  1624  02C6               	subwf	___ftdiv@exp,f
  8357  1625  083B               	movf	___ftdiv@f1,w
  8358  1626  00BE               	movwf	??___ftdiv
  8359  1627  083C               	movf	___ftdiv@f1+1,w
  8360  1628  00BF               	movwf	??___ftdiv+1
  8361  1629  083D               	movf	___ftdiv@f1+2,w
  8362  162A  00C0               	movwf	??___ftdiv+2
  8363  162B  3010               	movlw	16
  8364  162C                     u3455:	
  8365  162C  36C0               	lsrf	??___ftdiv+2,f
  8366  162D  0CBF               	rrf	??___ftdiv+1,f
  8367  162E  0CBE               	rrf	??___ftdiv,f
  8368  162F  0B89               	decfsz	9,f
  8369  1630  2E2C               	goto	u3455
  8370  1631  083E               	movf	??___ftdiv,w
  8371  1632  00C1               	movwf	??___ftdiv+3
  8372  1633  0841               	movf	??___ftdiv+3,w
  8373  1634  00C7               	movwf	___ftdiv@sign
  8374  1635  0838               	movf	___ftdiv@f2,w
  8375  1636  00BE               	movwf	??___ftdiv
  8376  1637  0839               	movf	___ftdiv@f2+1,w
  8377  1638  00BF               	movwf	??___ftdiv+1
  8378  1639  083A               	movf	___ftdiv@f2+2,w
  8379  163A  00C0               	movwf	??___ftdiv+2
  8380  163B  3010               	movlw	16
  8381  163C                     u3465:	
  8382  163C  36C0               	lsrf	??___ftdiv+2,f
  8383  163D  0CBF               	rrf	??___ftdiv+1,f
  8384  163E  0CBE               	rrf	??___ftdiv,f
  8385  163F  0B89               	decfsz	9,f
  8386  1640  2E3C               	goto	u3465
  8387  1641  083E               	movf	??___ftdiv,w
  8388  1642  00C1               	movwf	??___ftdiv+3
  8389  1643  0841               	movf	??___ftdiv+3,w
  8390  1644  06C7               	xorwf	___ftdiv@sign,f
  8391  1645  3080               	movlw	128
  8392  1646  00BE               	movwf	??___ftdiv
  8393  1647  083E               	movf	??___ftdiv,w
  8394  1648  05C7               	andwf	___ftdiv@sign,f
  8395  1649  17BC               	bsf	___ftdiv@f1+1,7
  8396  164A  30FF               	movlw	255
  8397  164B  05BB               	andwf	___ftdiv@f1,f
  8398  164C  30FF               	movlw	255
  8399  164D  05BC               	andwf	___ftdiv@f1+1,f
  8400  164E  3000               	movlw	0
  8401  164F  05BD               	andwf	___ftdiv@f1+2,f
  8402  1650  17B9               	bsf	___ftdiv@f2+1,7
  8403  1651  30FF               	movlw	255
  8404  1652  05B8               	andwf	___ftdiv@f2,f
  8405  1653  30FF               	movlw	255
  8406  1654  05B9               	andwf	___ftdiv@f2+1,f
  8407  1655  3000               	movlw	0
  8408  1656  05BA               	andwf	___ftdiv@f2+2,f
  8409  1657  3018               	movlw	24
  8410  1658  00BE               	movwf	??___ftdiv
  8411  1659  083E               	movf	??___ftdiv,w
  8412  165A  00C2               	movwf	___ftdiv@cntr
  8413  165B                     l2622:	
  8414  165B  3001               	movlw	1
  8415  165C                     u3475:	
  8416  165C  35C3               	lslf	___ftdiv@f3,f
  8417  165D  0DC4               	rlf	___ftdiv@f3+1,f
  8418  165E  0DC5               	rlf	___ftdiv@f3+2,f
  8419  165F  0B89               	decfsz	9,f
  8420  1660  2E5C               	goto	u3475
  8421  1661  083A               	movf	___ftdiv@f2+2,w
  8422  1662  023D               	subwf	___ftdiv@f1+2,w
  8423  1663  1D03               	skipz
  8424  1664  2E6B               	goto	u3485
  8425  1665  0839               	movf	___ftdiv@f2+1,w
  8426  1666  023C               	subwf	___ftdiv@f1+1,w
  8427  1667  1D03               	skipz
  8428  1668  2E6B               	goto	u3485
  8429  1669  0838               	movf	___ftdiv@f2,w
  8430  166A  023B               	subwf	___ftdiv@f1,w
  8431  166B                     u3485:	
  8432  166B  1C03               	skipc
  8433  166C  2E74               	goto	l2630
  8434  166D  0838               	movf	___ftdiv@f2,w
  8435  166E  02BB               	subwf	___ftdiv@f1,f
  8436  166F  0839               	movf	___ftdiv@f2+1,w
  8437  1670  3BBC               	subwfb	___ftdiv@f1+1,f
  8438  1671  083A               	movf	___ftdiv@f2+2,w
  8439  1672  3BBD               	subwfb	___ftdiv@f1+2,f
  8440  1673  1443               	bsf	___ftdiv@f3,0
  8441  1674                     l2630:	
  8442  1674  3001               	movlw	1
  8443  1675                     u3495:	
  8444  1675  35BB               	lslf	___ftdiv@f1,f
  8445  1676  0DBC               	rlf	___ftdiv@f1+1,f
  8446  1677  0DBD               	rlf	___ftdiv@f1+2,f
  8447  1678  0B89               	decfsz	9,f
  8448  1679  2E75               	goto	u3495
  8449  167A  3001               	movlw	1
  8450  167B  02C2               	subwf	___ftdiv@cntr,f
  8451  167C  1D03               	btfss	3,2
  8452  167D  2E5B               	goto	l2622
  8453  167E  0843               	movf	___ftdiv@f3,w
  8454  167F  00F0               	movwf	___ftpack@arg
  8455  1680  0844               	movf	___ftdiv@f3+1,w
  8456  1681  00F1               	movwf	___ftpack@arg+1
  8457  1682  0845               	movf	___ftdiv@f3+2,w
  8458  1683  00F2               	movwf	___ftpack@arg+2
  8459  1684  0846               	movf	___ftdiv@exp,w
  8460  1685  00BE               	movwf	??___ftdiv
  8461  1686  083E               	movf	??___ftdiv,w
  8462  1687  00F3               	movwf	___ftpack@exp
  8463  1688  0847               	movf	___ftdiv@sign,w
  8464  1689  00BF               	movwf	??___ftdiv+1
  8465  168A  083F               	movf	??___ftdiv+1,w
  8466  168B  00F4               	movwf	___ftpack@sign
  8467  168C  3195  2502         	fcall	___ftpack
  8468  168E  0870               	movf	?___ftpack,w
  8469  168F  0140               	movlb	0	; select bank0
  8470  1690  00B8               	movwf	?___ftdiv
  8471  1691  0871               	movf	?___ftpack+1,w
  8472  1692  00B9               	movwf	?___ftdiv+1
  8473  1693  0872               	movf	?___ftpack+2,w
  8474  1694  00BA               	movwf	?___ftdiv+2
  8475  1695  0008               	return
  8476  1696                     __end_of___ftdiv:	
  8477                           
  8478                           	psect	text21
  8479  0856                     __ptext21:	
  8480 ;; *************** function ___ftadd *****************
  8481 ;; Defined at:
  8482 ;;		line 86 in file "/Applications/microchip/xc8/v1.42/sources/common/ftadd.c"
  8483 ;; Parameters:    Size  Location     Type
  8484 ;;  f1              3   40[BANK0 ] float 
  8485 ;;  f2              3   43[BANK0 ] float 
  8486 ;; Auto vars:     Size  Location     Type
  8487 ;;  exp1            1   52[BANK0 ] unsigned char 
  8488 ;;  exp2            1   51[BANK0 ] unsigned char 
  8489 ;;  sign            1   50[BANK0 ] unsigned char 
  8490 ;; Return value:  Size  Location     Type
  8491 ;;                  3   40[BANK0 ] float 
  8492 ;; Registers used:
  8493 ;;		wreg, status,2, status,0, pclath, cstack
  8494 ;; Tracked objects:
  8495 ;;		On entry : 0/0
  8496 ;;		On exit  : 0/0
  8497 ;;		Unchanged: 0/0
  8498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8499 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8500 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8501 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8502 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8503 ;;Total ram usage:       13 bytes
  8504 ;; Hardware stack levels used:    1
  8505 ;; Hardware stack levels required when called:    1
  8506 ;; This function calls:
  8507 ;;		___ftpack
  8508 ;; This function is called by:
  8509 ;;		_convertTemperatureF
  8510 ;;		_sprintf
  8511 ;;		___ftsub
  8512 ;; This function uses a non-reentrant model
  8513 ;;
  8514                           
  8515                           
  8516                           ;psect for function ___ftadd
  8517  0856                     ___ftadd:	
  8518                           
  8519                           ;incstack = 0
  8520                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8521  0856  0140               	movlb	0	; select bank0
  8522  0857  0848               	movf	___ftadd@f1,w
  8523  0858  00CE               	movwf	??___ftadd
  8524  0859  0849               	movf	___ftadd@f1+1,w
  8525  085A  00CF               	movwf	??___ftadd+1
  8526  085B  084A               	movf	___ftadd@f1+2,w
  8527  085C  00D0               	movwf	??___ftadd+2
  8528  085D  1003               	clrc
  8529  085E  0D4F               	rlf	??___ftadd+1,w
  8530  085F  0D50               	rlf	??___ftadd+2,w
  8531  0860  00D1               	movwf	??___ftadd+3
  8532  0861  0851               	movf	??___ftadd+3,w
  8533  0862  00D4               	movwf	___ftadd@exp1
  8534  0863  084B               	movf	___ftadd@f2,w
  8535  0864  00CE               	movwf	??___ftadd
  8536  0865  084C               	movf	___ftadd@f2+1,w
  8537  0866  00CF               	movwf	??___ftadd+1
  8538  0867  084D               	movf	___ftadd@f2+2,w
  8539  0868  00D0               	movwf	??___ftadd+2
  8540  0869  1003               	clrc
  8541  086A  0D4F               	rlf	??___ftadd+1,w
  8542  086B  0D50               	rlf	??___ftadd+2,w
  8543  086C  00D1               	movwf	??___ftadd+3
  8544  086D  0851               	movf	??___ftadd+3,w
  8545  086E  00D3               	movwf	___ftadd@exp2
  8546  086F  0854               	movf	___ftadd@exp1,w
  8547  0870  1903               	btfsc	3,2
  8548  0871  287E               	goto	l2220
  8549  0872  0853               	movf	___ftadd@exp2,w
  8550  0873  0254               	subwf	___ftadd@exp1,w
  8551  0874  1803               	skipnc
  8552  0875  2885               	goto	l2224
  8553  0876  0354               	decf	___ftadd@exp1,w
  8554  0877  3AFF               	xorlw	255
  8555  0878  0753               	addwf	___ftadd@exp2,w
  8556  0879  00CE               	movwf	??___ftadd
  8557  087A  3019               	movlw	25
  8558  087B  024E               	subwf	??___ftadd,w
  8559  087C  1C03               	skipc
  8560  087D  2885               	goto	l2224
  8561  087E                     l2220:	
  8562  087E  084B               	movf	___ftadd@f2,w
  8563  087F  00C8               	movwf	?___ftadd
  8564  0880  084C               	movf	___ftadd@f2+1,w
  8565  0881  00C9               	movwf	?___ftadd+1
  8566  0882  084D               	movf	___ftadd@f2+2,w
  8567  0883  00CA               	movwf	?___ftadd+2
  8568  0884  0008               	return
  8569  0885                     l2224:	
  8570  0885  0853               	movf	___ftadd@exp2,w
  8571  0886  1903               	btfsc	3,2
  8572  0887  0008               	return
  8573  0888  0854               	movf	___ftadd@exp1,w
  8574  0889  0253               	subwf	___ftadd@exp2,w
  8575  088A  1803               	skipnc
  8576  088B  2894               	goto	l2230
  8577  088C  0353               	decf	___ftadd@exp2,w
  8578  088D  3AFF               	xorlw	255
  8579  088E  0754               	addwf	___ftadd@exp1,w
  8580  088F  00CE               	movwf	??___ftadd
  8581  0890  3019               	movlw	25
  8582  0891  024E               	subwf	??___ftadd,w
  8583  0892  1803               	btfsc	3,0
  8584  0893  0008               	return
  8585  0894                     l2230:	
  8586  0894  3006               	movlw	6
  8587  0895  00CE               	movwf	??___ftadd
  8588  0896  084E               	movf	??___ftadd,w
  8589  0897  00D2               	movwf	___ftadd@sign
  8590  0898  1BCA               	btfsc	___ftadd@f1+2,7
  8591  0899  17D2               	bsf	___ftadd@sign,7
  8592  089A  1BCD               	btfsc	___ftadd@f2+2,7
  8593  089B  1752               	bsf	___ftadd@sign,6
  8594  089C  17C9               	bsf	___ftadd@f1+1,7
  8595  089D  30FF               	movlw	255
  8596  089E  05C8               	andwf	___ftadd@f1,f
  8597  089F  30FF               	movlw	255
  8598  08A0  05C9               	andwf	___ftadd@f1+1,f
  8599  08A1  3000               	movlw	0
  8600  08A2  05CA               	andwf	___ftadd@f1+2,f
  8601  08A3  17CC               	bsf	___ftadd@f2+1,7
  8602  08A4  30FF               	movlw	255
  8603  08A5  05CB               	andwf	___ftadd@f2,f
  8604  08A6  30FF               	movlw	255
  8605  08A7  05CC               	andwf	___ftadd@f2+1,f
  8606  08A8  3000               	movlw	0
  8607  08A9  05CD               	andwf	___ftadd@f2+2,f
  8608  08AA  0853               	movf	___ftadd@exp2,w
  8609  08AB  0254               	subwf	___ftadd@exp1,w
  8610  08AC  1803               	skipnc
  8611  08AD  28D0               	goto	l2252
  8612  08AE                     l2242:	
  8613  08AE  3001               	movlw	1
  8614  08AF                     u2815:	
  8615  08AF  35CB               	lslf	___ftadd@f2,f
  8616  08B0  0DCC               	rlf	___ftadd@f2+1,f
  8617  08B1  0DCD               	rlf	___ftadd@f2+2,f
  8618  08B2  0B89               	decfsz	9,f
  8619  08B3  28AF               	goto	u2815
  8620  08B4  3001               	movlw	1
  8621  08B5  02D3               	subwf	___ftadd@exp2,f
  8622  08B6  0853               	movf	___ftadd@exp2,w
  8623  08B7  0654               	xorwf	___ftadd@exp1,w
  8624  08B8  1903               	skipnz
  8625  08B9  28CB               	goto	l2250
  8626  08BA  3001               	movlw	1
  8627  08BB  02D2               	subwf	___ftadd@sign,f
  8628  08BC  0852               	movf	___ftadd@sign,w
  8629  08BD  3907               	andlw	7
  8630  08BE  1903               	btfsc	3,2
  8631  08BF  28CB               	goto	l2250
  8632  08C0  28AE               	goto	l2242
  8633  08C1                     l2248:	
  8634  08C1  3001               	movlw	1
  8635  08C2                     u2845:	
  8636  08C2  36CA               	lsrf	___ftadd@f1+2,f
  8637  08C3  0CC9               	rrf	___ftadd@f1+1,f
  8638  08C4  0CC8               	rrf	___ftadd@f1,f
  8639  08C5  0B89               	decfsz	9,f
  8640  08C6  28C2               	goto	u2845
  8641  08C7  3001               	movlw	1
  8642  08C8  00CE               	movwf	??___ftadd
  8643  08C9  084E               	movf	??___ftadd,w
  8644  08CA  07D4               	addwf	___ftadd@exp1,f
  8645  08CB                     l2250:	
  8646  08CB  0854               	movf	___ftadd@exp1,w
  8647  08CC  0653               	xorwf	___ftadd@exp2,w
  8648  08CD  1903               	btfsc	3,2
  8649  08CE  28F5               	goto	l536
  8650  08CF  28C1               	goto	l2248
  8651  08D0                     l2252:	
  8652  08D0  0854               	movf	___ftadd@exp1,w
  8653  08D1  0253               	subwf	___ftadd@exp2,w
  8654  08D2  1803               	skipnc
  8655  08D3  28F5               	goto	l536
  8656  08D4                     l2254:	
  8657  08D4  3001               	movlw	1
  8658  08D5                     u2875:	
  8659  08D5  35C8               	lslf	___ftadd@f1,f
  8660  08D6  0DC9               	rlf	___ftadd@f1+1,f
  8661  08D7  0DCA               	rlf	___ftadd@f1+2,f
  8662  08D8  0B89               	decfsz	9,f
  8663  08D9  28D5               	goto	u2875
  8664  08DA  3001               	movlw	1
  8665  08DB  02D4               	subwf	___ftadd@exp1,f
  8666  08DC  0853               	movf	___ftadd@exp2,w
  8667  08DD  0654               	xorwf	___ftadd@exp1,w
  8668  08DE  1903               	skipnz
  8669  08DF  28F1               	goto	l2262
  8670  08E0  3001               	movlw	1
  8671  08E1  02D2               	subwf	___ftadd@sign,f
  8672  08E2  0852               	movf	___ftadd@sign,w
  8673  08E3  3907               	andlw	7
  8674  08E4  1903               	btfsc	3,2
  8675  08E5  28F1               	goto	l2262
  8676  08E6  28D4               	goto	l2254
  8677  08E7                     l2260:	
  8678  08E7  3001               	movlw	1
  8679  08E8                     u2905:	
  8680  08E8  36CD               	lsrf	___ftadd@f2+2,f
  8681  08E9  0CCC               	rrf	___ftadd@f2+1,f
  8682  08EA  0CCB               	rrf	___ftadd@f2,f
  8683  08EB  0B89               	decfsz	9,f
  8684  08EC  28E8               	goto	u2905
  8685  08ED  3001               	movlw	1
  8686  08EE  00CE               	movwf	??___ftadd
  8687  08EF  084E               	movf	??___ftadd,w
  8688  08F0  07D3               	addwf	___ftadd@exp2,f
  8689  08F1                     l2262:	
  8690  08F1  0854               	movf	___ftadd@exp1,w
  8691  08F2  0653               	xorwf	___ftadd@exp2,w
  8692  08F3  1D03               	skipz
  8693  08F4  28E7               	goto	l2260
  8694  08F5                     l536:	
  8695  08F5  1FD2               	btfss	___ftadd@sign,7
  8696  08F6  2907               	goto	l2266
  8697  08F7  30FF               	movlw	255
  8698  08F8  06C8               	xorwf	___ftadd@f1,f
  8699  08F9  30FF               	movlw	255
  8700  08FA  06C9               	xorwf	___ftadd@f1+1,f
  8701  08FB  30FF               	movlw	255
  8702  08FC  06CA               	xorwf	___ftadd@f1+2,f
  8703  08FD  3001               	movlw	1
  8704  08FE  07C8               	addwf	___ftadd@f1,f
  8705  08FF  3000               	movlw	0
  8706  0900  1803               	skipnc
  8707  0901  3001               	movlw	1
  8708  0902  07C9               	addwf	___ftadd@f1+1,f
  8709  0903  3000               	movlw	0
  8710  0904  1803               	skipnc
  8711  0905  3001               	movlw	1
  8712  0906  07CA               	addwf	___ftadd@f1+2,f
  8713  0907                     l2266:	
  8714  0907  1F52               	btfss	___ftadd@sign,6
  8715  0908  2919               	goto	l2270
  8716  0909  30FF               	movlw	255
  8717  090A  06CB               	xorwf	___ftadd@f2,f
  8718  090B  30FF               	movlw	255
  8719  090C  06CC               	xorwf	___ftadd@f2+1,f
  8720  090D  30FF               	movlw	255
  8721  090E  06CD               	xorwf	___ftadd@f2+2,f
  8722  090F  3001               	movlw	1
  8723  0910  07CB               	addwf	___ftadd@f2,f
  8724  0911  3000               	movlw	0
  8725  0912  1803               	skipnc
  8726  0913  3001               	movlw	1
  8727  0914  07CC               	addwf	___ftadd@f2+1,f
  8728  0915  3000               	movlw	0
  8729  0916  1803               	skipnc
  8730  0917  3001               	movlw	1
  8731  0918  07CD               	addwf	___ftadd@f2+2,f
  8732  0919                     l2270:	
  8733  0919  01D2               	clrf	___ftadd@sign
  8734  091A  0848               	movf	___ftadd@f1,w
  8735  091B  07CB               	addwf	___ftadd@f2,f
  8736  091C  0849               	movf	___ftadd@f1+1,w
  8737  091D  3DCC               	addwfc	___ftadd@f2+1,f
  8738  091E  084A               	movf	___ftadd@f1+2,w
  8739  091F  3DCD               	addwfc	___ftadd@f2+2,f
  8740  0920  1FCD               	btfss	___ftadd@f2+2,7
  8741  0921  2934               	goto	l2280
  8742  0922  30FF               	movlw	255
  8743  0923  06CB               	xorwf	___ftadd@f2,f
  8744  0924  30FF               	movlw	255
  8745  0925  06CC               	xorwf	___ftadd@f2+1,f
  8746  0926  30FF               	movlw	255
  8747  0927  06CD               	xorwf	___ftadd@f2+2,f
  8748  0928  3001               	movlw	1
  8749  0929  07CB               	addwf	___ftadd@f2,f
  8750  092A  3000               	movlw	0
  8751  092B  1803               	skipnc
  8752  092C  3001               	movlw	1
  8753  092D  07CC               	addwf	___ftadd@f2+1,f
  8754  092E  3000               	movlw	0
  8755  092F  1803               	skipnc
  8756  0930  3001               	movlw	1
  8757  0931  07CD               	addwf	___ftadd@f2+2,f
  8758  0932  01D2               	clrf	___ftadd@sign
  8759  0933  0AD2               	incf	___ftadd@sign,f
  8760  0934                     l2280:	
  8761  0934  084B               	movf	___ftadd@f2,w
  8762  0935  00F0               	movwf	___ftpack@arg
  8763  0936  084C               	movf	___ftadd@f2+1,w
  8764  0937  00F1               	movwf	___ftpack@arg+1
  8765  0938  084D               	movf	___ftadd@f2+2,w
  8766  0939  00F2               	movwf	___ftpack@arg+2
  8767  093A  0854               	movf	___ftadd@exp1,w
  8768  093B  00CE               	movwf	??___ftadd
  8769  093C  084E               	movf	??___ftadd,w
  8770  093D  00F3               	movwf	___ftpack@exp
  8771  093E  0852               	movf	___ftadd@sign,w
  8772  093F  00CF               	movwf	??___ftadd+1
  8773  0940  084F               	movf	??___ftadd+1,w
  8774  0941  00F4               	movwf	___ftpack@sign
  8775  0942  3195  2502         	fcall	___ftpack
  8776  0944  0870               	movf	?___ftpack,w
  8777  0945  0140               	movlb	0	; select bank0
  8778  0946  00C8               	movwf	?___ftadd
  8779  0947  0871               	movf	?___ftpack+1,w
  8780  0948  00C9               	movwf	?___ftadd+1
  8781  0949  0872               	movf	?___ftpack+2,w
  8782  094A  00CA               	movwf	?___ftadd+2
  8783  094B  0008               	return
  8784  094C                     __end_of___ftadd:	
  8785                           
  8786                           	psect	text22
  8787  1502                     __ptext22:	
  8788 ;; *************** function ___ftpack *****************
  8789 ;; Defined at:
  8790 ;;		line 62 in file "/Applications/microchip/xc8/v1.42/sources/common/float.c"
  8791 ;; Parameters:    Size  Location     Type
  8792 ;;  arg             3    0[COMMON] unsigned um
  8793 ;;  exp             1    3[COMMON] unsigned char 
  8794 ;;  sign            1    4[COMMON] unsigned char 
  8795 ;; Auto vars:     Size  Location     Type
  8796 ;;		None
  8797 ;; Return value:  Size  Location     Type
  8798 ;;                  3    0[COMMON] float 
  8799 ;; Registers used:
  8800 ;;		wreg, status,2, status,0
  8801 ;; Tracked objects:
  8802 ;;		On entry : 0/0
  8803 ;;		On exit  : 0/0
  8804 ;;		Unchanged: 0/0
  8805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8806 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;Total ram usage:        8 bytes
  8811 ;; Hardware stack levels used:    1
  8812 ;; This function calls:
  8813 ;;		Nothing
  8814 ;; This function is called by:
  8815 ;;		___ftadd
  8816 ;;		___ftdiv
  8817 ;;		___ftmul
  8818 ;;		___lltoft
  8819 ;;		___lwtoft
  8820 ;; This function uses a non-reentrant model
  8821 ;;
  8822                           
  8823                           
  8824                           ;psect for function ___ftpack
  8825  1502                     ___ftpack:	
  8826                           
  8827                           ;incstack = 0
  8828                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8829  1502  0873               	movf	___ftpack@exp,w
  8830  1503  1903               	btfsc	3,2
  8831  1504  2D0A               	goto	l2056
  8832  1505  0872               	movf	___ftpack@arg+2,w
  8833  1506  0471               	iorwf	___ftpack@arg+1,w
  8834  1507  0470               	iorwf	___ftpack@arg,w
  8835  1508  1D03               	skipz
  8836  1509  2D1B               	goto	l2062
  8837  150A                     l2056:	
  8838  150A  3000               	movlw	0
  8839  150B  00F0               	movwf	?___ftpack
  8840  150C  3000               	movlw	0
  8841  150D  00F1               	movwf	?___ftpack+1
  8842  150E  3000               	movlw	0
  8843  150F  00F2               	movwf	?___ftpack+2
  8844  1510  0008               	return
  8845  1511                     l2060:	
  8846  1511  3001               	movlw	1
  8847  1512  00F5               	movwf	??___ftpack
  8848  1513  0875               	movf	??___ftpack,w
  8849  1514  07F3               	addwf	___ftpack@exp,f
  8850  1515  3001               	movlw	1
  8851  1516                     u2345:	
  8852  1516  36F2               	lsrf	___ftpack@arg+2,f
  8853  1517  0CF1               	rrf	___ftpack@arg+1,f
  8854  1518  0CF0               	rrf	___ftpack@arg,f
  8855  1519  0B89               	decfsz	9,f
  8856  151A  2D16               	goto	u2345
  8857  151B                     l2062:	
  8858  151B  30FE               	movlw	254
  8859  151C  0572               	andwf	___ftpack@arg+2,w
  8860  151D  1903               	btfsc	3,2
  8861  151E  2D34               	goto	l505
  8862  151F  2D11               	goto	l2060
  8863  1520                     l2064:	
  8864  1520  3001               	movlw	1
  8865  1521  00F5               	movwf	??___ftpack
  8866  1522  0875               	movf	??___ftpack,w
  8867  1523  07F3               	addwf	___ftpack@exp,f
  8868  1524  3001               	movlw	1
  8869  1525  07F0               	addwf	___ftpack@arg,f
  8870  1526  3000               	movlw	0
  8871  1527  1803               	skipnc
  8872  1528  3001               	movlw	1
  8873  1529  07F1               	addwf	___ftpack@arg+1,f
  8874  152A  3000               	movlw	0
  8875  152B  1803               	skipnc
  8876  152C  3001               	movlw	1
  8877  152D  07F2               	addwf	___ftpack@arg+2,f
  8878  152E  3001               	movlw	1
  8879  152F                     u2365:	
  8880  152F  36F2               	lsrf	___ftpack@arg+2,f
  8881  1530  0CF1               	rrf	___ftpack@arg+1,f
  8882  1531  0CF0               	rrf	___ftpack@arg,f
  8883  1532  0B89               	decfsz	9,f
  8884  1533  2D2F               	goto	u2365
  8885  1534                     l505:	
  8886  1534  30FF               	movlw	255
  8887  1535  0572               	andwf	___ftpack@arg+2,w
  8888  1536  1903               	btfsc	3,2
  8889  1537  2D41               	goto	l2072
  8890  1538  2D20               	goto	l2064
  8891  1539                     l2070:	
  8892  1539  3001               	movlw	1
  8893  153A  02F3               	subwf	___ftpack@exp,f
  8894  153B  3001               	movlw	1
  8895  153C                     u2385:	
  8896  153C  35F0               	lslf	___ftpack@arg,f
  8897  153D  0DF1               	rlf	___ftpack@arg+1,f
  8898  153E  0DF2               	rlf	___ftpack@arg+2,f
  8899  153F  0B89               	decfsz	9,f
  8900  1540  2D3C               	goto	u2385
  8901  1541                     l2072:	
  8902  1541  1BF1               	btfsc	___ftpack@arg+1,7
  8903  1542  2D47               	goto	l512
  8904  1543  3002               	movlw	2
  8905  1544  0273               	subwf	___ftpack@exp,w
  8906  1545  1803               	skipnc
  8907  1546  2D39               	goto	l2070
  8908  1547                     l512:	
  8909  1547  1873               	btfsc	___ftpack@exp,0
  8910  1548  2D4F               	goto	l513
  8911  1549  30FF               	movlw	255
  8912  154A  05F0               	andwf	___ftpack@arg,f
  8913  154B  307F               	movlw	127
  8914  154C  05F1               	andwf	___ftpack@arg+1,f
  8915  154D  30FF               	movlw	255
  8916  154E  05F2               	andwf	___ftpack@arg+2,f
  8917  154F                     l513:	
  8918  154F  1003               	clrc
  8919  1550  0CF3               	rrf	___ftpack@exp,f
  8920  1551  0873               	movf	___ftpack@exp,w
  8921  1552  00F5               	movwf	??___ftpack
  8922  1553  01F6               	clrf	??___ftpack+1
  8923  1554  01F7               	clrf	??___ftpack+2
  8924  1555  3010               	movlw	16
  8925  1556                     u2425:	
  8926  1556  35F5               	lslf	??___ftpack,f
  8927  1557  0DF6               	rlf	??___ftpack+1,f
  8928  1558  0DF7               	rlf	??___ftpack+2,f
  8929  1559  0B89               	decfsz	9,f
  8930  155A  2D56               	goto	u2425
  8931  155B  0875               	movf	??___ftpack,w
  8932  155C  04F0               	iorwf	___ftpack@arg,f
  8933  155D  0876               	movf	??___ftpack+1,w
  8934  155E  04F1               	iorwf	___ftpack@arg+1,f
  8935  155F  0877               	movf	??___ftpack+2,w
  8936  1560  04F2               	iorwf	___ftpack@arg+2,f
  8937  1561  0874               	movf	___ftpack@sign,w
  8938  1562  1903               	btfsc	3,2
  8939  1563  0008               	return
  8940  1564  17F2               	bsf	___ftpack@arg+2,7
  8941  1565  0008               	return
  8942  1566                     __end_of___ftpack:	
  8943                           
  8944                           	psect	text23
  8945  11B8                     __ptext23:	
  8946 ;; *************** function _SYSTEM_Initialize *****************
  8947 ;; Defined at:
  8948 ;;		line 86 in file "mcc_generated_files/mcc.c"
  8949 ;; Parameters:    Size  Location     Type
  8950 ;;		None
  8951 ;; Auto vars:     Size  Location     Type
  8952 ;;		None
  8953 ;; Return value:  Size  Location     Type
  8954 ;;                  1    wreg      void 
  8955 ;; Registers used:
  8956 ;;		wreg, status,2, status,0, pclath, cstack
  8957 ;; Tracked objects:
  8958 ;;		On entry : 0/0
  8959 ;;		On exit  : 0/0
  8960 ;;		Unchanged: 0/0
  8961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;Total ram usage:        0 bytes
  8967 ;; Hardware stack levels used:    1
  8968 ;; Hardware stack levels required when called:    1
  8969 ;; This function calls:
  8970 ;;		_OSCILLATOR_Initialize
  8971 ;;		_PIN_MANAGER_Initialize
  8972 ;; This function is called by:
  8973 ;;		_main
  8974 ;; This function uses a non-reentrant model
  8975 ;;
  8976                           
  8977                           
  8978                           ;psect for function _SYSTEM_Initialize
  8979  11B8                     _SYSTEM_Initialize:	
  8980                           
  8981                           ;mcc.c: 89: PIN_MANAGER_Initialize();
  8982                           
  8983                           ;incstack = 0
  8984                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8985  11B8  3191  21EF  3191   	fcall	_PIN_MANAGER_Initialize
  8986                           
  8987                           ;mcc.c: 90: OSCILLATOR_Initialize();
  8988  11BB  3180  2004         	fcall	_OSCILLATOR_Initialize
  8989  11BD  0008               	return
  8990  11BE                     __end_of_SYSTEM_Initialize:	
  8991                           
  8992                           	psect	text24
  8993  11EF                     __ptext24:	
  8994 ;; *************** function _PIN_MANAGER_Initialize *****************
  8995 ;; Defined at:
  8996 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8997 ;; Parameters:    Size  Location     Type
  8998 ;;		None
  8999 ;; Auto vars:     Size  Location     Type
  9000 ;;		None
  9001 ;; Return value:  Size  Location     Type
  9002 ;;                  1    wreg      void 
  9003 ;; Registers used:
  9004 ;;		wreg, status,2
  9005 ;; Tracked objects:
  9006 ;;		On entry : 0/0
  9007 ;;		On exit  : 0/0
  9008 ;;		Unchanged: 0/0
  9009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9014 ;;Total ram usage:        0 bytes
  9015 ;; Hardware stack levels used:    1
  9016 ;; This function calls:
  9017 ;;		Nothing
  9018 ;; This function is called by:
  9019 ;;		_SYSTEM_Initialize
  9020 ;; This function uses a non-reentrant model
  9021 ;;
  9022                           
  9023                           
  9024                           ;psect for function _PIN_MANAGER_Initialize
  9025  11EF                     _PIN_MANAGER_Initialize:	
  9026                           
  9027                           ;pin_manager.c: 57: LATA = 0x00;
  9028                           
  9029                           ;incstack = 0
  9030                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  9031  11EF  0140               	movlb	0	; select bank0
  9032  11F0  0198               	clrf	24	;volatile
  9033                           
  9034                           ;pin_manager.c: 58: LATC = 0x00;
  9035  11F1  019A               	clrf	26	;volatile
  9036                           
  9037                           ;pin_manager.c: 63: TRISA = 0x07;
  9038  11F2  3007               	movlw	7
  9039  11F3  0092               	movwf	18	;volatile
  9040                           
  9041                           ;pin_manager.c: 64: TRISC = 0x00;
  9042  11F4  0194               	clrf	20	;volatile
  9043                           
  9044                           ;pin_manager.c: 69: ANSELC = 0x00;
  9045  11F5  017E               	movlb	62	; select bank62
  9046  11F6  01CE               	clrf	78	;volatile
  9047                           
  9048                           ;pin_manager.c: 70: ANSELA = 0x07;
  9049  11F7  3007               	movlw	7
  9050  11F8  00B8               	movwf	56	;volatile
  9051                           
  9052                           ;pin_manager.c: 75: WPUA = 0x00;
  9053  11F9  01B9               	clrf	57	;volatile
  9054                           
  9055                           ;pin_manager.c: 76: WPUC = 0x00;
  9056  11FA  01CF               	clrf	79	;volatile
  9057                           
  9058                           ;pin_manager.c: 81: ODCONA = 0x18;
  9059  11FB  3018               	movlw	24
  9060  11FC  00BA               	movwf	58	;volatile
  9061                           
  9062                           ;pin_manager.c: 82: ODCONC = 0x00;
  9063  11FD  01D0               	clrf	80	;volatile
  9064  11FE  0008               	return
  9065  11FF                     __end_of_PIN_MANAGER_Initialize:	
  9066                           
  9067                           	psect	text25
  9068  0004                     __ptext25:	
  9069 ;; *************** function _OSCILLATOR_Initialize *****************
  9070 ;; Defined at:
  9071 ;;		line 93 in file "mcc_generated_files/mcc.c"
  9072 ;; Parameters:    Size  Location     Type
  9073 ;;		None
  9074 ;; Auto vars:     Size  Location     Type
  9075 ;;		None
  9076 ;; Return value:  Size  Location     Type
  9077 ;;                  1    wreg      void 
  9078 ;; Registers used:
  9079 ;;		wreg, status,2
  9080 ;; Tracked objects:
  9081 ;;		On entry : 0/0
  9082 ;;		On exit  : 0/0
  9083 ;;		Unchanged: 0/0
  9084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9089 ;;Total ram usage:        0 bytes
  9090 ;; Hardware stack levels used:    1
  9091 ;; This function calls:
  9092 ;;		Nothing
  9093 ;; This function is called by:
  9094 ;;		_SYSTEM_Initialize
  9095 ;; This function uses a non-reentrant model
  9096 ;;
  9097                           
  9098                           
  9099                           ;psect for function _OSCILLATOR_Initialize
  9100  0004                     _OSCILLATOR_Initialize:	
  9101                           
  9102                           ;mcc.c: 96: OSCCON1 = 0x60;
  9103                           
  9104                           ;incstack = 0
  9105                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9106  0004  3060               	movlw	96
  9107  0005  0151               	movlb	17	; select bank17
  9108  0006  008D               	movwf	13	;volatile
  9109                           
  9110                           ;mcc.c: 98: OSCCON3 = 0x00;
  9111  0007  018F               	clrf	15	;volatile
  9112                           
  9113                           ;mcc.c: 100: OSCEN = 0x00;
  9114  0008  0191               	clrf	17	;volatile
  9115                           
  9116                           ;mcc.c: 102: OSCFRQ = 0x06;
  9117  0009  3006               	movlw	6
  9118  000A  0093               	movwf	19	;volatile
  9119                           
  9120                           ;mcc.c: 104: OSCSTAT = 0x00;
  9121  000B  0190               	clrf	16	;volatile
  9122                           
  9123                           ;mcc.c: 106: OSCTUNE = 0x00;
  9124  000C  0192               	clrf	18	;volatile
  9125  000D  0008               	return
  9126  000E                     __end_of_OSCILLATOR_Initialize:	
  9127                           
  9128                           	psect	text26
  9129  11FF                     __ptext26:	
  9130 ;; *************** function _OW_write_byte *****************
  9131 ;; Defined at:
  9132 ;;		line 143 in file "1-wire.h"
  9133 ;; Parameters:    Size  Location     Type
  9134 ;;  write_data      1    wreg     unsigned char 
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;  write_data      1    2[COMMON] unsigned char 
  9137 ;;  loop            1    3[COMMON] unsigned char 
  9138 ;; Return value:  Size  Location     Type
  9139 ;;                  1    wreg      void 
  9140 ;; Registers used:
  9141 ;;		wreg, status,2, status,0, pclath, cstack
  9142 ;; Tracked objects:
  9143 ;;		On entry : 0/0
  9144 ;;		On exit  : 0/0
  9145 ;;		Unchanged: 0/0
  9146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9148 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9151 ;;Total ram usage:        3 bytes
  9152 ;; Hardware stack levels used:    1
  9153 ;; Hardware stack levels required when called:    2
  9154 ;; This function calls:
  9155 ;;		_OW_write_bit
  9156 ;; This function is called by:
  9157 ;;		_main
  9158 ;; This function uses a non-reentrant model
  9159 ;;
  9160                           
  9161                           
  9162                           ;psect for function _OW_write_byte
  9163  11FF                     _OW_write_byte:	
  9164                           
  9165                           ;incstack = 0
  9166                           ; Regs used in _OW_write_byte: [wreg+status,2+status,0+pclath+cstack]
  9167                           ;OW_write_byte@write_data stored from wreg
  9168  11FF  00F2               	movwf	OW_write_byte@write_data
  9169                           
  9170                           ;1-wire.h: 145: unsigned char loop;
  9171                           ;1-wire.h: 146: for (loop = 0; loop < 8; loop++)
  9172  1200  01F3               	clrf	OW_write_byte@loop
  9173  1201                     L11:	
  9174  1201  3008               	movlw	8
  9175  1202  0273               	subwf	OW_write_byte@loop,w
  9176  1203  1803               	btfsc	3,0
  9177  1204  0008               	return
  9178                           
  9179                           ;1-wire.h: 147: {
  9180                           ;1-wire.h: 148: OW_write_bit(write_data & 0x01);
  9181  1205  0872               	movf	OW_write_byte@write_data,w
  9182  1206  3901               	andlw	1
  9183  1207  3192  22D4  3191   	fcall	_OW_write_bit
  9184                           
  9185                           ;1-wire.h: 149: write_data >>= 1;
  9186  120A  1003               	clrc
  9187  120B  0CF2               	rrf	OW_write_byte@write_data,f
  9188  120C  3001               	movlw	1
  9189  120D  00F1               	movwf	??_OW_write_byte
  9190  120E  0871               	movf	??_OW_write_byte,w
  9191  120F  07F3               	addwf	OW_write_byte@loop,f
  9192  1210  2A01               	goto	L11
  9193  1211                     __end_of_OW_write_byte:	
  9194                           
  9195                           	psect	text27
  9196  12D4                     __ptext27:	
  9197 ;; *************** function _OW_write_bit *****************
  9198 ;; Defined at:
  9199 ;;		line 94 in file "1-wire.h"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;  write_bit       1    wreg     unsigned char 
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  write_bit       1    0[COMMON] unsigned char 
  9204 ;; Return value:  Size  Location     Type
  9205 ;;                  1    wreg      void 
  9206 ;; Registers used:
  9207 ;;		wreg, status,2, status,0, pclath, cstack
  9208 ;; Tracked objects:
  9209 ;;		On entry : 0/0
  9210 ;;		On exit  : 0/0
  9211 ;;		Unchanged: 0/0
  9212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9214 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;Total ram usage:        1 bytes
  9218 ;; Hardware stack levels used:    1
  9219 ;; Hardware stack levels required when called:    1
  9220 ;; This function calls:
  9221 ;;		_drive_OW_high
  9222 ;;		_drive_OW_low
  9223 ;; This function is called by:
  9224 ;;		_OW_write_byte
  9225 ;; This function uses a non-reentrant model
  9226 ;;
  9227                           
  9228                           
  9229                           ;psect for function _OW_write_bit
  9230  12D4                     _OW_write_bit:	
  9231                           
  9232                           ;incstack = 0
  9233                           ; Regs used in _OW_write_bit: [wreg+status,2+status,0+pclath+cstack]
  9234                           ;OW_write_bit@write_bit stored from wreg
  9235  12D4  00F0               	movwf	OW_write_bit@write_bit
  9236                           
  9237                           ;1-wire.h: 96: if (write_bit)
  9238  12D5  0870               	movf	OW_write_bit@write_bit,w
  9239  12D6  1903               	btfsc	3,2
  9240  12D7  2AE6               	goto	l2366
  9241                           
  9242                           ;1-wire.h: 97: {
  9243                           ;1-wire.h: 99: drive_OW_low();
  9244  12D8  3188  2000  3192   	fcall	_drive_OW_low
  9245                           
  9246                           ;1-wire.h: 100: _delay((unsigned long)((6)*(32000000/4000000.0)));
  9247  12DB  3010               	movlw	16
  9248  12DC                     u4697:	
  9249  12DC  0B89               	decfsz	9,f
  9250  12DD  2ADC               	goto	u4697
  9251                           
  9252                           ;1-wire.h: 101: drive_OW_high ();
  9253  12DE  3191  21B4  3192   	fcall	_drive_OW_high
  9254                           
  9255                           ;1-wire.h: 102: _delay((unsigned long)((64)*(32000000/4000000.0)));
  9256  12E1  30AA               	movlw	170
  9257  12E2                     u4707:	
  9258  12E2  0B89               	decfsz	9,f
  9259  12E3  2AE2               	goto	u4707
  9260  12E4  3200               	nop2
  9261                           
  9262                           ;1-wire.h: 103: }
  9263  12E5  0008               	return
  9264  12E6                     l2366:	
  9265                           
  9266                           ;1-wire.h: 104: else
  9267                           ;1-wire.h: 105: {
  9268                           ;1-wire.h: 107: drive_OW_low();
  9269  12E6  3188  2000  3192   	fcall	_drive_OW_low
  9270                           
  9271                           ;1-wire.h: 108: _delay((unsigned long)((60)*(32000000/4000000.0)));
  9272  12E9  30A0               	movlw	160
  9273  12EA                     u4717:	
  9274  12EA  0B89               	decfsz	9,f
  9275  12EB  2AEA               	goto	u4717
  9276                           
  9277                           ;1-wire.h: 109: drive_OW_high ();
  9278  12EC  3191  21B4  3192   	fcall	_drive_OW_high
  9279                           
  9280                           ;1-wire.h: 110: _delay((unsigned long)((10)*(32000000/4000000.0)));
  9281  12EF  301A               	movlw	26
  9282  12F0                     u4727:	
  9283  12F0  0B89               	decfsz	9,f
  9284  12F1  2AF0               	goto	u4727
  9285  12F2  3200               	nop2
  9286  12F3  0008               	return
  9287  12F4                     __end_of_OW_write_bit:	
  9288                           
  9289                           	psect	text28
  9290  12F4                     __ptext28:	
  9291 ;; *************** function _OW_reset_pulse *****************
  9292 ;; Defined at:
  9293 ;;		line 72 in file "1-wire.h"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;		None
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;  presence_det    1    2[COMMON] unsigned char 
  9298 ;; Return value:  Size  Location     Type
  9299 ;;                  1    wreg      unsigned char 
  9300 ;; Registers used:
  9301 ;;		wreg, status,2, status,0, pclath, cstack
  9302 ;; Tracked objects:
  9303 ;;		On entry : 0/0
  9304 ;;		On exit  : 0/0
  9305 ;;		Unchanged: 0/0
  9306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9308 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9309 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9310 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;Total ram usage:        2 bytes
  9312 ;; Hardware stack levels used:    1
  9313 ;; Hardware stack levels required when called:    1
  9314 ;; This function calls:
  9315 ;;		_drive_OW_high
  9316 ;;		_drive_OW_low
  9317 ;;		_read_OW
  9318 ;; This function is called by:
  9319 ;;		_main
  9320 ;; This function uses a non-reentrant model
  9321 ;;
  9322                           
  9323                           
  9324                           ;psect for function _OW_reset_pulse
  9325  12F4                     _OW_reset_pulse:	
  9326                           
  9327                           ;1-wire.h: 74: unsigned char presence_detect;
  9328                           ;1-wire.h: 75: drive_OW_low();
  9329                           
  9330                           ;incstack = 0
  9331                           ; Regs used in _OW_reset_pulse: [wreg+status,2+status,0+pclath+cstack]
  9332  12F4  3188  2000  3192   	fcall	_drive_OW_low
  9333                           
  9334                           ;1-wire.h: 76: _delay((unsigned long)((500)*(32000000/4000000.0)));
  9335  12F7  3006               	movlw	6
  9336  12F8  00F1               	movwf	??_OW_reset_pulse
  9337  12F9  3030               	movlw	48
  9338  12FA                     u4737:	
  9339  12FA  0B89               	decfsz	9,f
  9340  12FB  2AFA               	goto	u4737
  9341  12FC  0BF1               	decfsz	??_OW_reset_pulse,f
  9342  12FD  2AFA               	goto	u4737
  9343  12FE  3200               	nop2
  9344                           
  9345                           ;1-wire.h: 77: drive_OW_high ();
  9346  12FF  3191  21B4  3192   	fcall	_drive_OW_high
  9347                           
  9348                           ;1-wire.h: 78: _delay((unsigned long)((100)*(32000000/4000000.0)));
  9349  1302  30A0               	movlw	160
  9350  1303                     u4747:	
  9351  1303  3200               	nop2
  9352  1304  0B89               	decfsz	9,f
  9353  1305  2B03               	goto	u4747
  9354                           
  9355                           ;1-wire.h: 79: presence_detect = read_OW();
  9356  1306  3191  21D6  3192   	fcall	_read_OW
  9357  1309  00F1               	movwf	??_OW_reset_pulse
  9358  130A  0871               	movf	??_OW_reset_pulse,w
  9359  130B  00F2               	movwf	OW_reset_pulse@presence_detect
  9360                           
  9361                           ;1-wire.h: 80: _delay((unsigned long)((410)*(32000000/4000000.0)));
  9362  130C  3005               	movlw	5
  9363  130D  00F1               	movwf	??_OW_reset_pulse
  9364  130E  3041               	movlw	65
  9365  130F                     u4757:	
  9366  130F  0B89               	decfsz	9,f
  9367  1310  2B0F               	goto	u4757
  9368  1311  0BF1               	decfsz	??_OW_reset_pulse,f
  9369  1312  2B0F               	goto	u4757
  9370  1313  0000               	nop
  9371                           
  9372                           ;1-wire.h: 81: drive_OW_high ();
  9373  1314  3191  21B4         	fcall	_drive_OW_high
  9374                           
  9375                           ;1-wire.h: 82: return presence_detect;
  9376  1316  0872               	movf	OW_reset_pulse@presence_detect,w
  9377  1317  0008               	return
  9378  1318                     __end_of_OW_reset_pulse:	
  9379                           
  9380                           	psect	text29
  9381  1268                     __ptext29:	
  9382 ;; *************** function _OW_read_byte *****************
  9383 ;; Defined at:
  9384 ;;		line 161 in file "1-wire.h"
  9385 ;; Parameters:    Size  Location     Type
  9386 ;;		None
  9387 ;; Auto vars:     Size  Location     Type
  9388 ;;  loop            1    5[COMMON] unsigned char 
  9389 ;;  result          1    4[COMMON] unsigned char 
  9390 ;; Return value:  Size  Location     Type
  9391 ;;                  1    wreg      unsigned char 
  9392 ;; Registers used:
  9393 ;;		wreg, status,2, status,0, pclath, cstack
  9394 ;; Tracked objects:
  9395 ;;		On entry : 0/0
  9396 ;;		On exit  : 0/0
  9397 ;;		Unchanged: 0/0
  9398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9400 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9401 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9402 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9403 ;;Total ram usage:        3 bytes
  9404 ;; Hardware stack levels used:    1
  9405 ;; Hardware stack levels required when called:    2
  9406 ;; This function calls:
  9407 ;;		_OW_read_bit
  9408 ;; This function is called by:
  9409 ;;		_main
  9410 ;; This function uses a non-reentrant model
  9411 ;;
  9412                           
  9413                           
  9414                           ;psect for function _OW_read_byte
  9415  1268                     _OW_read_byte:	
  9416                           
  9417                           ;1-wire.h: 163: unsigned char loop, result=0;
  9418                           
  9419                           ;incstack = 0
  9420                           ; Regs used in _OW_read_byte: [wreg+status,2+status,0+pclath+cstack]
  9421  1268  01F4               	clrf	OW_read_byte@result
  9422                           
  9423                           ;1-wire.h: 164: for (loop = 0; loop < 8; loop++)
  9424  1269  01F5               	clrf	OW_read_byte@loop
  9425  126A  3008               	movlw	8
  9426  126B  0275               	subwf	OW_read_byte@loop,w
  9427  126C  1803               	btfsc	3,0
  9428  126D  2A7E               	goto	l2822
  9429                           
  9430                           ;1-wire.h: 165: {
  9431                           ;1-wire.h: 166: result >>= 1;
  9432  126E  1003               	clrc
  9433  126F                     L12:	
  9434  126F  0CF4               	rrf	OW_read_byte@result,f
  9435                           
  9436                           ;1-wire.h: 167: if (OW_read_bit())
  9437  1270  3192  2250  3192   	fcall	_OW_read_bit
  9438  1273  3A00               	xorlw	0
  9439  1274  1D03               	btfss	3,2
  9440                           
  9441                           ;1-wire.h: 168: result |= 0x80;
  9442  1275  17F4               	bsf	OW_read_byte@result,7
  9443  1276  3001               	movlw	1
  9444  1277  00F3               	movwf	??_OW_read_byte
  9445  1278  0873               	movf	??_OW_read_byte,w
  9446  1279  07F5               	addwf	OW_read_byte@loop,f
  9447  127A  3008               	movlw	8
  9448  127B  0275               	subwf	OW_read_byte@loop,w
  9449  127C  1C03               	skipc
  9450  127D  2A6F               	goto	L12
  9451  127E                     l2822:	
  9452                           
  9453                           ;1-wire.h: 169: }
  9454                           ;1-wire.h: 170: return result;
  9455  127E  0874               	movf	OW_read_byte@result,w
  9456  127F  0008               	return
  9457  1280                     __end_of_OW_read_byte:	
  9458                           
  9459                           	psect	text30
  9460  1250                     __ptext30:	
  9461 ;; *************** function _OW_read_bit *****************
  9462 ;; Defined at:
  9463 ;;		line 122 in file "1-wire.h"
  9464 ;; Parameters:    Size  Location     Type
  9465 ;;		None
  9466 ;; Auto vars:     Size  Location     Type
  9467 ;;  read_data       1    2[COMMON] unsigned char 
  9468 ;; Return value:  Size  Location     Type
  9469 ;;                  1    wreg      unsigned char 
  9470 ;; Registers used:
  9471 ;;		wreg, status,2, status,0, pclath, cstack
  9472 ;; Tracked objects:
  9473 ;;		On entry : 0/0
  9474 ;;		On exit  : 0/0
  9475 ;;		Unchanged: 0/0
  9476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;Total ram usage:        2 bytes
  9482 ;; Hardware stack levels used:    1
  9483 ;; Hardware stack levels required when called:    1
  9484 ;; This function calls:
  9485 ;;		_drive_OW_high
  9486 ;;		_drive_OW_low
  9487 ;;		_read_OW
  9488 ;; This function is called by:
  9489 ;;		_OW_read_byte
  9490 ;; This function uses a non-reentrant model
  9491 ;;
  9492                           
  9493                           
  9494                           ;psect for function _OW_read_bit
  9495  1250                     _OW_read_bit:	
  9496                           
  9497                           ;1-wire.h: 124: unsigned char read_data;
  9498                           ;1-wire.h: 126: drive_OW_low();
  9499                           
  9500                           ;incstack = 0
  9501                           ; Regs used in _OW_read_bit: [wreg+status,2+status,0+pclath+cstack]
  9502  1250  3188  2000  3192   	fcall	_drive_OW_low
  9503                           
  9504                           ;1-wire.h: 127: _delay((unsigned long)((6)*(32000000/4000000.0)));
  9505  1253  3010               	movlw	16
  9506  1254                     u4767:	
  9507  1254  0B89               	decfsz	9,f
  9508  1255  2A54               	goto	u4767
  9509                           
  9510                           ;1-wire.h: 128: drive_OW_high ();
  9511  1256  3191  21B4  3192   	fcall	_drive_OW_high
  9512                           
  9513                           ;1-wire.h: 129: _delay((unsigned long)((9)*(32000000/4000000.0)));
  9514  1259  3018               	movlw	24
  9515  125A                     u4777:	
  9516  125A  0B89               	decfsz	9,f
  9517  125B  2A5A               	goto	u4777
  9518                           
  9519                           ;1-wire.h: 130: read_data = read_OW();
  9520  125C  3191  21D6  3192   	fcall	_read_OW
  9521  125F  00F1               	movwf	??_OW_read_bit
  9522  1260  0871               	movf	??_OW_read_bit,w
  9523  1261  00F2               	movwf	OW_read_bit@read_data
  9524                           
  9525                           ;1-wire.h: 131: _delay((unsigned long)((65)*(32000000/4000000.0)));
  9526  1262  30AD               	movlw	173
  9527  1263                     u4787:	
  9528  1263  0B89               	decfsz	9,f
  9529  1264  2A63               	goto	u4787
  9530  1265  0000               	nop
  9531                           
  9532                           ;1-wire.h: 132: return read_data;
  9533  1266  0872               	movf	OW_read_bit@read_data,w
  9534  1267  0008               	return
  9535  1268                     __end_of_OW_read_bit:	
  9536                           
  9537                           	psect	text31
  9538  11D6                     __ptext31:	
  9539 ;; *************** function _read_OW *****************
  9540 ;; Defined at:
  9541 ;;		line 53 in file "1-wire.h"
  9542 ;; Parameters:    Size  Location     Type
  9543 ;;		None
  9544 ;; Auto vars:     Size  Location     Type
  9545 ;;  read_data       1    0[COMMON] unsigned char 
  9546 ;; Return value:  Size  Location     Type
  9547 ;;                  1    wreg      unsigned char 
  9548 ;; Registers used:
  9549 ;;		wreg, status,2
  9550 ;; Tracked objects:
  9551 ;;		On entry : 0/0
  9552 ;;		On exit  : 0/0
  9553 ;;		Unchanged: 0/0
  9554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9556 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9558 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9559 ;;Total ram usage:        1 bytes
  9560 ;; Hardware stack levels used:    1
  9561 ;; This function calls:
  9562 ;;		Nothing
  9563 ;; This function is called by:
  9564 ;;		_OW_reset_pulse
  9565 ;;		_OW_read_bit
  9566 ;; This function uses a non-reentrant model
  9567 ;;
  9568                           
  9569                           
  9570                           ;psect for function _read_OW
  9571  11D6                     _read_OW:	
  9572                           
  9573                           ;1-wire.h: 55: unsigned char read_data=0;
  9574                           
  9575                           ;incstack = 0
  9576                           ; Regs used in _read_OW: [wreg+status,2]
  9577  11D6  01F0               	clrf	read_OW@read_data
  9578                           
  9579                           ;1-wire.h: 56: LATAbits.LATA5 = 1;
  9580  11D7  0140               	movlb	0	; select bank0
  9581  11D8  1698               	bsf	24,5	;volatile
  9582                           
  9583                           ;1-wire.h: 57: if (1 == PORTAbits.RA5)
  9584  11D9  1E8C               	btfss	12,5	;volatile
  9585  11DA  29DE               	goto	l2096
  9586                           
  9587                           ;1-wire.h: 58: read_data = 1;
  9588  11DB  01F0               	clrf	read_OW@read_data
  9589  11DC  0AF0               	incf	read_OW@read_data,f
  9590  11DD  29DF               	goto	l2098
  9591  11DE                     l2096:	
  9592                           
  9593                           ;1-wire.h: 59: else
  9594                           ;1-wire.h: 60: read_data = 0;
  9595  11DE  01F0               	clrf	read_OW@read_data
  9596  11DF                     l2098:	
  9597                           
  9598                           ;1-wire.h: 61: return read_data;
  9599  11DF  0870               	movf	read_OW@read_data,w
  9600  11E0  0008               	return
  9601  11E1                     __end_of_read_OW:	
  9602                           
  9603                           	psect	text32
  9604  0800                     __ptext32:	
  9605 ;; *************** function _drive_OW_low *****************
  9606 ;; Defined at:
  9607 ;;		line 27 in file "1-wire.h"
  9608 ;; Parameters:    Size  Location     Type
  9609 ;;		None
  9610 ;; Auto vars:     Size  Location     Type
  9611 ;;		None
  9612 ;; Return value:  Size  Location     Type
  9613 ;;                  1    wreg      void 
  9614 ;; Registers used:
  9615 ;;		None
  9616 ;; Tracked objects:
  9617 ;;		On entry : 0/0
  9618 ;;		On exit  : 0/0
  9619 ;;		Unchanged: 0/0
  9620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9625 ;;Total ram usage:        0 bytes
  9626 ;; Hardware stack levels used:    1
  9627 ;; This function calls:
  9628 ;;		Nothing
  9629 ;; This function is called by:
  9630 ;;		_OW_reset_pulse
  9631 ;;		_OW_write_bit
  9632 ;;		_OW_read_bit
  9633 ;; This function uses a non-reentrant model
  9634 ;;
  9635                           
  9636                           
  9637                           ;psect for function _drive_OW_low
  9638  0800                     _drive_OW_low:	
  9639                           
  9640                           ;1-wire.h: 29: TRISAbits.TRISA5 = 0;
  9641                           
  9642                           ;incstack = 0
  9643                           ; Regs used in _drive_OW_low: []
  9644  0800  0140               	movlb	0	; select bank0
  9645  0801  1292               	bcf	18,5	;volatile
  9646                           
  9647                           ;1-wire.h: 30: LATAbits.LATA5=0;
  9648  0802  1298               	bcf	24,5	;volatile
  9649  0803  0008               	return
  9650  0804                     __end_of_drive_OW_low:	
  9651                           
  9652                           	psect	text33
  9653  11B4                     __ptext33:	
  9654 ;; *************** function _drive_OW_high *****************
  9655 ;; Defined at:
  9656 ;;		line 40 in file "1-wire.h"
  9657 ;; Parameters:    Size  Location     Type
  9658 ;;		None
  9659 ;; Auto vars:     Size  Location     Type
  9660 ;;		None
  9661 ;; Return value:  Size  Location     Type
  9662 ;;                  1    wreg      void 
  9663 ;; Registers used:
  9664 ;;		None
  9665 ;; Tracked objects:
  9666 ;;		On entry : 0/0
  9667 ;;		On exit  : 0/0
  9668 ;;		Unchanged: 0/0
  9669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;Total ram usage:        0 bytes
  9675 ;; Hardware stack levels used:    1
  9676 ;; This function calls:
  9677 ;;		Nothing
  9678 ;; This function is called by:
  9679 ;;		_OW_reset_pulse
  9680 ;;		_OW_write_bit
  9681 ;;		_OW_read_bit
  9682 ;; This function uses a non-reentrant model
  9683 ;;
  9684                           
  9685                           
  9686                           ;psect for function _drive_OW_high
  9687  11B4                     _drive_OW_high:	
  9688                           
  9689                           ;1-wire.h: 42: TRISAbits.TRISA5 = 0;
  9690                           
  9691                           ;incstack = 0
  9692                           ; Regs used in _drive_OW_high: []
  9693  11B4  0140               	movlb	0	; select bank0
  9694  11B5  1292               	bcf	18,5	;volatile
  9695                           
  9696                           ;1-wire.h: 43: LATAbits.LATA5 = 1;
  9697  11B6  1698               	bsf	24,5	;volatile
  9698  11B7  0008               	return
  9699  11B8                     __end_of_drive_OW_high:	
  9700                           
  9701                           	psect	text34
  9702  1280                     __ptext34:	
  9703 ;; *************** function _Lcd_Write_String *****************
  9704 ;; Defined at:
  9705 ;;		line 97 in file "lcd.h"
  9706 ;; Parameters:    Size  Location     Type
  9707 ;;  a               2    5[COMMON] PTR unsigned char 
  9708 ;;		 -> STR_6(16), STR_4(13), main@buffer(20), STR_2(16), 
  9709 ;; Auto vars:     Size  Location     Type
  9710 ;;  i               2    8[COMMON] int 
  9711 ;; Return value:  Size  Location     Type
  9712 ;;                  1    wreg      void 
  9713 ;; Registers used:
  9714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9715 ;; Tracked objects:
  9716 ;;		On entry : 0/0
  9717 ;;		On exit  : 0/0
  9718 ;;		Unchanged: 0/0
  9719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9720 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9723 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;Total ram usage:        5 bytes
  9725 ;; Hardware stack levels used:    1
  9726 ;; Hardware stack levels required when called:    2
  9727 ;; This function calls:
  9728 ;;		_Lcd_Write_Char
  9729 ;; This function is called by:
  9730 ;;		_main
  9731 ;; This function uses a non-reentrant model
  9732 ;;
  9733                           
  9734                           
  9735                           ;psect for function _Lcd_Write_String
  9736  1280                     _Lcd_Write_String:	
  9737                           
  9738                           ;lcd.h: 99: int i;
  9739                           ;lcd.h: 100: for(i=0;a[i]!='\0';i++)
  9740                           
  9741                           ;incstack = 0
  9742                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9743  1280  01F8               	clrf	Lcd_Write_String@i
  9744  1281  01F9               	clrf	Lcd_Write_String@i+1
  9745  1282                     l2864:	
  9746  1282  0875               	movf	Lcd_Write_String@a,w
  9747  1283  0778               	addwf	Lcd_Write_String@i,w
  9748  1284  0084               	movwf	4
  9749  1285  0876               	movf	Lcd_Write_String@a+1,w
  9750  1286  3D79               	addwfc	Lcd_Write_String@i+1,w
  9751  1287  0085               	movwf	5
  9752  1288  0012               	moviw fsr0++
  9753  1289  1903               	btfsc	3,2
  9754  128A  0008               	return
  9755                           
  9756                           ;lcd.h: 101: Lcd_Write_Char(a[i]);
  9757  128B  0875               	movf	Lcd_Write_String@a,w
  9758  128C  0778               	addwf	Lcd_Write_String@i,w
  9759  128D  0084               	movwf	4
  9760  128E  0876               	movf	Lcd_Write_String@a+1,w
  9761  128F  3D79               	addwfc	Lcd_Write_String@i+1,w
  9762  1290  0085               	movwf	5
  9763  1291  0800               	movf	0,w	;code access
  9764  1292  3193  2340  3192   	fcall	_Lcd_Write_Char
  9765  1295  3001               	movlw	1
  9766  1296  07F8               	addwf	Lcd_Write_String@i,f
  9767  1297  3000               	movlw	0
  9768  1298  3DF9               	addwfc	Lcd_Write_String@i+1,f
  9769  1299  2A82               	goto	l2864
  9770  129A                     __end_of_Lcd_Write_String:	
  9771                           
  9772                           	psect	text35
  9773  1340                     __ptext35:	
  9774 ;; *************** function _Lcd_Write_Char *****************
  9775 ;; Defined at:
  9776 ;;		line 81 in file "lcd.h"
  9777 ;; Parameters:    Size  Location     Type
  9778 ;;  a               1    wreg     unsigned char 
  9779 ;; Auto vars:     Size  Location     Type
  9780 ;;  a               1    4[COMMON] unsigned char 
  9781 ;;  y               1    3[COMMON] unsigned char 
  9782 ;;  temp            1    2[COMMON] unsigned char 
  9783 ;; Return value:  Size  Location     Type
  9784 ;;                  1    wreg      void 
  9785 ;; Registers used:
  9786 ;;		wreg, status,2, status,0, pclath, cstack
  9787 ;; Tracked objects:
  9788 ;;		On entry : 0/0
  9789 ;;		On exit  : 0/0
  9790 ;;		Unchanged: 0/0
  9791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9796 ;;Total ram usage:        4 bytes
  9797 ;; Hardware stack levels used:    1
  9798 ;; Hardware stack levels required when called:    1
  9799 ;; This function calls:
  9800 ;;		_Lcd_Port
  9801 ;; This function is called by:
  9802 ;;		_Lcd_Write_String
  9803 ;; This function uses a non-reentrant model
  9804 ;;
  9805                           
  9806                           
  9807                           ;psect for function _Lcd_Write_Char
  9808  1340                     _Lcd_Write_Char:	
  9809                           
  9810                           ;incstack = 0
  9811                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  9812                           ;Lcd_Write_Char@a stored from wreg
  9813  1340  00F4               	movwf	Lcd_Write_Char@a
  9814                           
  9815                           ;lcd.h: 83: char temp,y;
  9816                           ;lcd.h: 84: temp = a&0x0F;
  9817  1341  0874               	movf	Lcd_Write_Char@a,w
  9818  1342  390F               	andlw	15
  9819  1343  00F1               	movwf	??_Lcd_Write_Char
  9820  1344  0871               	movf	??_Lcd_Write_Char,w
  9821  1345  00F2               	movwf	Lcd_Write_Char@temp
  9822                           
  9823                           ;lcd.h: 85: y = a&0xF0;
  9824  1346  0874               	movf	Lcd_Write_Char@a,w
  9825  1347  39F0               	andlw	240
  9826  1348  00F1               	movwf	??_Lcd_Write_Char
  9827  1349  0871               	movf	??_Lcd_Write_Char,w
  9828  134A  00F3               	movwf	Lcd_Write_Char@y
  9829                           
  9830                           ;lcd.h: 86: RC0 = 1;
  9831  134B  0140               	movlb	0	; select bank0
  9832  134C  140E               	bsf	14,0	;volatile
  9833                           
  9834                           ;lcd.h: 87: Lcd_Port(y>>4);
  9835  134D  0873               	movf	Lcd_Write_Char@y,w
  9836  134E  00F1               	movwf	??_Lcd_Write_Char
  9837  134F  3004               	movlw	4
  9838  1350                     u3085:	
  9839  1350  36F1               	lsrf	??_Lcd_Write_Char,f
  9840  1351  0B89               	decfsz	9,f
  9841  1352  2B50               	goto	u3085
  9842  1353  0871               	movf	??_Lcd_Write_Char,w
  9843  1354  3192  2238  3193   	fcall	_Lcd_Port
  9844                           
  9845                           ;lcd.h: 88: RC1 = 1;
  9846  1357  0140               	movlb	0	; select bank0
  9847  1358  148E               	bsf	14,1	;volatile
  9848                           
  9849                           ;lcd.h: 89: _delay((unsigned long)((40)*(32000000/4000000.0)));
  9850  1359  306A               	movlw	106
  9851  135A                     u4797:	
  9852  135A  0B89               	decfsz	9,f
  9853  135B  2B5A               	goto	u4797
  9854  135C  3200               	nop2
  9855                           
  9856                           ;lcd.h: 90: RC1 = 0;
  9857  135D  0140               	movlb	0	; select bank0
  9858  135E  108E               	bcf	14,1	;volatile
  9859                           
  9860                           ;lcd.h: 91: Lcd_Port(temp);
  9861  135F  0872               	movf	Lcd_Write_Char@temp,w
  9862  1360  3192  2238  3193   	fcall	_Lcd_Port
  9863                           
  9864                           ;lcd.h: 92: RC1 = 1;
  9865  1363  0140               	movlb	0	; select bank0
  9866  1364  148E               	bsf	14,1	;volatile
  9867                           
  9868                           ;lcd.h: 93: _delay((unsigned long)((40)*(32000000/4000000.0)));
  9869  1365  306A               	movlw	106
  9870  1366                     u4807:	
  9871  1366  0B89               	decfsz	9,f
  9872  1367  2B66               	goto	u4807
  9873  1368  3200               	nop2
  9874                           
  9875                           ;lcd.h: 94: RC1 = 0;
  9876  1369  0140               	movlb	0	; select bank0
  9877  136A  108E               	bcf	14,1	;volatile
  9878  136B  0008               	return
  9879  136C                     __end_of_Lcd_Write_Char:	
  9880                           
  9881                           	psect	text36
  9882  11C6                     __ptext36:	
  9883 ;; *************** function _Lcd_Shift_Left *****************
  9884 ;; Defined at:
  9885 ;;		line 110 in file "lcd.h"
  9886 ;; Parameters:    Size  Location     Type
  9887 ;;		None
  9888 ;; Auto vars:     Size  Location     Type
  9889 ;;		None
  9890 ;; Return value:  Size  Location     Type
  9891 ;;                  1    wreg      void 
  9892 ;; Registers used:
  9893 ;;		wreg, status,2, status,0, pclath, cstack
  9894 ;; Tracked objects:
  9895 ;;		On entry : 0/0
  9896 ;;		On exit  : 0/0
  9897 ;;		Unchanged: 0/0
  9898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;Total ram usage:        0 bytes
  9904 ;; Hardware stack levels used:    1
  9905 ;; Hardware stack levels required when called:    2
  9906 ;; This function calls:
  9907 ;;		_Lcd_Cmd
  9908 ;; This function is called by:
  9909 ;;		_main
  9910 ;; This function uses a non-reentrant model
  9911 ;;
  9912                           
  9913                           
  9914                           ;psect for function _Lcd_Shift_Left
  9915  11C6                     _Lcd_Shift_Left:	
  9916                           
  9917                           ;lcd.h: 112: Lcd_Cmd(0x01);
  9918                           
  9919                           ;incstack = 0
  9920                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  9921  11C6  3001               	movlw	1
  9922  11C7  3192  2224  3191   	fcall	_Lcd_Cmd
  9923                           
  9924                           ;lcd.h: 113: Lcd_Cmd(0x08);
  9925  11CA  3008               	movlw	8
  9926  11CB  3192  2224         	fcall	_Lcd_Cmd
  9927  11CD  0008               	return
  9928  11CE                     __end_of_Lcd_Shift_Left:	
  9929                           
  9930                           	psect	text37
  9931  13A7                     __ptext37:	
  9932 ;; *************** function _Lcd_Set_Cursor *****************
  9933 ;; Defined at:
  9934 ;;		line 41 in file "lcd.h"
  9935 ;; Parameters:    Size  Location     Type
  9936 ;;  a               1    wreg     unsigned char 
  9937 ;;  b               1    3[COMMON] unsigned char 
  9938 ;; Auto vars:     Size  Location     Type
  9939 ;;  a               1    6[COMMON] unsigned char 
  9940 ;;  temp            1    9[COMMON] unsigned char 
  9941 ;;  y               1    8[COMMON] unsigned char 
  9942 ;;  z               1    7[COMMON] unsigned char 
  9943 ;; Return value:  Size  Location     Type
  9944 ;;                  1    wreg      void 
  9945 ;; Registers used:
  9946 ;;		wreg, status,2, status,0, pclath, cstack
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9952 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;Total ram usage:        7 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; Hardware stack levels required when called:    2
  9959 ;; This function calls:
  9960 ;;		_Lcd_Cmd
  9961 ;; This function is called by:
  9962 ;;		_main
  9963 ;; This function uses a non-reentrant model
  9964 ;;
  9965                           
  9966                           
  9967                           ;psect for function _Lcd_Set_Cursor
  9968  13A7                     _Lcd_Set_Cursor:	
  9969                           
  9970                           ;incstack = 0
  9971                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  9972                           ;Lcd_Set_Cursor@a stored from wreg
  9973  13A7  00F6               	movwf	Lcd_Set_Cursor@a
  9974                           
  9975                           ;lcd.h: 43: char temp,z,y;
  9976                           ;lcd.h: 44: if(a == 1)
  9977  13A8  0376               	decf	Lcd_Set_Cursor@a,w
  9978  13A9  1D03               	btfss	3,2
  9979  13AA  2BC7               	goto	l2838
  9980                           
  9981                           ;lcd.h: 45: {
  9982                           ;lcd.h: 46: temp = 0x80 + b - 1;
  9983  13AB  0873               	movf	Lcd_Set_Cursor@b,w
  9984  13AC  3E7F               	addlw	127
  9985  13AD  00F4               	movwf	??_Lcd_Set_Cursor
  9986  13AE  0874               	movf	??_Lcd_Set_Cursor,w
  9987  13AF  00F9               	movwf	Lcd_Set_Cursor@temp
  9988                           
  9989                           ;lcd.h: 47: z = temp>>4;
  9990  13B0  0879               	movf	Lcd_Set_Cursor@temp,w
  9991  13B1  00F4               	movwf	??_Lcd_Set_Cursor
  9992  13B2  3004               	movlw	4
  9993  13B3                     u3875:	
  9994  13B3  36F4               	lsrf	??_Lcd_Set_Cursor,f
  9995  13B4  0B89               	decfsz	9,f
  9996  13B5  2BB3               	goto	u3875
  9997  13B6  0874               	movf	??_Lcd_Set_Cursor,w
  9998  13B7  00F5               	movwf	??_Lcd_Set_Cursor+1
  9999  13B8  0875               	movf	??_Lcd_Set_Cursor+1,w
 10000  13B9  00F7               	movwf	Lcd_Set_Cursor@z
 10001                           
 10002                           ;lcd.h: 48: y = temp & 0x0F;
 10003  13BA  0879               	movf	Lcd_Set_Cursor@temp,w
 10004  13BB  390F               	andlw	15
 10005  13BC  00F4               	movwf	??_Lcd_Set_Cursor
 10006  13BD  0874               	movf	??_Lcd_Set_Cursor,w
 10007  13BE  00F8               	movwf	Lcd_Set_Cursor@y
 10008                           
 10009                           ;lcd.h: 49: Lcd_Cmd(z);
 10010  13BF  0877               	movf	Lcd_Set_Cursor@z,w
 10011  13C0  3192  2224  3193   	fcall	_Lcd_Cmd
 10012                           
 10013                           ;lcd.h: 50: Lcd_Cmd(y);
 10014  13C3  0878               	movf	Lcd_Set_Cursor@y,w
 10015  13C4  3192  2224         	fcall	_Lcd_Cmd
 10016                           
 10017                           ;lcd.h: 51: }
 10018  13C6  0008               	return
 10019  13C7                     l2838:	
 10020                           
 10021                           ;lcd.h: 52: else if(a == 2)
 10022  13C7  3002               	movlw	2
 10023  13C8  0676               	xorwf	Lcd_Set_Cursor@a,w
 10024  13C9  1D03               	btfss	3,2
 10025  13CA  0008               	return
 10026                           
 10027                           ;lcd.h: 53: {
 10028                           ;lcd.h: 54: temp = 0xC0 + b - 1;
 10029  13CB  0873               	movf	Lcd_Set_Cursor@b,w
 10030  13CC  3EBF               	addlw	191
 10031  13CD  00F4               	movwf	??_Lcd_Set_Cursor
 10032  13CE  0874               	movf	??_Lcd_Set_Cursor,w
 10033  13CF  00F9               	movwf	Lcd_Set_Cursor@temp
 10034                           
 10035                           ;lcd.h: 55: z = temp>>4;
 10036  13D0  0879               	movf	Lcd_Set_Cursor@temp,w
 10037  13D1  00F4               	movwf	??_Lcd_Set_Cursor
 10038  13D2  3004               	movlw	4
 10039  13D3                     u3895:	
 10040  13D3  36F4               	lsrf	??_Lcd_Set_Cursor,f
 10041  13D4  0B89               	decfsz	9,f
 10042  13D5  2BD3               	goto	u3895
 10043  13D6  0874               	movf	??_Lcd_Set_Cursor,w
 10044  13D7  00F5               	movwf	??_Lcd_Set_Cursor+1
 10045  13D8  0875               	movf	??_Lcd_Set_Cursor+1,w
 10046  13D9  00F7               	movwf	Lcd_Set_Cursor@z
 10047                           
 10048                           ;lcd.h: 56: y = temp & 0x0F;
 10049  13DA  0879               	movf	Lcd_Set_Cursor@temp,w
 10050  13DB  390F               	andlw	15
 10051  13DC  00F4               	movwf	??_Lcd_Set_Cursor
 10052  13DD  0874               	movf	??_Lcd_Set_Cursor,w
 10053  13DE  00F8               	movwf	Lcd_Set_Cursor@y
 10054                           
 10055                           ;lcd.h: 57: Lcd_Cmd(z);
 10056  13DF  0877               	movf	Lcd_Set_Cursor@z,w
 10057  13E0  3192  2224  3193   	fcall	_Lcd_Cmd
 10058                           
 10059                           ;lcd.h: 58: Lcd_Cmd(y);
 10060  13E3  0878               	movf	Lcd_Set_Cursor@y,w
 10061  13E4  3192  2224         	fcall	_Lcd_Cmd
 10062  13E6  0008               	return
 10063  13E7                     __end_of_Lcd_Set_Cursor:	
 10064                           
 10065                           	psect	text38
 10066  13E7                     __ptext38:	
 10067 ;; *************** function _Lcd_Init *****************
 10068 ;; Defined at:
 10069 ;;		line 62 in file "lcd.h"
 10070 ;; Parameters:    Size  Location     Type
 10071 ;;		None
 10072 ;; Auto vars:     Size  Location     Type
 10073 ;;		None
 10074 ;; Return value:  Size  Location     Type
 10075 ;;                  1    wreg      void 
 10076 ;; Registers used:
 10077 ;;		wreg, status,2, status,0, pclath, cstack
 10078 ;; Tracked objects:
 10079 ;;		On entry : 0/0
 10080 ;;		On exit  : 0/0
 10081 ;;		Unchanged: 0/0
 10082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10085 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;Total ram usage:        1 bytes
 10088 ;; Hardware stack levels used:    1
 10089 ;; Hardware stack levels required when called:    2
 10090 ;; This function calls:
 10091 ;;		_Lcd_Cmd
 10092 ;;		_Lcd_Port
 10093 ;; This function is called by:
 10094 ;;		_main
 10095 ;; This function uses a non-reentrant model
 10096 ;;
 10097                           
 10098                           
 10099                           ;psect for function _Lcd_Init
 10100  13E7                     _Lcd_Init:	
 10101                           
 10102                           ;lcd.h: 64: Lcd_Port(0x00);
 10103                           
 10104                           ;incstack = 0
 10105                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
 10106  13E7  3000               	movlw	0
 10107  13E8  3192  2238  3193   	fcall	_Lcd_Port
 10108                           
 10109                           ;lcd.h: 65: _delay((unsigned long)((20)*(32000000/4000.0)));
 10110  13EB  30D0               	movlw	208
 10111  13EC  00F3               	movwf	??_Lcd_Init
 10112  13ED  30CA               	movlw	202
 10113  13EE                     u4817:	
 10114  13EE  0B89               	decfsz	9,f
 10115  13EF  2BEE               	goto	u4817
 10116  13F0  0BF3               	decfsz	??_Lcd_Init,f
 10117  13F1  2BEE               	goto	u4817
 10118                           
 10119                           ;lcd.h: 66: Lcd_Cmd(0x03);
 10120  13F2  3003               	movlw	3
 10121  13F3  3192  2224  3193   	fcall	_Lcd_Cmd
 10122                           
 10123                           ;lcd.h: 67: _delay((unsigned long)((10)*(32000000/4000.0)));
 10124  13F6  3068               	movlw	104
 10125  13F7  00F3               	movwf	??_Lcd_Init
 10126  13F8  30E4               	movlw	228
 10127  13F9                     u4827:	
 10128  13F9  0B89               	decfsz	9,f
 10129  13FA  2BF9               	goto	u4827
 10130  13FB  0BF3               	decfsz	??_Lcd_Init,f
 10131  13FC  2BF9               	goto	u4827
 10132  13FD  3200               	nop2
 10133                           
 10134                           ;lcd.h: 68: Lcd_Cmd(0x03);
 10135  13FE  3003               	movlw	3
 10136  13FF  3192  2224  3193   	fcall	_Lcd_Cmd
 10137                           
 10138                           ;lcd.h: 69: _delay((unsigned long)((20)*(32000000/4000.0)));
 10139  1402  30D0               	movlw	208
 10140  1403  00F3               	movwf	??_Lcd_Init
 10141  1404  30CA               	movlw	202
 10142  1405                     u4837:	
 10143  1405  0B89               	decfsz	9,f
 10144  1406  2C05               	goto	u4837
 10145  1407  0BF3               	decfsz	??_Lcd_Init,f
 10146  1408  2C05               	goto	u4837
 10147                           
 10148                           ;lcd.h: 70: Lcd_Cmd(0x03);
 10149  1409  3003               	movlw	3
 10150  140A  3192  2224  3193   	fcall	_Lcd_Cmd
 10151                           
 10152                           ;lcd.h: 72: Lcd_Cmd(0x02);
 10153  140D  3002               	movlw	2
 10154  140E  3192  2224  3193   	fcall	_Lcd_Cmd
 10155                           
 10156                           ;lcd.h: 73: Lcd_Cmd(0x02);
 10157  1411  3002               	movlw	2
 10158  1412  3192  2224  3193   	fcall	_Lcd_Cmd
 10159                           
 10160                           ;lcd.h: 74: Lcd_Cmd(0x08);
 10161  1415  3008               	movlw	8
 10162  1416  3192  2224  3193   	fcall	_Lcd_Cmd
 10163                           
 10164                           ;lcd.h: 75: Lcd_Cmd(0x00);
 10165  1419  3000               	movlw	0
 10166  141A  3192  2224  3193   	fcall	_Lcd_Cmd
 10167                           
 10168                           ;lcd.h: 76: Lcd_Cmd(0x0C);
 10169  141D  300C               	movlw	12
 10170  141E  3192  2224  3193   	fcall	_Lcd_Cmd
 10171                           
 10172                           ;lcd.h: 77: Lcd_Cmd(0x00);
 10173  1421  3000               	movlw	0
 10174  1422  3192  2224  3193   	fcall	_Lcd_Cmd
 10175                           
 10176                           ;lcd.h: 78: Lcd_Cmd(0x06);
 10177  1425  3006               	movlw	6
 10178  1426  3192  2224         	fcall	_Lcd_Cmd
 10179  1428  0008               	return
 10180  1429                     __end_of_Lcd_Init:	
 10181                           
 10182                           	psect	text39
 10183  11BE                     __ptext39:	
 10184 ;; *************** function _Lcd_Clear *****************
 10185 ;; Defined at:
 10186 ;;		line 35 in file "lcd.h"
 10187 ;; Parameters:    Size  Location     Type
 10188 ;;		None
 10189 ;; Auto vars:     Size  Location     Type
 10190 ;;		None
 10191 ;; Return value:  Size  Location     Type
 10192 ;;                  1    wreg      void 
 10193 ;; Registers used:
 10194 ;;		wreg, status,2, status,0, pclath, cstack
 10195 ;; Tracked objects:
 10196 ;;		On entry : 0/0
 10197 ;;		On exit  : 0/0
 10198 ;;		Unchanged: 0/0
 10199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10204 ;;Total ram usage:        0 bytes
 10205 ;; Hardware stack levels used:    1
 10206 ;; Hardware stack levels required when called:    2
 10207 ;; This function calls:
 10208 ;;		_Lcd_Cmd
 10209 ;; This function is called by:
 10210 ;;		_main
 10211 ;; This function uses a non-reentrant model
 10212 ;;
 10213                           
 10214                           
 10215                           ;psect for function _Lcd_Clear
 10216  11BE                     _Lcd_Clear:	
 10217                           
 10218                           ;lcd.h: 37: Lcd_Cmd(0);
 10219                           
 10220                           ;incstack = 0
 10221                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
 10222  11BE  3000               	movlw	0
 10223  11BF  3192  2224  3191   	fcall	_Lcd_Cmd
 10224                           
 10225                           ;lcd.h: 38: Lcd_Cmd(1);
 10226  11C2  3001               	movlw	1
 10227  11C3  3192  2224         	fcall	_Lcd_Cmd
 10228  11C5  0008               	return
 10229  11C6                     __end_of_Lcd_Clear:	
 10230                           
 10231                           	psect	text40
 10232  1224                     __ptext40:	
 10233 ;; *************** function _Lcd_Cmd *****************
 10234 ;; Defined at:
 10235 ;;		line 26 in file "lcd.h"
 10236 ;; Parameters:    Size  Location     Type
 10237 ;;  a               1    wreg     unsigned char 
 10238 ;; Auto vars:     Size  Location     Type
 10239 ;;  a               1    2[COMMON] unsigned char 
 10240 ;; Return value:  Size  Location     Type
 10241 ;;                  1    wreg      void 
 10242 ;; Registers used:
 10243 ;;		wreg, status,2, status,0, pclath, cstack
 10244 ;; Tracked objects:
 10245 ;;		On entry : 0/0
 10246 ;;		On exit  : 0/0
 10247 ;;		Unchanged: 0/0
 10248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10251 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10252 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;Total ram usage:        2 bytes
 10254 ;; Hardware stack levels used:    1
 10255 ;; Hardware stack levels required when called:    1
 10256 ;; This function calls:
 10257 ;;		_Lcd_Port
 10258 ;; This function is called by:
 10259 ;;		_Lcd_Clear
 10260 ;;		_Lcd_Set_Cursor
 10261 ;;		_Lcd_Init
 10262 ;;		_Lcd_Shift_Left
 10263 ;;		_Lcd_Shift_Right
 10264 ;; This function uses a non-reentrant model
 10265 ;;
 10266                           
 10267                           
 10268                           ;psect for function _Lcd_Cmd
 10269  1224                     _Lcd_Cmd:	
 10270                           
 10271                           ;incstack = 0
 10272                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
 10273                           ;Lcd_Cmd@a stored from wreg
 10274  1224  00F2               	movwf	Lcd_Cmd@a
 10275                           
 10276                           ;lcd.h: 28: RC0 = 0;
 10277  1225  0140               	movlb	0	; select bank0
 10278  1226  100E               	bcf	14,0	;volatile
 10279                           
 10280                           ;lcd.h: 29: Lcd_Port(a);
 10281  1227  0872               	movf	Lcd_Cmd@a,w
 10282  1228  3192  2238  3192   	fcall	_Lcd_Port
 10283                           
 10284                           ;lcd.h: 30: RC1 = 1;
 10285  122B  0140               	movlb	0	; select bank0
 10286  122C  148E               	bsf	14,1	;volatile
 10287                           
 10288                           ;lcd.h: 31: _delay((unsigned long)((8)*(32000000/4000.0)));
 10289  122D  3054               	movlw	84
 10290  122E  00F1               	movwf	??_Lcd_Cmd
 10291  122F  301C               	movlw	28
 10292  1230                     u4847:	
 10293  1230  0B89               	decfsz	9,f
 10294  1231  2A30               	goto	u4847
 10295  1232  0BF1               	decfsz	??_Lcd_Cmd,f
 10296  1233  2A30               	goto	u4847
 10297  1234  3200               	nop2
 10298                           
 10299                           ;lcd.h: 32: RC1 = 0;
 10300  1235  0140               	movlb	0	; select bank0
 10301  1236  108E               	bcf	14,1	;volatile
 10302  1237  0008               	return
 10303  1238                     __end_of_Lcd_Cmd:	
 10304                           
 10305                           	psect	text41
 10306  1238                     __ptext41:	
 10307 ;; *************** function _Lcd_Port *****************
 10308 ;; Defined at:
 10309 ;;		line 4 in file "lcd.h"
 10310 ;; Parameters:    Size  Location     Type
 10311 ;;  a               1    wreg     unsigned char 
 10312 ;; Auto vars:     Size  Location     Type
 10313 ;;  a               1    0[COMMON] unsigned char 
 10314 ;; Return value:  Size  Location     Type
 10315 ;;                  1    wreg      void 
 10316 ;; Registers used:
 10317 ;;		wreg
 10318 ;; Tracked objects:
 10319 ;;		On entry : 0/0
 10320 ;;		On exit  : 0/0
 10321 ;;		Unchanged: 0/0
 10322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10326 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10327 ;;Total ram usage:        1 bytes
 10328 ;; Hardware stack levels used:    1
 10329 ;; This function calls:
 10330 ;;		Nothing
 10331 ;; This function is called by:
 10332 ;;		_Lcd_Cmd
 10333 ;;		_Lcd_Init
 10334 ;;		_Lcd_Write_Char
 10335 ;; This function uses a non-reentrant model
 10336 ;;
 10337                           
 10338                           
 10339                           ;psect for function _Lcd_Port
 10340  1238                     _Lcd_Port:	
 10341                           
 10342                           ;incstack = 0
 10343                           ; Regs used in _Lcd_Port: [wreg]
 10344                           ;Lcd_Port@a stored from wreg
 10345  1238  00F0               	movwf	Lcd_Port@a
 10346                           
 10347                           ;lcd.h: 6: if(a & 1)
 10348  1239  1C70               	btfss	Lcd_Port@a,0
 10349  123A  2A3E               	goto	l108
 10350                           
 10351                           ;lcd.h: 7: RC2 = 1;
 10352  123B  0140               	movlb	0	; select bank0
 10353  123C  150E               	bsf	14,2	;volatile
 10354  123D  2A40               	goto	l2106
 10355  123E                     l108:	
 10356                           
 10357                           ;lcd.h: 8: else
 10358                           ;lcd.h: 9: RC2 = 0;
 10359  123E  0140               	movlb	0	; select bank0
 10360  123F  110E               	bcf	14,2	;volatile
 10361  1240                     l2106:	
 10362                           
 10363                           ;lcd.h: 11: if(a & 2)
 10364  1240  1CF0               	btfss	Lcd_Port@a,1
 10365  1241  2A44               	goto	l110
 10366                           
 10367                           ;lcd.h: 12: RC3 = 1;
 10368  1242  158E               	bsf	14,3	;volatile
 10369  1243  2A45               	goto	l2110
 10370  1244                     l110:	
 10371                           
 10372                           ;lcd.h: 13: else
 10373                           ;lcd.h: 14: RC3 = 0;
 10374  1244  118E               	bcf	14,3	;volatile
 10375  1245                     l2110:	
 10376                           
 10377                           ;lcd.h: 16: if(a & 4)
 10378  1245  1D70               	btfss	Lcd_Port@a,2
 10379  1246  2A49               	goto	l112
 10380                           
 10381                           ;lcd.h: 17: RC4 = 1;
 10382  1247  160E               	bsf	14,4	;volatile
 10383  1248  2A4A               	goto	l2114
 10384  1249                     l112:	
 10385                           
 10386                           ;lcd.h: 18: else
 10387                           ;lcd.h: 19: RC4 = 0;
 10388  1249  120E               	bcf	14,4	;volatile
 10389  124A                     l2114:	
 10390                           
 10391                           ;lcd.h: 21: if(a & 8)
 10392  124A  1DF0               	btfss	Lcd_Port@a,3
 10393  124B  2A4E               	goto	l114
 10394                           
 10395                           ;lcd.h: 22: RC5 = 1;
 10396  124C  168E               	bsf	14,5	;volatile
 10397  124D  0008               	return
 10398  124E                     l114:	
 10399                           
 10400                           ;lcd.h: 23: else
 10401                           ;lcd.h: 24: RC5 = 0;
 10402  124E  128E               	bcf	14,5	;volatile
 10403  124F  0008               	return
 10404  1250                     __end_of_Lcd_Port:	
 10405  007E                     btemp	set	126	;btemp
 10406  007E                     wtemp0	set	126


Data Sizes:
    Strings     113
    Constant    150
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     79      79
    BANK1            80     79      79
    BANK2            80     75      75
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 64
		 -> STR_7(CODE[7]), main@deviceSerialNum(BANK2[64]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_5(CODE[8]), STR_3(CODE[3]), STR_1(CODE[33]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 64
		 -> main@buffer(BANK1[20]), main@deviceSerialNum(BANK2[64]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_6(CODE[16]), STR_4(CODE[13]), main@buffer(BANK1[20]), STR_2(CODE[16]), 


Critical Paths under _main in COMMON

    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->___wmul
    _sprintf->__div_to_l_
    _scale->___wmul
    _fround->___wmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___lltoft
    ___lwtoft->___ftpack
    ___ftmul->___wmul
    _OW_write_byte->_OW_write_bit
    _OW_reset_pulse->_read_OW
    _OW_read_byte->_OW_read_bit
    _OW_read_bit->_read_OW
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___fttol->_scale
    ___ftsub->___ftadd
    _convertTemperatureF->___ftadd
    ___ftmul->___wmul
    ___ftdiv->___ftmul
    ___ftadd->___ftdiv

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               119   119      0   54398
                                             35 BANK1     44    44      0
                                              0 BANK2     75    75      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                   _Lcd_Write_String
                       _OW_read_byte
                     _OW_reset_pulse
                      _OW_write_byte
                  _SYSTEM_Initialize
                _convertTemperatureF
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             56    36     20   40598
                                             59 BANK0     20     0     20
                                              0 BANK1     35    35      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               12     9      3    9079
                                             24 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    14      3    8881
                                             24 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2318
                                             12 COMMON     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1250
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1360
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     409
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     552
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    1868
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     477
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     480
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     411
                                             33 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3501
                                             53 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      98
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     560
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (1) _convertTemperatureF                                 14    10      4   11322
                                             53 BANK0     14    10      4
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    1821
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3662
                                              8 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2132
                                             24 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3328
                                             40 BANK0     13     7      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1746
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OW_write_byte                                        3     3      0      91
                                              1 COMMON     3     3      0
                       _OW_write_bit
 ---------------------------------------------------------------------------------
 (2) _OW_write_bit                                         1     1      0      22
                                              0 COMMON     1     1      0
                      _drive_OW_high
                       _drive_OW_low
 ---------------------------------------------------------------------------------
 (1) _OW_reset_pulse                                       2     2      0      48
                                              1 COMMON     2     2      0
                      _drive_OW_high
                       _drive_OW_low
                            _read_OW
 ---------------------------------------------------------------------------------
 (1) _OW_read_byte                                         3     3      0     119
                                              3 COMMON     3     3      0
                        _OW_read_bit
 ---------------------------------------------------------------------------------
 (2) _OW_read_bit                                          2     2      0      48
                                              1 COMMON     2     2      0
                      _drive_OW_high
                       _drive_OW_low
                            _read_OW
 ---------------------------------------------------------------------------------
 (2) _read_OW                                              1     1      0      25
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _drive_OW_low                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _drive_OW_high                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     5     3      2     533
                                              5 COMMON     5     3      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     645
                                              3 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 COMMON     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _OW_read_byte
     _OW_read_bit
       _drive_OW_high
       _drive_OW_low
       _read_OW
   _OW_reset_pulse
     _drive_OW_high
     _drive_OW_low
     _read_OW
   _OW_write_byte
     _OW_write_bit
       _drive_OW_high
       _drive_OW_low
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _convertTemperatureF
     ___ftadd
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4F      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4F      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     4B      4B      10       93.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Mar 13 05:54:53 2018

                   _convertTemperatureF 000E                             __CFG_CP$OFF 0000  
                          ___awdiv@sign 0021                     ___wmul@multiplicand 0026  
                   main@deviceSerialNum 0120                            ___ftadd@exp1 0054  
                          ___ftadd@exp2 0053                             __CFG_LVP$ON 0000  
                          ___ftadd@sign 0052                                     l110 1244  
                                   l112 1249                                     l114 124E  
                                   l108 123E                                     l301 070D  
                                   l213 0104                                     l152 0076  
                                   l160 0BD5                                     l250 034A  
                                   l228 01AB                                     l237 01E0  
                                   l327 12A3                                     l512 1547  
                                   l513 154F                                     l505 1534  
                                   l613 15D3                                     l536 08F5  
                                   l562 177B                                     l572 17F4  
                                   l493 0A5D                                     _RC0 0070  
                                   _RC1 0071                                     _RC2 0072  
                                   _RC3 0073                                     _RC4 0074  
                                   _RC5 0075                     __end_of_OW_read_bit 1268  
                          ___awmod@sign 0076                            __CFG_BORV$LO 0000  
                                   wreg 0009                             _sprintf$624 00A6  
                         __CFG_BBEN$OFF 0000                    ?_convertTemperatureF 0055  
                          __CFG_ZCD$OFF 0000                            ___ftdiv@cntr 0042  
                          ___ftdiv@sign 0047                                    l2110 1245  
                                  l2120 129C                                    l2114 124A  
                                  l2106 1240                                    l2210 14AB  
                                  l2202 149A                                    l2060 1511  
                                  l2220 087E                                    l2140 080F  
                                  l2070 1539                                    l2062 151B  
                                  l2230 0894                                    l2206 14A3  
                                  l3022 0333                                    l3014 02E6  
                                  l2072 1541                                    l2064 1520  
                                  l2056 150A                                    l2224 0885  
                                  l2320 171A                                    l2312 1706  
                                  l3200 0737                                    l3120 0576  
                                  l3112 050A                                    l3040 03C4  
                                  l2250 08CB                                    l2242 08AE  
                                  l2146 081A                                    l3114 0566  
                                  l3050 03F8                                    l2260 08E7  
                                  l2252 08D0                                    l2324 1722  
                                  l2308 16FE                                    l2172 0851  
                                  l2164 0840                                    l2156 0822  
                                  l3204 0753                                    l3060 044C  
                                  l3036 03B0                                    l3028 037D  
                                  l2270 0919                                    l2262 08F1  
                                  l2254 08D4                                    l2510 179C  
                                  l2158 082E                                    l3230 079B  
                                  l3214 076D                                    l3222 0783  
                                  l3206 0756                                    l3150 0677  
                                  l3134 05AC                                    l3126 0590  
                                  l3070 0496                                    l3054 0446  
                                  l2096 11DE                                    l2280 0934  
                                  l2248 08C1                                    l2168 0849  
                                  l2184 1475                                    l3224 0787  
                                  l2098 11DF                                    l2266 0907  
                                  l2602 1604                                    l2290 16AD  
                                  l2530 17DE                                    l2434 0BA1  
                                  l2426 0B29                                    l2450 0E65  
                                  l3090 04D8                                    l3074 04A4  
                                  l3066 0479                                    l2700 15BD  
                                  l2196 1482                                    l2188 147C  
                                  l2460 0EE1                                    l3244 07B0  
                                  l3180 06DE                                    l3156 0687  
                                  l2366 12E6                                    l2630 1674  
                                  l2622 165B                                    l2518 17B6  
                                  l2198 148E                                    l3174 06B1  
                                  l3158 068C                                    l3246 00D4  
                                  l2608 161A                                    l2296 16C3  
                                  l2712 15E4                                    l2536 17EB  
                                  l2528 17D0                                    l2456 0EC4  
                                  l3192 0720                                    l3184 06F5  
                                  l3168 06AB                                    l3088 04BB  
                                  l3096 04E8                                    l3248 07F6  
                                  l3272 0BEF                                    l3256 0D60  
                                  l2642 1382                                    l2706 15CA  
                                  l2722 14C0                                    l2554 0987  
                                  l2538 17F7                                    l2474 0FE3  
                                  l2708 15D6                                    l2732 14EE  
                                  l2724 14CE                                    l2572 0A1A  
                                  l2564 09D2                                    l2548 096A  
                                  l2468 0F84                                    l2822 127E  
                                  l2646 1398                                    l2670 12BE  
                                  l2590 0A54                                    l2582 0A39  
                                  l2486 11ED                                    l3198 0734  
                                  l2910 0115                                    l2902 00FE  
                                  l3278 0C0E                                    l2680 157F  
                                  l2736 14F9                                    l2752 1457  
                                  l2592 0A60                                    l2584 0A47  
                                  l2496 1763                                    l2746 1431  
                                  l2914 0122                                    l2922 015A  
                                  l2748 143F                                    l2756 1462  
                                  l2764 131C                                    l2940 01AD  
                                  l2908 010B                                    l2838 13C7  
                                  l2766 132C                                    l2934 016D  
                                  l2864 1282                                    l2880 002E  
                                  l2952 01C2                                    l2936 01A6  
                                  l2698 15AF                                    l2970 0205  
                                  l2962 01ED                                    l2954 01D0  
                                  l2884 0046                                    l2948 01C0  
                                  l2980 0228                                    l2982 024B  
                                  l2888 005E                                    l2976 021C  
                                  l2968 01EF                                    l2988 025B  
                                  l2998 028E                                    STR_1 1820  
                                  STR_2 18D8                                    STR_3 1904  
                                  STR_4 18E8                                    STR_5 18F5  
                                  STR_6 18C8                                    STR_7 18FD  
                                  STR_8 18B7                                    u3005 1707  
                                  _LATA 0018                                    u3015 170D  
                                  _LATC 001A                                    u3045 1723  
                                  u3205 179D                                    u3055 1729  
                                  u3215 17AD                                    u2425 1556  
                                  u2345 1516                                    u3225 17B7  
                                  u2505 12A4                                    u2515 12A9  
                                  u4115 02A2                                    u4035 01DA  
                                  u3085 1350                                    u2365 152F  
                                  u2605 0841                                    u4045 01E6  
                                  u3415 0A55                                    u3335 09D3  
                                  u2385 153C                                    u3345 09FD  
                                  u3265 17D1                                    u4225 046F  
                                  u4155 0354                                    u3605 15B0  
                                  u2565 0825                                    u4405 06D4  
                                  u4325 057F                                    u4165 0387  
                                  u2815 08AF                                    u3455 162C  
                                  u3295 17EC                                    u4335 058B  
                                  u2905 08E8                                    u3465 163C  
                                  u3705 14E3                                    u3385 0A3A  
                                  u2585 082F                                    u2665 1485  
                                  u4425 06ED                                    u3475 165C  
                                  u3635 15CB                                    u3715 14EF  
                                  u2595 0839                                    u4435 0705  
                                  u4195 03AE                                    u2845 08C2  
                                  u3485 166B                                    u2685 1494  
                                  u4285 04C5                                    u4605 0C0C  
                                  u3495 1675                                    u3575 1586  
                                  u2695 149B                                    u4295 04F2  
                                  u4615 0DA5                                    u3745 1434  
                                  u4707 12E2                                    u2875 08D5  
                                  u3675 14C3                                    u4475 072C  
                                  u4717 12EA                                    u3765 144D  
                                  u4485 0746                                    u4637 0BDC  
                                  u4807 1366                                    u4727 12F0  
                                  u2975 16CF                                    u3695 14CF  
                                  u3775 1458                                    u4647 0C8D  
                                  u4817 13EE                                    u4737 12FA  
                                  u2985 16DF                                    u4657 0CF8  
                                  u4827 13F9                                    u3875 13B3  
                                  u4747 1303                                    u3795 1321  
                                  u4667 0D59                                    u4595 0BED  
                                  u4837 1405                                    u4757 130F  
                                  u4677 0D90                                    u4847 1230  
                                  u3895 13D3                                    u4767 1254  
                                  u4687 0DAD                                    u4777 125A  
                                  u4697 12DC                                    u4787 1263  
                                  u4797 135A           OW_reset_pulse@presence_detect 0072  
                                  _WPUA 1F39                                    _WPUC 1F4F  
                         __CFG_FCMEN$ON 0000                       ?_Lcd_Write_String 0075  
                      read_OW@read_data 0070                                    _main 0BCE  
                          ___ftpack@arg 0070                    __end_of_OW_read_byte 1280  
                          ___ftpack@exp 0073                                    fsr0h 0005  
                                  fsr1h 0007                                    indf0 0000  
                                  fsr0l 0004                                    indf1 0001  
                                  fsr1l 0006                                    btemp 007E  
               __size_of_OW_reset_pulse 0024                           __CFG_BOREN$ON 0000  
                                  start 0002                      ??_Lcd_Write_String 0077  
                       __end_of_Lcd_Cmd 1238                           __CFG_CSWEN$ON 0000  
                         __CFG_MCLRE$ON 0000                            ___ftmul@cntr 0036  
                          ___ftmul@sign 0037                           ?_drive_OW_low 0070  
                          ___fttol@exp1 004E                            ___fttol@lval 004A  
        __size_of_OSCILLATOR_Initialize 000A                           _drive_OW_high 11B4  
         __end_of_OSCILLATOR_Initialize 000E                                   ?_main 0070  
                       __end_of___awdiv 0856                         __end_of___ftadd 094C  
                         __CFG_WDTE$OFF 0000                         __end_of___awmod 14B0  
                       __end_of___ftdiv 1696                         __end_of___ftneg 11D6  
                       __end_of___lldiv 1502                         __end_of___ftmul 174A  
                       ___awdiv@divisor 0077                         __end_of___llmod 146B  
                       __end_of___ftsub 12D4                         __end_of___fttol 15ED  
                       ___awdiv@counter 0020                                   _OSCEN 0891  
               __size_of_Lcd_Set_Cursor 0040                                   _TRISA 0012  
                                 _TRISC 0014   convertTemperatureF@binaryTemperatureC 0061  
                          ___lltoft@exp 007D                           __CFG_WRTB$OFF 0000  
                         __CFG_WRTC$OFF 0000                 __size_of_Lcd_Shift_Left 0008  
                 ??_convertTemperatureF 0059                         __end_of_dpowers 1869  
                       __end_of_read_OW 11E1                                   _scale 0DBC  
                       __end_of_isdigit 11EF                           ___ftpack@sign 0074  
                                 main@i 0169            convertTemperatureF@tCprecise 005E  
                  __end_of_OW_write_bit 12F4                                   status 0003  
                                 wtemp0 007E                         __end_of_sprintf 07FD  
                      __end_of_Lcd_Init 1429                        __end_of_Lcd_Port 1250  
                       __initialization 07FD                          ??_drive_OW_low 0070  
                          __end_of_main 0DBC                          __CFG_SAFEN$OFF 0000  
                           _OW_read_bit 1250                          ?_drive_OW_high 0070  
                                ??_main 00C3                           ___fttol@sign1 0049  
                    __size_of_Lcd_Clear 0008                    __size_of__tdiv_to_l_ 00B6  
                      ___llmod@dividend 0074                                  ?_scale 0038  
                      ___awdiv@dividend 0079                                  _ANSELA 1F38  
                                _ANSELC 1F4E                        __end_of___ftpack 1566  
                    __CFG_RSTOSC$HFINT1 0000                        __end_of___lltoft 1340  
                                _ODCONA 1F3A                                  _ODCONC 1F50  
                        __CFG_WDTCCS$SC 0000                        __end_of___lwtoft 1224  
                                _OSCFRQ 0893                               ??_Lcd_Cmd 0071  
               __size_of_Lcd_Write_Char 002C                          __CFG_PWRTE$OFF 0000  
                      __end_of__powers_ 1890                                  ___ftge 136C  
                                ___wmul 129A                               ??___awdiv 007B  
                             ??___ftadd 004E                          __CFG_STVREN$ON 0000  
                             ??___awmod 0074                               ??___ftdiv 003E  
                             ??___ftneg 0073                               ??___lldiv 0078  
                             ??___ftmul 002E                               ??___llmod 0078  
                             ??___ftsub 007E                               ??___fttol 0045  
                                _fround 0A69                        ___awdiv@quotient 0022  
                       ___awmod@divisor 0070                         ___awmod@counter 0075  
                 ___ftmul@f3_as_product 0033                               ??_read_OW 0070  
                             ??_isdigit 0070                   __end_of_OW_write_byte 1211  
                 __size_of_OW_read_byte 0018                               ??_sprintf 00A0  
                       Lcd_Set_Cursor@a 0076                         Lcd_Set_Cursor@b 0073  
                       Lcd_Set_Cursor@y 0078                         Lcd_Set_Cursor@z 0077  
                     _SYSTEM_Initialize 11B8                 __end_of__initialization 07FD  
                        _OW_reset_pulse 12F4                              ___ftadd@f1 0048  
                            ___ftadd@f2 004B                              ___ftge@ff1 0070  
                            ___ftge@ff2 0073                      ?_SYSTEM_Initialize 0070  
                     __end_of_Lcd_Clear 11C6                              ___ftdiv@f1 003B  
                            ___ftdiv@f2 0038                              ___ftdiv@f3 0043  
                            ___ftneg@f1 0070                              ___ftmul@f1 0028  
                            ___ftmul@f2 002B                              ___ftsub@f1 0058  
                            ___ftsub@f2 0055                              ___fttol@f1 0041  
                        __pcstackCOMMON 0070                         ??_drive_OW_high 0070  
                   ??_SYSTEM_Initialize 0070                              ___lltoft@c 0078  
                         __end_of_scale 1000                              ___lwtoft@c 0078  
                          _OW_read_byte 1268                          _Lcd_Set_Cursor 13A7  
                            __div_to_l_ 094C                          _Lcd_Shift_Left 11C6  
                             ?_Lcd_Init 0070                               ?_Lcd_Port 0070  
                 __size_of_OW_write_bit 0020                         __div_to_l_@exp1 0025  
                       __div_to_l_@cntr 0024                    __end_of_drive_OW_low 0804  
                               ??_scale 003B               __end_of_SYSTEM_Initialize 11BE  
                       __div_to_l_@quot 0020                            sprintf@width 00BE  
                __end_of_OW_reset_pulse 1318                   OW_write_bit@write_bit 0070  
                         __div_to_l_@f1 0070                           __div_to_l_@f2 0073  
                            __pmaintext 0BCE                                 ?___ftge 0070  
                               ?___wmul 0024                         __CFG_PPS1WAY$ON 0000  
                               ?_fround 0038               __size_of_Lcd_Write_String 001A  
                             ?___ftpack 0070                  __end_of_Lcd_Set_Cursor 13E7  
                             ?___lltoft 0078                            _OW_write_bit 12D4  
                             ?___lwtoft 0078                  __end_of_Lcd_Shift_Left 11CE  
                               _OSCCON1 088D                                 _OSCCON3 088F  
                               _OSCSTAT 0890                                 _OSCTUNE 0892  
                            ??_Lcd_Init 0073                              ??_Lcd_Port 0070  
                       ?_OW_reset_pulse 0070                          _Lcd_Write_Char 1340  
                               _Lcd_Cmd 1224                        OW_read_byte@loop 0075  
                     __end_of__npowers_ 18B7                         __size_of___ftge 003B  
                               ___awdiv 0804                                 ___ftadd 0856  
                               ___awmod 146B                                 ___ftdiv 15ED  
                               ___ftneg 11CE                                 ___lldiv 14B0  
                       __size_of___wmul 001C                                 ___ftmul 1696  
                               ___llmod 1429                                 ___ftsub 12B6  
                               ___fttol 1566                            ?_OW_read_bit 0070  
                            _fround$621 0042                              _fround$622 003F  
                            ??___ftpack 0075                         __size_of_fround 0165  
                       ?_Lcd_Set_Cursor 0073                              ??___lltoft 007C  
                               __ptext1 00CF                                 __ptext2 0DBC  
                               __ptext3 11E1                                 __ptext4 0A69  
                               __ptext5 129A                                 __ptext6 146B  
                               __ptext7 0804                                 __ptext8 174A  
                               __ptext9 094C                              ??___lwtoft 007B  
           __end_of_convertTemperatureF 00CF                         __CFG_WRTAPP$OFF 0000  
                     __end_of_hexpowers 1820                             ?__div_to_l_ 0070  
                               _dpowers 1841                   _OSCILLATOR_Initialize 0004  
                               _read_OW 11D6                                 _isdigit 11E1  
                       ?_Lcd_Shift_Left 0070                        ___awmod@dividend 0072  
              ??_PIN_MANAGER_Initialize 0070                         __CFG_WRTSAF$OFF 0000  
            __size_of_SYSTEM_Initialize 0006                                 _sprintf 00CF  
                __end_of_Lcd_Write_Char 136C                    end_of_initialization 07FD  
                       ___lldiv@divisor 0070                         ___lldiv@counter 007D  
               main@temperatureFprecise 0164                               Lcd_Port@a 0070  
                     main@serial_number 00E7                          __tdiv_to_l_@f1 0070  
                        __tdiv_to_l_@f2 0073                   __CFG_WDTCPS$WDTCPS_31 0000  
                         ??__tdiv_to_l_ 0076                               _PORTAbits 000C  
                 __size_of_drive_OW_low 0004                               _TRISAbits 0012  
                      __CFG_FEXTOSC$OFF 0000                         ?_Lcd_Write_Char 0070  
                     Lcd_Write_String@a 0075                       Lcd_Write_String@i 0078  
                           ___ftdiv@exp 0046                              main@buffer 00D3  
                   __size_of__div_to_l_ 011D                             ___ftmul@exp 0032  
                             _Lcd_Clear 11BE                            _drive_OW_low 0800  
                        __end_of___ftge 13A7                          __end_of___wmul 12B6  
                      _Lcd_Write_String 1280                  ?_OSCILLATOR_Initialize 0070  
convertTemperatureF@temperatureCprecise 005B                          __end_of_fround 0BCE  
                   start_initialization 07FD         __size_of_PIN_MANAGER_Initialize 0010  
                   __end_of__tdiv_to_l_ 1800                      OW_read_byte@result 0074  
                     __size_of_Lcd_Init 0042                       __size_of_Lcd_Port 0018  
                       ___llmod@divisor 0070                         ___llmod@counter 0079  
                  OW_read_bit@read_data 0072                        __CFG_LPBOREN$OFF 0000  
                            ?_Lcd_Clear 0070                                ??___ftge 0076  
                              ??___wmul 007C                  __size_of_OW_write_byte 0012  
                 __end_of_drive_OW_high 11B8                         Lcd_Write_Char@a 0074  
                       Lcd_Write_Char@y 0073                                ??_fround 003B  
                         sprintf@tmpval 00B3                    __size_of_OW_read_bit 0018  
                            fround@prec 0045                       __size_of___ftpack 0064  
                     __size_of___lltoft 0028                        ??_OW_reset_pulse 0071  
                             ___latbits 0002                       __size_of___lwtoft 0013  
                         __pcstackBANK0 0020                           __pcstackBANK1 00A0  
                         __pcstackBANK2 0120                                ?_Lcd_Cmd 0070  
                           sprintf@flag 00B9                             sprintf@fval 00BB  
                           sprintf@prec 00C0                convertTemperatureF@tempH 0057  
              convertTemperatureF@tempL 0055                  _PIN_MANAGER_Initialize 11EF  
                      ??_Lcd_Set_Cursor 0074                                ?___awdiv 0077  
                              ?___ftadd 0048                                ?___awmod 0070  
                              ?___ftdiv 0038                                ?___ftneg 0070  
                              ?___lldiv 0070                                ?___ftmul 0028  
                              ?___llmod 0070                                ?___ftsub 0055  
                             __npowers_ 1890                                ?___fttol 0041  
                      ??_Lcd_Shift_Left 0073                             __tdiv_to_l_ 174A  
                          ??__div_to_l_ 0076                                ?_read_OW 0070  
                              ?_isdigit 0070                               _scale$623 003D  
                             _hexpowers 1800                                ?_sprintf 005B  
                        __size_of_scale 0244                           _OW_write_byte 11FF  
                        ___wmul@product 007C                                _LATAbits 0018  
                              Lcd_Cmd@a 0072                      __end_of__div_to_l_ 0A69  
                           ??_Lcd_Clear 0073                       __CFG_BBSIZE$BB512 0000  
                     ___wmul@multiplier 0024                        ??_Lcd_Write_Char 0071  
                             main@tempH 0162                               main@tempL 0160  
                              _Lcd_Init 13E7                                _Lcd_Port 1238  
                        ?_OW_write_byte 0070            __size_of_convertTemperatureF 00C1  
              __end_of_Lcd_Write_String 129A                        __size_of_Lcd_Cmd 0014  
               OW_write_byte@write_data 0072                 ??_OSCILLATOR_Initialize 0070  
                      __size_of___awdiv 0052                        __size_of___ftadd 00F6  
                      __size_of___awmod 0045                        __size_of___ftdiv 00A9  
                      __size_of___ftneg 0008                        __size_of___lldiv 0052  
                      __size_of___ftmul 00B4                        __size_of___llmod 0042  
                      __size_of___ftsub 001E                        __size_of___fttol 0087  
                              ___ftpack 1502                                ___lltoft 1318  
                           _isdigit$415 0070                           ?_OW_read_byte 0070  
                              ___lwtoft 1211                              sprintf@idx 00A9  
                            sprintf@len 00AD                              sprintf@exp 00B7  
                            sprintf@val 00AF                        __size_of_read_OW 000B  
                      __size_of_isdigit 000E                                __ptext10 1318  
                              __ptext11 1429                                __ptext20 15ED  
                              __ptext12 14B0                                __ptext21 0856  
                              __ptext13 1566                                __ptext30 1250  
                              __ptext22 1502                                __ptext14 12B6  
                              __ptext31 11D6                                __ptext23 11B8  
                              __ptext15 11CE                                __ptext40 1224  
                              __ptext32 0800                                __ptext24 11EF  
                              __ptext16 136C                                __ptext41 1238  
                              __ptext33 11B4                                __ptext25 0004  
                              __ptext17 000E                                __ptext34 1280  
                              __ptext26 11FF                                __ptext18 1211  
                              __ptext35 1340                                __ptext27 12D4  
                              __ptext19 1696                                __ptext36 11C6  
                              __ptext28 12F4                                __ptext37 13A7  
                              __ptext29 1268                                __ptext38 13E7  
                              __ptext39 11BE                                __powers_ 1869  
                      __size_of_sprintf 072E                           __size_of_main 01EE  
                  __CFG_WDTCWS$WDTCWS_7 0000                                main@flag 0167  
                        ??_OW_read_byte 0073                           ?_OW_write_bit 0070  
                       ??_OW_write_byte 0071                          __pstringtext10 18FD  
                        __pstringtext11 1904                          __pstringtext12 0000  
                              isdigit@c 0071                                scale@scl 0040  
                    Lcd_Write_Char@temp 0072                               sprintf@ap 00AC  
                             sprintf@cp 00AA                        __tdiv_to_l_@exp1 0025  
                             sprintf@sp 005B                        __tdiv_to_l_@cntr 0024  
                      __tdiv_to_l_@quot 0020                        ___lldiv@dividend 0074  
               ?_PIN_MANAGER_Initialize 0070                       __CFG_CLKOUTEN$OFF 0000  
                         ??_OW_read_bit 0071                      Lcd_Set_Cursor@temp 0079  
                        ??_OW_write_bit 0070                            ?__tdiv_to_l_ 0070  
                         __pstringtext1 1841                           __pstringtext2 1869  
                         __pstringtext3 1890                           __pstringtext4 1800  
                         __pstringtext5 18B7                           __pstringtext6 18C8  
                         __pstringtext7 18D8                           __pstringtext8 18E8  
                         __pstringtext9 18F5                                sprintf@c 00C2  
                              sprintf@f 005D                        ___lldiv@quotient 0079  
        __end_of_PIN_MANAGER_Initialize 11FF                  __size_of_drive_OW_high 0004  
                     OW_write_byte@loop 0073  
