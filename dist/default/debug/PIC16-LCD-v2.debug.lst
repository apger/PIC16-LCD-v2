

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Mar 12 21:55:18 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F15325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 1.42
    48                           ; Generated 13/04/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F15325 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0008                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000E                     	;# 
    95  0012                     	;# 
    96  0014                     	;# 
    97  0018                     	;# 
    98  001A                     	;# 
    99  009B                     	;# 
   100  009B                     	;# 
   101  009C                     	;# 
   102  009D                     	;# 
   103  009E                     	;# 
   104  009F                     	;# 
   105  0119                     	;# 
   106  0119                     	;# 
   107  0119                     	;# 
   108  011A                     	;# 
   109  011A                     	;# 
   110  011A                     	;# 
   111  011B                     	;# 
   112  011B                     	;# 
   113  011B                     	;# 
   114  011B                     	;# 
   115  011B                     	;# 
   116  011C                     	;# 
   117  011C                     	;# 
   118  011C                     	;# 
   119  011D                     	;# 
   120  011D                     	;# 
   121  011D                     	;# 
   122  011E                     	;# 
   123  011E                     	;# 
   124  011E                     	;# 
   125  011F                     	;# 
   126  011F                     	;# 
   127  011F                     	;# 
   128  011F                     	;# 
   129  011F                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  018E                     	;# 
   133  018F                     	;# 
   134  0190                     	;# 
   135  0191                     	;# 
   136  0192                     	;# 
   137  020C                     	;# 
   138  020C                     	;# 
   139  020D                     	;# 
   140  020E                     	;# 
   141  020F                     	;# 
   142  020F                     	;# 
   143  0210                     	;# 
   144  0210                     	;# 
   145  0211                     	;# 
   146  0211                     	;# 
   147  028C                     	;# 
   148  028C                     	;# 
   149  028D                     	;# 
   150  028D                     	;# 
   151  028E                     	;# 
   152  028F                     	;# 
   153  0290                     	;# 
   154  0291                     	;# 
   155  030C                     	;# 
   156  030C                     	;# 
   157  030D                     	;# 
   158  030E                     	;# 
   159  030F                     	;# 
   160  0310                     	;# 
   161  0310                     	;# 
   162  0311                     	;# 
   163  0312                     	;# 
   164  0313                     	;# 
   165  0314                     	;# 
   166  0315                     	;# 
   167  0316                     	;# 
   168  0318                     	;# 
   169  0319                     	;# 
   170  031A                     	;# 
   171  031C                     	;# 
   172  031D                     	;# 
   173  031E                     	;# 
   174  038C                     	;# 
   175  038D                     	;# 
   176  038E                     	;# 
   177  058C                     	;# 
   178  058C                     	;# 
   179  058D                     	;# 
   180  058E                     	;# 
   181  058F                     	;# 
   182  058F                     	;# 
   183  0590                     	;# 
   184  0591                     	;# 
   185  0592                     	;# 
   186  0593                     	;# 
   187  059C                     	;# 
   188  059C                     	;# 
   189  059D                     	;# 
   190  059D                     	;# 
   191  059E                     	;# 
   192  059F                     	;# 
   193  060C                     	;# 
   194  060D                     	;# 
   195  060E                     	;# 
   196  060F                     	;# 
   197  0610                     	;# 
   198  0611                     	;# 
   199  0612                     	;# 
   200  0613                     	;# 
   201  0614                     	;# 
   202  070C                     	;# 
   203  070D                     	;# 
   204  070E                     	;# 
   205  070F                     	;# 
   206  0710                     	;# 
   207  0711                     	;# 
   208  0712                     	;# 
   209  0713                     	;# 
   210  0716                     	;# 
   211  0717                     	;# 
   212  0718                     	;# 
   213  0719                     	;# 
   214  071A                     	;# 
   215  071B                     	;# 
   216  071C                     	;# 
   217  071D                     	;# 
   218  0796                     	;# 
   219  0797                     	;# 
   220  0798                     	;# 
   221  0799                     	;# 
   222  079A                     	;# 
   223  079B                     	;# 
   224  080C                     	;# 
   225  080D                     	;# 
   226  080E                     	;# 
   227  080F                     	;# 
   228  0810                     	;# 
   229  0811                     	;# 
   230  0812                     	;# 
   231  0813                     	;# 
   232  0814                     	;# 
   233  081A                     	;# 
   234  081A                     	;# 
   235  081B                     	;# 
   236  081C                     	;# 
   237  081C                     	;# 
   238  081D                     	;# 
   239  081E                     	;# 
   240  081F                     	;# 
   241  088C                     	;# 
   242  088D                     	;# 
   243  088E                     	;# 
   244  088F                     	;# 
   245  0890                     	;# 
   246  0891                     	;# 
   247  0892                     	;# 
   248  0893                     	;# 
   249  0895                     	;# 
   250  0896                     	;# 
   251  090C                     	;# 
   252  090E                     	;# 
   253  090F                     	;# 
   254  091F                     	;# 
   255  098F                     	;# 
   256  098F                     	;# 
   257  0990                     	;# 
   258  0991                     	;# 
   259  0992                     	;# 
   260  0993                     	;# 
   261  0994                     	;# 
   262  0995                     	;# 
   263  0996                     	;# 
   264  0997                     	;# 
   265  0A19                     	;# 
   266  0A19                     	;# 
   267  0A1A                     	;# 
   268  0A1A                     	;# 
   269  0A1B                     	;# 
   270  0A1B                     	;# 
   271  0A1B                     	;# 
   272  0A1C                     	;# 
   273  0A1C                     	;# 
   274  0A1D                     	;# 
   275  0A1D                     	;# 
   276  0A1E                     	;# 
   277  0A1E                     	;# 
   278  0A1F                     	;# 
   279  0A1F                     	;# 
   280  0A1F                     	;# 
   281  1E0F                     	;# 
   282  1E10                     	;# 
   283  1E11                     	;# 
   284  1E12                     	;# 
   285  1E13                     	;# 
   286  1E14                     	;# 
   287  1E15                     	;# 
   288  1E16                     	;# 
   289  1E17                     	;# 
   290  1E18                     	;# 
   291  1E19                     	;# 
   292  1E1A                     	;# 
   293  1E1B                     	;# 
   294  1E1C                     	;# 
   295  1E1D                     	;# 
   296  1E1E                     	;# 
   297  1E1F                     	;# 
   298  1E20                     	;# 
   299  1E21                     	;# 
   300  1E22                     	;# 
   301  1E23                     	;# 
   302  1E24                     	;# 
   303  1E25                     	;# 
   304  1E26                     	;# 
   305  1E27                     	;# 
   306  1E28                     	;# 
   307  1E29                     	;# 
   308  1E2A                     	;# 
   309  1E2B                     	;# 
   310  1E2C                     	;# 
   311  1E2D                     	;# 
   312  1E2E                     	;# 
   313  1E2F                     	;# 
   314  1E30                     	;# 
   315  1E31                     	;# 
   316  1E32                     	;# 
   317  1E33                     	;# 
   318  1E34                     	;# 
   319  1E35                     	;# 
   320  1E36                     	;# 
   321  1E37                     	;# 
   322  1E8F                     	;# 
   323  1E90                     	;# 
   324  1E91                     	;# 
   325  1E92                     	;# 
   326  1E93                     	;# 
   327  1E9C                     	;# 
   328  1EA1                     	;# 
   329  1EA2                     	;# 
   330  1EB1                     	;# 
   331  1EBB                     	;# 
   332  1EBC                     	;# 
   333  1EBD                     	;# 
   334  1EBE                     	;# 
   335  1EC3                     	;# 
   336  1EC5                     	;# 
   337  1EC6                     	;# 
   338  1EC7                     	;# 
   339  1ECB                     	;# 
   340  1ECC                     	;# 
   341  1ECD                     	;# 
   342  1ECE                     	;# 
   343  1F10                     	;# 
   344  1F11                     	;# 
   345  1F12                     	;# 
   346  1F13                     	;# 
   347  1F14                     	;# 
   348  1F15                     	;# 
   349  1F20                     	;# 
   350  1F21                     	;# 
   351  1F22                     	;# 
   352  1F23                     	;# 
   353  1F24                     	;# 
   354  1F25                     	;# 
   355  1F38                     	;# 
   356  1F39                     	;# 
   357  1F3A                     	;# 
   358  1F3B                     	;# 
   359  1F3C                     	;# 
   360  1F3D                     	;# 
   361  1F3E                     	;# 
   362  1F3F                     	;# 
   363  1F4E                     	;# 
   364  1F4F                     	;# 
   365  1F50                     	;# 
   366  1F51                     	;# 
   367  1F52                     	;# 
   368  1F53                     	;# 
   369  1F54                     	;# 
   370  1F55                     	;# 
   371  1FE4                     	;# 
   372  1FE5                     	;# 
   373  1FE6                     	;# 
   374  1FE7                     	;# 
   375  1FE8                     	;# 
   376  1FE8                     	;# 
   377  1FE9                     	;# 
   378  1FEA                     	;# 
   379  1FEA                     	;# 
   380  1FEB                     	;# 
   381  1FED                     	;# 
   382  1FEE                     	;# 
   383  1FEF                     	;# 
   384  0000                     	;# 
   385  0001                     	;# 
   386  0002                     	;# 
   387  0003                     	;# 
   388  0004                     	;# 
   389  0005                     	;# 
   390  0006                     	;# 
   391  0007                     	;# 
   392  0008                     	;# 
   393  0009                     	;# 
   394  000A                     	;# 
   395  000B                     	;# 
   396  000C                     	;# 
   397  000E                     	;# 
   398  0012                     	;# 
   399  0014                     	;# 
   400  0018                     	;# 
   401  001A                     	;# 
   402  009B                     	;# 
   403  009B                     	;# 
   404  009C                     	;# 
   405  009D                     	;# 
   406  009E                     	;# 
   407  009F                     	;# 
   408  0119                     	;# 
   409  0119                     	;# 
   410  0119                     	;# 
   411  011A                     	;# 
   412  011A                     	;# 
   413  011A                     	;# 
   414  011B                     	;# 
   415  011B                     	;# 
   416  011B                     	;# 
   417  011B                     	;# 
   418  011B                     	;# 
   419  011C                     	;# 
   420  011C                     	;# 
   421  011C                     	;# 
   422  011D                     	;# 
   423  011D                     	;# 
   424  011D                     	;# 
   425  011E                     	;# 
   426  011E                     	;# 
   427  011E                     	;# 
   428  011F                     	;# 
   429  011F                     	;# 
   430  011F                     	;# 
   431  011F                     	;# 
   432  011F                     	;# 
   433  018C                     	;# 
   434  018D                     	;# 
   435  018E                     	;# 
   436  018F                     	;# 
   437  0190                     	;# 
   438  0191                     	;# 
   439  0192                     	;# 
   440  020C                     	;# 
   441  020C                     	;# 
   442  020D                     	;# 
   443  020E                     	;# 
   444  020F                     	;# 
   445  020F                     	;# 
   446  0210                     	;# 
   447  0210                     	;# 
   448  0211                     	;# 
   449  0211                     	;# 
   450  028C                     	;# 
   451  028C                     	;# 
   452  028D                     	;# 
   453  028D                     	;# 
   454  028E                     	;# 
   455  028F                     	;# 
   456  0290                     	;# 
   457  0291                     	;# 
   458  030C                     	;# 
   459  030C                     	;# 
   460  030D                     	;# 
   461  030E                     	;# 
   462  030F                     	;# 
   463  0310                     	;# 
   464  0310                     	;# 
   465  0311                     	;# 
   466  0312                     	;# 
   467  0313                     	;# 
   468  0314                     	;# 
   469  0315                     	;# 
   470  0316                     	;# 
   471  0318                     	;# 
   472  0319                     	;# 
   473  031A                     	;# 
   474  031C                     	;# 
   475  031D                     	;# 
   476  031E                     	;# 
   477  038C                     	;# 
   478  038D                     	;# 
   479  038E                     	;# 
   480  058C                     	;# 
   481  058C                     	;# 
   482  058D                     	;# 
   483  058E                     	;# 
   484  058F                     	;# 
   485  058F                     	;# 
   486  0590                     	;# 
   487  0591                     	;# 
   488  0592                     	;# 
   489  0593                     	;# 
   490  059C                     	;# 
   491  059C                     	;# 
   492  059D                     	;# 
   493  059D                     	;# 
   494  059E                     	;# 
   495  059F                     	;# 
   496  060C                     	;# 
   497  060D                     	;# 
   498  060E                     	;# 
   499  060F                     	;# 
   500  0610                     	;# 
   501  0611                     	;# 
   502  0612                     	;# 
   503  0613                     	;# 
   504  0614                     	;# 
   505  070C                     	;# 
   506  070D                     	;# 
   507  070E                     	;# 
   508  070F                     	;# 
   509  0710                     	;# 
   510  0711                     	;# 
   511  0712                     	;# 
   512  0713                     	;# 
   513  0716                     	;# 
   514  0717                     	;# 
   515  0718                     	;# 
   516  0719                     	;# 
   517  071A                     	;# 
   518  071B                     	;# 
   519  071C                     	;# 
   520  071D                     	;# 
   521  0796                     	;# 
   522  0797                     	;# 
   523  0798                     	;# 
   524  0799                     	;# 
   525  079A                     	;# 
   526  079B                     	;# 
   527  080C                     	;# 
   528  080D                     	;# 
   529  080E                     	;# 
   530  080F                     	;# 
   531  0810                     	;# 
   532  0811                     	;# 
   533  0812                     	;# 
   534  0813                     	;# 
   535  0814                     	;# 
   536  081A                     	;# 
   537  081A                     	;# 
   538  081B                     	;# 
   539  081C                     	;# 
   540  081C                     	;# 
   541  081D                     	;# 
   542  081E                     	;# 
   543  081F                     	;# 
   544  088C                     	;# 
   545  088D                     	;# 
   546  088E                     	;# 
   547  088F                     	;# 
   548  0890                     	;# 
   549  0891                     	;# 
   550  0892                     	;# 
   551  0893                     	;# 
   552  0895                     	;# 
   553  0896                     	;# 
   554  090C                     	;# 
   555  090E                     	;# 
   556  090F                     	;# 
   557  091F                     	;# 
   558  098F                     	;# 
   559  098F                     	;# 
   560  0990                     	;# 
   561  0991                     	;# 
   562  0992                     	;# 
   563  0993                     	;# 
   564  0994                     	;# 
   565  0995                     	;# 
   566  0996                     	;# 
   567  0997                     	;# 
   568  0A19                     	;# 
   569  0A19                     	;# 
   570  0A1A                     	;# 
   571  0A1A                     	;# 
   572  0A1B                     	;# 
   573  0A1B                     	;# 
   574  0A1B                     	;# 
   575  0A1C                     	;# 
   576  0A1C                     	;# 
   577  0A1D                     	;# 
   578  0A1D                     	;# 
   579  0A1E                     	;# 
   580  0A1E                     	;# 
   581  0A1F                     	;# 
   582  0A1F                     	;# 
   583  0A1F                     	;# 
   584  1E0F                     	;# 
   585  1E10                     	;# 
   586  1E11                     	;# 
   587  1E12                     	;# 
   588  1E13                     	;# 
   589  1E14                     	;# 
   590  1E15                     	;# 
   591  1E16                     	;# 
   592  1E17                     	;# 
   593  1E18                     	;# 
   594  1E19                     	;# 
   595  1E1A                     	;# 
   596  1E1B                     	;# 
   597  1E1C                     	;# 
   598  1E1D                     	;# 
   599  1E1E                     	;# 
   600  1E1F                     	;# 
   601  1E20                     	;# 
   602  1E21                     	;# 
   603  1E22                     	;# 
   604  1E23                     	;# 
   605  1E24                     	;# 
   606  1E25                     	;# 
   607  1E26                     	;# 
   608  1E27                     	;# 
   609  1E28                     	;# 
   610  1E29                     	;# 
   611  1E2A                     	;# 
   612  1E2B                     	;# 
   613  1E2C                     	;# 
   614  1E2D                     	;# 
   615  1E2E                     	;# 
   616  1E2F                     	;# 
   617  1E30                     	;# 
   618  1E31                     	;# 
   619  1E32                     	;# 
   620  1E33                     	;# 
   621  1E34                     	;# 
   622  1E35                     	;# 
   623  1E36                     	;# 
   624  1E37                     	;# 
   625  1E8F                     	;# 
   626  1E90                     	;# 
   627  1E91                     	;# 
   628  1E92                     	;# 
   629  1E93                     	;# 
   630  1E9C                     	;# 
   631  1EA1                     	;# 
   632  1EA2                     	;# 
   633  1EB1                     	;# 
   634  1EBB                     	;# 
   635  1EBC                     	;# 
   636  1EBD                     	;# 
   637  1EBE                     	;# 
   638  1EC3                     	;# 
   639  1EC5                     	;# 
   640  1EC6                     	;# 
   641  1EC7                     	;# 
   642  1ECB                     	;# 
   643  1ECC                     	;# 
   644  1ECD                     	;# 
   645  1ECE                     	;# 
   646  1F10                     	;# 
   647  1F11                     	;# 
   648  1F12                     	;# 
   649  1F13                     	;# 
   650  1F14                     	;# 
   651  1F15                     	;# 
   652  1F20                     	;# 
   653  1F21                     	;# 
   654  1F22                     	;# 
   655  1F23                     	;# 
   656  1F24                     	;# 
   657  1F25                     	;# 
   658  1F38                     	;# 
   659  1F39                     	;# 
   660  1F3A                     	;# 
   661  1F3B                     	;# 
   662  1F3C                     	;# 
   663  1F3D                     	;# 
   664  1F3E                     	;# 
   665  1F3F                     	;# 
   666  1F4E                     	;# 
   667  1F4F                     	;# 
   668  1F50                     	;# 
   669  1F51                     	;# 
   670  1F52                     	;# 
   671  1F53                     	;# 
   672  1F54                     	;# 
   673  1F55                     	;# 
   674  1FE4                     	;# 
   675  1FE5                     	;# 
   676  1FE6                     	;# 
   677  1FE7                     	;# 
   678  1FE8                     	;# 
   679  1FE8                     	;# 
   680  1FE9                     	;# 
   681  1FEA                     	;# 
   682  1FEA                     	;# 
   683  1FEB                     	;# 
   684  1FED                     	;# 
   685  1FEE                     	;# 
   686  1FEF                     	;# 
   687  0000                     	;# 
   688  0001                     	;# 
   689  0002                     	;# 
   690  0003                     	;# 
   691  0004                     	;# 
   692  0005                     	;# 
   693  0006                     	;# 
   694  0007                     	;# 
   695  0008                     	;# 
   696  0009                     	;# 
   697  000A                     	;# 
   698  000B                     	;# 
   699  000C                     	;# 
   700  000E                     	;# 
   701  0012                     	;# 
   702  0014                     	;# 
   703  0018                     	;# 
   704  001A                     	;# 
   705  009B                     	;# 
   706  009B                     	;# 
   707  009C                     	;# 
   708  009D                     	;# 
   709  009E                     	;# 
   710  009F                     	;# 
   711  0119                     	;# 
   712  0119                     	;# 
   713  0119                     	;# 
   714  011A                     	;# 
   715  011A                     	;# 
   716  011A                     	;# 
   717  011B                     	;# 
   718  011B                     	;# 
   719  011B                     	;# 
   720  011B                     	;# 
   721  011B                     	;# 
   722  011C                     	;# 
   723  011C                     	;# 
   724  011C                     	;# 
   725  011D                     	;# 
   726  011D                     	;# 
   727  011D                     	;# 
   728  011E                     	;# 
   729  011E                     	;# 
   730  011E                     	;# 
   731  011F                     	;# 
   732  011F                     	;# 
   733  011F                     	;# 
   734  011F                     	;# 
   735  011F                     	;# 
   736  018C                     	;# 
   737  018D                     	;# 
   738  018E                     	;# 
   739  018F                     	;# 
   740  0190                     	;# 
   741  0191                     	;# 
   742  0192                     	;# 
   743  020C                     	;# 
   744  020C                     	;# 
   745  020D                     	;# 
   746  020E                     	;# 
   747  020F                     	;# 
   748  020F                     	;# 
   749  0210                     	;# 
   750  0210                     	;# 
   751  0211                     	;# 
   752  0211                     	;# 
   753  028C                     	;# 
   754  028C                     	;# 
   755  028D                     	;# 
   756  028D                     	;# 
   757  028E                     	;# 
   758  028F                     	;# 
   759  0290                     	;# 
   760  0291                     	;# 
   761  030C                     	;# 
   762  030C                     	;# 
   763  030D                     	;# 
   764  030E                     	;# 
   765  030F                     	;# 
   766  0310                     	;# 
   767  0310                     	;# 
   768  0311                     	;# 
   769  0312                     	;# 
   770  0313                     	;# 
   771  0314                     	;# 
   772  0315                     	;# 
   773  0316                     	;# 
   774  0318                     	;# 
   775  0319                     	;# 
   776  031A                     	;# 
   777  031C                     	;# 
   778  031D                     	;# 
   779  031E                     	;# 
   780  038C                     	;# 
   781  038D                     	;# 
   782  038E                     	;# 
   783  058C                     	;# 
   784  058C                     	;# 
   785  058D                     	;# 
   786  058E                     	;# 
   787  058F                     	;# 
   788  058F                     	;# 
   789  0590                     	;# 
   790  0591                     	;# 
   791  0592                     	;# 
   792  0593                     	;# 
   793  059C                     	;# 
   794  059C                     	;# 
   795  059D                     	;# 
   796  059D                     	;# 
   797  059E                     	;# 
   798  059F                     	;# 
   799  060C                     	;# 
   800  060D                     	;# 
   801  060E                     	;# 
   802  060F                     	;# 
   803  0610                     	;# 
   804  0611                     	;# 
   805  0612                     	;# 
   806  0613                     	;# 
   807  0614                     	;# 
   808  070C                     	;# 
   809  070D                     	;# 
   810  070E                     	;# 
   811  070F                     	;# 
   812  0710                     	;# 
   813  0711                     	;# 
   814  0712                     	;# 
   815  0713                     	;# 
   816  0716                     	;# 
   817  0717                     	;# 
   818  0718                     	;# 
   819  0719                     	;# 
   820  071A                     	;# 
   821  071B                     	;# 
   822  071C                     	;# 
   823  071D                     	;# 
   824  0796                     	;# 
   825  0797                     	;# 
   826  0798                     	;# 
   827  0799                     	;# 
   828  079A                     	;# 
   829  079B                     	;# 
   830  080C                     	;# 
   831  080D                     	;# 
   832  080E                     	;# 
   833  080F                     	;# 
   834  0810                     	;# 
   835  0811                     	;# 
   836  0812                     	;# 
   837  0813                     	;# 
   838  0814                     	;# 
   839  081A                     	;# 
   840  081A                     	;# 
   841  081B                     	;# 
   842  081C                     	;# 
   843  081C                     	;# 
   844  081D                     	;# 
   845  081E                     	;# 
   846  081F                     	;# 
   847  088C                     	;# 
   848  088D                     	;# 
   849  088E                     	;# 
   850  088F                     	;# 
   851  0890                     	;# 
   852  0891                     	;# 
   853  0892                     	;# 
   854  0893                     	;# 
   855  0895                     	;# 
   856  0896                     	;# 
   857  090C                     	;# 
   858  090E                     	;# 
   859  090F                     	;# 
   860  091F                     	;# 
   861  098F                     	;# 
   862  098F                     	;# 
   863  0990                     	;# 
   864  0991                     	;# 
   865  0992                     	;# 
   866  0993                     	;# 
   867  0994                     	;# 
   868  0995                     	;# 
   869  0996                     	;# 
   870  0997                     	;# 
   871  0A19                     	;# 
   872  0A19                     	;# 
   873  0A1A                     	;# 
   874  0A1A                     	;# 
   875  0A1B                     	;# 
   876  0A1B                     	;# 
   877  0A1B                     	;# 
   878  0A1C                     	;# 
   879  0A1C                     	;# 
   880  0A1D                     	;# 
   881  0A1D                     	;# 
   882  0A1E                     	;# 
   883  0A1E                     	;# 
   884  0A1F                     	;# 
   885  0A1F                     	;# 
   886  0A1F                     	;# 
   887  1E0F                     	;# 
   888  1E10                     	;# 
   889  1E11                     	;# 
   890  1E12                     	;# 
   891  1E13                     	;# 
   892  1E14                     	;# 
   893  1E15                     	;# 
   894  1E16                     	;# 
   895  1E17                     	;# 
   896  1E18                     	;# 
   897  1E19                     	;# 
   898  1E1A                     	;# 
   899  1E1B                     	;# 
   900  1E1C                     	;# 
   901  1E1D                     	;# 
   902  1E1E                     	;# 
   903  1E1F                     	;# 
   904  1E20                     	;# 
   905  1E21                     	;# 
   906  1E22                     	;# 
   907  1E23                     	;# 
   908  1E24                     	;# 
   909  1E25                     	;# 
   910  1E26                     	;# 
   911  1E27                     	;# 
   912  1E28                     	;# 
   913  1E29                     	;# 
   914  1E2A                     	;# 
   915  1E2B                     	;# 
   916  1E2C                     	;# 
   917  1E2D                     	;# 
   918  1E2E                     	;# 
   919  1E2F                     	;# 
   920  1E30                     	;# 
   921  1E31                     	;# 
   922  1E32                     	;# 
   923  1E33                     	;# 
   924  1E34                     	;# 
   925  1E35                     	;# 
   926  1E36                     	;# 
   927  1E37                     	;# 
   928  1E8F                     	;# 
   929  1E90                     	;# 
   930  1E91                     	;# 
   931  1E92                     	;# 
   932  1E93                     	;# 
   933  1E9C                     	;# 
   934  1EA1                     	;# 
   935  1EA2                     	;# 
   936  1EB1                     	;# 
   937  1EBB                     	;# 
   938  1EBC                     	;# 
   939  1EBD                     	;# 
   940  1EBE                     	;# 
   941  1EC3                     	;# 
   942  1EC5                     	;# 
   943  1EC6                     	;# 
   944  1EC7                     	;# 
   945  1ECB                     	;# 
   946  1ECC                     	;# 
   947  1ECD                     	;# 
   948  1ECE                     	;# 
   949  1F10                     	;# 
   950  1F11                     	;# 
   951  1F12                     	;# 
   952  1F13                     	;# 
   953  1F14                     	;# 
   954  1F15                     	;# 
   955  1F20                     	;# 
   956  1F21                     	;# 
   957  1F22                     	;# 
   958  1F23                     	;# 
   959  1F24                     	;# 
   960  1F25                     	;# 
   961  1F38                     	;# 
   962  1F39                     	;# 
   963  1F3A                     	;# 
   964  1F3B                     	;# 
   965  1F3C                     	;# 
   966  1F3D                     	;# 
   967  1F3E                     	;# 
   968  1F3F                     	;# 
   969  1F4E                     	;# 
   970  1F4F                     	;# 
   971  1F50                     	;# 
   972  1F51                     	;# 
   973  1F52                     	;# 
   974  1F53                     	;# 
   975  1F54                     	;# 
   976  1F55                     	;# 
   977  1FE4                     	;# 
   978  1FE5                     	;# 
   979  1FE6                     	;# 
   980  1FE7                     	;# 
   981  1FE8                     	;# 
   982  1FE8                     	;# 
   983  1FE9                     	;# 
   984  1FEA                     	;# 
   985  1FEA                     	;# 
   986  1FEB                     	;# 
   987  1FED                     	;# 
   988  1FEE                     	;# 
   989  1FEF                     	;# 
   990                           
   991                           	psect	stringtext1
   992  0800                     __pstringtext1:	
   993  0800                     _hexpowers:	
   994  0800  3401               	retlw	1
   995  0801  3400               	retlw	0
   996  0802  3410               	retlw	16
   997  0803  3400               	retlw	0
   998  0804  3400               	retlw	0
   999  0805  3401               	retlw	1
  1000  0806  3400               	retlw	0
  1001  0807  3410               	retlw	16
  1002  0808                     __end_of_hexpowers:	
  1003  000C                     _PORTAbits	set	12
  1004  0018                     _LATAbits	set	24
  1005  0012                     _TRISAbits	set	18
  1006  0014                     _TRISC	set	20
  1007  0012                     _TRISA	set	18
  1008  001A                     _LATC	set	26
  1009  0018                     _LATA	set	24
  1010  0071                     _RC1	set	113
  1011  0070                     _RC0	set	112
  1012  0075                     _RC5	set	117
  1013  0074                     _RC4	set	116
  1014  0073                     _RC3	set	115
  1015  0072                     _RC2	set	114
  1016  0892                     _OSCTUNE	set	2194
  1017  0890                     _OSCSTAT	set	2192
  1018  0893                     _OSCFRQ	set	2195
  1019  0891                     _OSCEN	set	2193
  1020  088F                     _OSCCON3	set	2191
  1021  088D                     _OSCCON1	set	2189
  1022  1F50                     _ODCONC	set	8016
  1023  1F3A                     _ODCONA	set	7994
  1024  1F4F                     _WPUC	set	8015
  1025  1F39                     _WPUA	set	7993
  1026  1F38                     _ANSELA	set	7992
  1027  1F4E                     _ANSELC	set	8014
  1028  0808                     STR_1:	
  1029  0808  3425               	retlw	37	;'%'
  1030  0809  3430               	retlw	48	;'0'
  1031  080A  3432               	retlw	50	;'2'
  1032  080B  3458               	retlw	88	;'X'
  1033  080C  3425               	retlw	37	;'%'
  1034  080D  3430               	retlw	48	;'0'
  1035  080E  3432               	retlw	50	;'2'
  1036  080F  3458               	retlw	88	;'X'
  1037  0810  3425               	retlw	37	;'%'
  1038  0811  3430               	retlw	48	;'0'
  1039  0812  3432               	retlw	50	;'2'
  1040  0813  3458               	retlw	88	;'X'
  1041  0814  3425               	retlw	37	;'%'
  1042  0815  3430               	retlw	48	;'0'
  1043  0816  3432               	retlw	50	;'2'
  1044  0817  3458               	retlw	88	;'X'
  1045  0818  3425               	retlw	37	;'%'
  1046  0819  3430               	retlw	48	;'0'
  1047  081A  3432               	retlw	50	;'2'
  1048  081B  3458               	retlw	88	;'X'
  1049  081C  3425               	retlw	37	;'%'
  1050  081D  3430               	retlw	48	;'0'
  1051  081E  3432               	retlw	50	;'2'
  1052  081F  3458               	retlw	88	;'X'
  1053  0820  3425               	retlw	37	;'%'
  1054  0821  3430               	retlw	48	;'0'
  1055  0822  3432               	retlw	50	;'2'
  1056  0823  3458               	retlw	88	;'X'
  1057  0824  3425               	retlw	37	;'%'
  1058  0825  3430               	retlw	48	;'0'
  1059  0826  3432               	retlw	50	;'2'
  1060  0827  3458               	retlw	88	;'X'
  1061  0828  3400               	retlw	0
  1062                           
  1063                           	psect	stringtext2
  1064  1000                     __pstringtext2:	
  1065  1000                     STR_6:	
  1066  1000  3430               	retlw	48	;'0'
  1067  1001  3431               	retlw	49	;'1'
  1068  1002  3432               	retlw	50	;'2'
  1069  1003  3433               	retlw	51	;'3'
  1070  1004  3434               	retlw	52	;'4'
  1071  1005  3435               	retlw	53	;'5'
  1072  1006  3436               	retlw	54	;'6'
  1073  1007  3437               	retlw	55	;'7'
  1074  1008  3438               	retlw	56	;'8'
  1075  1009  3439               	retlw	57	;'9'
  1076  100A  3441               	retlw	65	;'A'
  1077  100B  3442               	retlw	66	;'B'
  1078  100C  3443               	retlw	67	;'C'
  1079  100D  3444               	retlw	68	;'D'
  1080  100E  3445               	retlw	69	;'E'
  1081  100F  3446               	retlw	70	;'F'
  1082  1010  3400               	retlw	0
  1083                           
  1084                           	psect	stringtext3
  1085  1011                     __pstringtext3:	
  1086  1011                     STR_4:	
  1087  1011  3420               	retlw	32	;' '
  1088  1012  3431               	retlw	49	;'1'
  1089  1013  342D               	retlw	45	;'-'
  1090  1014  3477               	retlw	119	;'w'
  1091  1015  3469               	retlw	105	;'i'
  1092  1016  3472               	retlw	114	;'r'
  1093  1017  3465               	retlw	101	;'e'
  1094  1018  3420               	retlw	32	;' '
  1095  1019  344D               	retlw	77	;'M'
  1096  101A  3469               	retlw	105	;'i'
  1097  101B  3473               	retlw	115	;'s'
  1098  101C  3473               	retlw	115	;'s'
  1099  101D  3469               	retlw	105	;'i'
  1100  101E  346E               	retlw	110	;'n'
  1101  101F  3467               	retlw	103	;'g'
  1102  1020  3400               	retlw	0
  1103                           
  1104                           	psect	stringtext4
  1105  1021                     __pstringtext4:	
  1106  1021                     STR_2:	
  1107  1021  3420               	retlw	32	;' '
  1108  1022  3431               	retlw	49	;'1'
  1109  1023  342D               	retlw	45	;'-'
  1110  1024  3477               	retlw	119	;'w'
  1111  1025  3469               	retlw	105	;'i'
  1112  1026  3472               	retlw	114	;'r'
  1113  1027  3465               	retlw	101	;'e'
  1114  1028  3420               	retlw	32	;' '
  1115  1029  3450               	retlw	80	;'P'
  1116  102A  3472               	retlw	114	;'r'
  1117  102B  3465               	retlw	101	;'e'
  1118  102C  3473               	retlw	115	;'s'
  1119  102D  3465               	retlw	101	;'e'
  1120  102E  346E               	retlw	110	;'n'
  1121  102F  3474               	retlw	116	;'t'
  1122  1030  3400               	retlw	0
  1123                           
  1124                           	psect	stringtext5
  1125  1031                     __pstringtext5:	
  1126  1031                     STR_5:	
  1127  1031  3428               	retlw	40	;'('
  1128  1032  346E               	retlw	110	;'n'
  1129  1033  3475               	retlw	117	;'u'
  1130  1034  346C               	retlw	108	;'l'
  1131  1035  346C               	retlw	108	;'l'
  1132  1036  3429               	retlw	41	;')'
  1133  1037  3400               	retlw	0
  1134                           
  1135                           	psect	stringtext6
  1136  1038                     __pstringtext6:	
  1137  1038                     STR_3:	
  1138  1038  3425               	retlw	37	;'%'
  1139  1039  3473               	retlw	115	;'s'
  1140  103A  3400               	retlw	0
  1141                           
  1142                           	psect	stringtext7
  1143  0000                     __pstringtext7:	
  1144                           
  1145                           ; #config settings
  1146  0000                     
  1147                           	psect	cinit
  1148  07FD                     start_initialization:	
  1149  07FD                     __initialization:	
  1150  07FD                     end_of_initialization:	
  1151                           ;End of C runtime variable initialization code
  1152                           
  1153  07FD                     __end_of__initialization:	
  1154  07FD  0140               	movlb	0
  1155  07FE  3185  2D84         	ljmp	_main	;jump to C main() function
  1156                           
  1157                           	psect	cstackBANK2
  1158  0120                     __pcstackBANK2:	
  1159  0120                     main@tempH:	
  1160                           
  1161                           ; 2 bytes @ 0x0
  1162  0120                     	ds	2
  1163  0122                     main@temperatureCprecise:	
  1164                           
  1165                           ; 3 bytes @ 0x2
  1166  0122                     	ds	3
  1167  0125                     main@flag:	
  1168                           
  1169                           ; 2 bytes @ 0x5
  1170  0125                     	ds	2
  1171  0127                     main@a:	
  1172                           
  1173                           ; 2 bytes @ 0x7
  1174  0127                     	ds	2
  1175  0129                     main@temp:	
  1176                           
  1177                           ; 1 bytes @ 0x9
  1178  0129                     	ds	1
  1179  012A                     main@i:	
  1180                           
  1181                           ; 2 bytes @ 0xA
  1182  012A                     	ds	2
  1183  012C                     main@tCprecise:	
  1184                           
  1185                           ; 3 bytes @ 0xC
  1186  012C                     	ds	3
  1187  012F                     main@binaryTemperatureC:	
  1188                           
  1189                           ; 2 bytes @ 0xF
  1190  012F                     	ds	2
  1191                           
  1192                           	psect	cstackBANK1
  1193  00A0                     __pcstackBANK1:	
  1194  00A0                     main@deviceSerialNum:	
  1195                           
  1196                           ; 64 bytes @ 0x0
  1197  00A0                     	ds	64
  1198  00E0                     main@serial_number:	
  1199                           
  1200                           ; 8 bytes @ 0x40
  1201  00E0                     	ds	8
  1202  00E8                     main@serial_number_reversed:	
  1203                           
  1204                           ; 8 bytes @ 0x48
  1205  00E8                     	ds	8
  1206                           
  1207                           	psect	cstackCOMMON
  1208  0070                     __pcstackCOMMON:	
  1209  0070                     ?_isdigit:	
  1210  0070                     ?_PIN_MANAGER_Initialize:	
  1211                           ; 1 bit 
  1212                           
  1213  0070                     ??_PIN_MANAGER_Initialize:	
  1214                           ; 1 bytes @ 0x0
  1215                           
  1216  0070                     ?_OSCILLATOR_Initialize:	
  1217                           ; 1 bytes @ 0x0
  1218                           
  1219  0070                     ??_OSCILLATOR_Initialize:	
  1220                           ; 1 bytes @ 0x0
  1221                           
  1222  0070                     ??_isdigit:	
  1223                           ; 1 bytes @ 0x0
  1224                           
  1225  0070                     ?_SYSTEM_Initialize:	
  1226                           ; 1 bytes @ 0x0
  1227                           
  1228  0070                     ??_SYSTEM_Initialize:	
  1229                           ; 1 bytes @ 0x0
  1230                           
  1231  0070                     ?_drive_OW_low:	
  1232                           ; 1 bytes @ 0x0
  1233                           
  1234  0070                     ??_drive_OW_low:	
  1235                           ; 1 bytes @ 0x0
  1236                           
  1237  0070                     ?_drive_OW_high:	
  1238                           ; 1 bytes @ 0x0
  1239                           
  1240  0070                     ??_drive_OW_high:	
  1241                           ; 1 bytes @ 0x0
  1242                           
  1243  0070                     ?_read_OW:	
  1244                           ; 1 bytes @ 0x0
  1245                           
  1246  0070                     ??_read_OW:	
  1247                           ; 1 bytes @ 0x0
  1248                           
  1249  0070                     ?_OW_reset_pulse:	
  1250                           ; 1 bytes @ 0x0
  1251                           
  1252  0070                     ?_OW_write_bit:	
  1253                           ; 1 bytes @ 0x0
  1254                           
  1255  0070                     ??_OW_write_bit:	
  1256                           ; 1 bytes @ 0x0
  1257                           
  1258  0070                     ?_OW_read_bit:	
  1259                           ; 1 bytes @ 0x0
  1260                           
  1261  0070                     ?_OW_write_byte:	
  1262                           ; 1 bytes @ 0x0
  1263                           
  1264  0070                     ?_OW_read_byte:	
  1265                           ; 1 bytes @ 0x0
  1266                           
  1267  0070                     ?_Lcd_Port:	
  1268                           ; 1 bytes @ 0x0
  1269                           
  1270  0070                     ??_Lcd_Port:	
  1271                           ; 1 bytes @ 0x0
  1272                           
  1273  0070                     ?_Lcd_Cmd:	
  1274                           ; 1 bytes @ 0x0
  1275                           
  1276  0070                     ?_Lcd_Init:	
  1277                           ; 1 bytes @ 0x0
  1278                           
  1279  0070                     ?_Lcd_Write_Char:	
  1280                           ; 1 bytes @ 0x0
  1281                           
  1282  0070                     ?_Lcd_Shift_Left:	
  1283                           ; 1 bytes @ 0x0
  1284                           
  1285  0070                     ?_main:	
  1286                           ; 1 bytes @ 0x0
  1287                           
  1288  0070                     ?_Lcd_Clear:	
  1289                           ; 1 bytes @ 0x0
  1290                           
  1291  0070                     ?___wmul:	
  1292                           ; 2 bytes @ 0x0
  1293                           
  1294  0070                     ?___lwdiv:	
  1295                           ; 2 bytes @ 0x0
  1296                           
  1297  0070                     ?___ftpack:	
  1298                           ; 2 bytes @ 0x0
  1299                           
  1300  0070                     read_OW@read_data:	
  1301                           ; 3 bytes @ 0x0
  1302                           
  1303  0070                     OW_write_bit@write_bit:	
  1304                           ; 1 bytes @ 0x0
  1305                           
  1306  0070                     Lcd_Port@a:	
  1307                           ; 1 bytes @ 0x0
  1308                           
  1309  0070                     _isdigit$378:	
  1310                           ; 1 bytes @ 0x0
  1311                           
  1312  0070                     ___wmul@multiplier:	
  1313                           ; 1 bytes @ 0x0
  1314                           
  1315  0070                     ___lwdiv@divisor:	
  1316                           ; 2 bytes @ 0x0
  1317                           
  1318  0070                     ___ftpack@arg:	
  1319                           ; 2 bytes @ 0x0
  1320                           
  1321                           
  1322                           ; 3 bytes @ 0x0
  1323  0070                     	ds	1
  1324  0071                     ??_OW_reset_pulse:	
  1325  0071                     ??_OW_read_bit:	
  1326                           ; 1 bytes @ 0x1
  1327                           
  1328  0071                     ??_OW_write_byte:	
  1329                           ; 1 bytes @ 0x1
  1330                           
  1331  0071                     ??_Lcd_Cmd:	
  1332                           ; 1 bytes @ 0x1
  1333                           
  1334  0071                     ??_Lcd_Write_Char:	
  1335                           ; 1 bytes @ 0x1
  1336                           
  1337  0071                     isdigit@c:	
  1338                           ; 1 bytes @ 0x1
  1339                           
  1340                           
  1341                           ; 1 bytes @ 0x1
  1342  0071                     	ds	1
  1343  0072                     OW_reset_pulse@presence_detect:	
  1344  0072                     OW_read_bit@read_data:	
  1345                           ; 1 bytes @ 0x2
  1346                           
  1347  0072                     OW_write_byte@write_data:	
  1348                           ; 1 bytes @ 0x2
  1349                           
  1350  0072                     Lcd_Cmd@a:	
  1351                           ; 1 bytes @ 0x2
  1352                           
  1353  0072                     Lcd_Write_Char@temp:	
  1354                           ; 1 bytes @ 0x2
  1355                           
  1356  0072                     ___wmul@multiplicand:	
  1357                           ; 1 bytes @ 0x2
  1358                           
  1359  0072                     ___lwdiv@dividend:	
  1360                           ; 2 bytes @ 0x2
  1361                           
  1362                           
  1363                           ; 2 bytes @ 0x2
  1364  0072                     	ds	1
  1365  0073                     ??_OW_read_byte:	
  1366  0073                     ??_Lcd_Clear:	
  1367                           ; 1 bytes @ 0x3
  1368                           
  1369  0073                     ?_Lcd_Set_Cursor:	
  1370                           ; 1 bytes @ 0x3
  1371                           
  1372  0073                     ??_Lcd_Init:	
  1373                           ; 1 bytes @ 0x3
  1374                           
  1375  0073                     ??_Lcd_Shift_Left:	
  1376                           ; 1 bytes @ 0x3
  1377                           
  1378  0073                     OW_write_byte@loop:	
  1379                           ; 1 bytes @ 0x3
  1380                           
  1381  0073                     Lcd_Set_Cursor@b:	
  1382                           ; 1 bytes @ 0x3
  1383                           
  1384  0073                     Lcd_Write_Char@y:	
  1385                           ; 1 bytes @ 0x3
  1386                           
  1387  0073                     ___ftpack@exp:	
  1388                           ; 1 bytes @ 0x3
  1389                           
  1390                           
  1391                           ; 1 bytes @ 0x3
  1392  0073                     	ds	1
  1393  0074                     ??_Lcd_Set_Cursor:	
  1394  0074                     ??___wmul:	
  1395                           ; 1 bytes @ 0x4
  1396                           
  1397  0074                     ??___lwdiv:	
  1398                           ; 1 bytes @ 0x4
  1399                           
  1400  0074                     OW_read_byte@result:	
  1401                           ; 1 bytes @ 0x4
  1402                           
  1403  0074                     Lcd_Write_Char@a:	
  1404                           ; 1 bytes @ 0x4
  1405                           
  1406  0074                     ___ftpack@sign:	
  1407                           ; 1 bytes @ 0x4
  1408                           
  1409  0074                     ___wmul@product:	
  1410                           ; 1 bytes @ 0x4
  1411                           
  1412                           
  1413                           ; 2 bytes @ 0x4
  1414  0074                     	ds	1
  1415  0075                     ??___ftpack:	
  1416  0075                     ?_Lcd_Write_String:	
  1417                           ; 1 bytes @ 0x5
  1418                           
  1419  0075                     OW_read_byte@loop:	
  1420                           ; 1 bytes @ 0x5
  1421                           
  1422  0075                     Lcd_Write_String@a:	
  1423                           ; 1 bytes @ 0x5
  1424                           
  1425  0075                     ___lwdiv@quotient:	
  1426                           ; 2 bytes @ 0x5
  1427                           
  1428                           
  1429                           ; 2 bytes @ 0x5
  1430  0075                     	ds	1
  1431  0076                     Lcd_Set_Cursor@a:	
  1432                           
  1433                           ; 1 bytes @ 0x6
  1434  0076                     	ds	1
  1435  0077                     ??_Lcd_Write_String:	
  1436  0077                     Lcd_Set_Cursor@z:	
  1437                           ; 1 bytes @ 0x7
  1438                           
  1439  0077                     ___lwdiv@counter:	
  1440                           ; 1 bytes @ 0x7
  1441                           
  1442                           
  1443                           ; 1 bytes @ 0x7
  1444  0077                     	ds	1
  1445  0078                     ??_sprintf:	
  1446  0078                     ?___ftmul:	
  1447                           ; 1 bytes @ 0x8
  1448                           
  1449  0078                     ?___lwtoft:	
  1450                           ; 3 bytes @ 0x8
  1451                           
  1452  0078                     Lcd_Set_Cursor@y:	
  1453                           ; 3 bytes @ 0x8
  1454                           
  1455  0078                     Lcd_Write_String@i:	
  1456                           ; 1 bytes @ 0x8
  1457                           
  1458  0078                     ___lwtoft@c:	
  1459                           ; 2 bytes @ 0x8
  1460                           
  1461  0078                     ___ftmul@f1:	
  1462                           ; 2 bytes @ 0x8
  1463                           
  1464                           
  1465                           ; 3 bytes @ 0x8
  1466  0078                     	ds	1
  1467  0079                     Lcd_Set_Cursor@temp:	
  1468                           
  1469                           ; 1 bytes @ 0x9
  1470  0079                     	ds	2
  1471  007B                     ??___lwtoft:	
  1472  007B                     ___ftmul@f2:	
  1473                           ; 1 bytes @ 0xB
  1474                           
  1475                           
  1476                           ; 3 bytes @ 0xB
  1477  007B                     	ds	3
  1478                           
  1479                           	psect	cstackBANK0
  1480  0020                     __pcstackBANK0:	
  1481  0020                     ??___ftmul:	
  1482  0020                     ?_sprintf:	
  1483                           ; 1 bytes @ 0x0
  1484                           
  1485  0020                     sprintf@f:	
  1486                           ; 2 bytes @ 0x0
  1487                           
  1488                           
  1489                           ; 2 bytes @ 0x0
  1490  0020                     	ds	4
  1491  0024                     ___ftmul@exp:	
  1492                           
  1493                           ; 1 bytes @ 0x4
  1494  0024                     	ds	1
  1495  0025                     ___ftmul@f3_as_product:	
  1496                           
  1497                           ; 3 bytes @ 0x5
  1498  0025                     	ds	3
  1499  0028                     ___ftmul@cntr:	
  1500                           
  1501                           ; 1 bytes @ 0x8
  1502  0028                     	ds	1
  1503  0029                     ___ftmul@sign:	
  1504                           
  1505                           ; 1 bytes @ 0x9
  1506  0029                     	ds	1
  1507  002A                     ?___ftdiv:	
  1508  002A                     ___ftdiv@f2:	
  1509                           ; 3 bytes @ 0xA
  1510                           
  1511                           
  1512                           ; 3 bytes @ 0xA
  1513  002A                     	ds	3
  1514  002D                     ___ftdiv@f1:	
  1515                           
  1516                           ; 3 bytes @ 0xD
  1517  002D                     	ds	3
  1518  0030                     ??___ftdiv:	
  1519                           
  1520                           ; 1 bytes @ 0x10
  1521  0030                     	ds	2
  1522  0032                     sprintf@idx:	
  1523                           
  1524                           ; 1 bytes @ 0x12
  1525  0032                     	ds	1
  1526  0033                     sprintf@flag:	
  1527                           
  1528                           ; 1 bytes @ 0x13
  1529  0033                     	ds	1
  1530  0034                     ___ftdiv@cntr:	
  1531  0034                     sprintf@val:	
  1532                           ; 1 bytes @ 0x14
  1533                           
  1534                           
  1535                           ; 2 bytes @ 0x14
  1536  0034                     	ds	1
  1537  0035                     ___ftdiv@f3:	
  1538                           
  1539                           ; 3 bytes @ 0x15
  1540  0035                     	ds	1
  1541  0036                     sprintf@prec:	
  1542                           
  1543                           ; 1 bytes @ 0x16
  1544  0036                     	ds	1
  1545  0037                     sprintf@ap:	
  1546                           
  1547                           ; 1 bytes @ 0x17
  1548  0037                     	ds	1
  1549  0038                     ___ftdiv@exp:	
  1550  0038                     sprintf@cp:	
  1551                           ; 1 bytes @ 0x18
  1552                           
  1553                           
  1554                           ; 2 bytes @ 0x18
  1555  0038                     	ds	1
  1556  0039                     ___ftdiv@sign:	
  1557                           
  1558                           ; 1 bytes @ 0x19
  1559  0039                     	ds	1
  1560  003A                     ?___ftadd:	
  1561  003A                     sprintf@len:	
  1562                           ; 3 bytes @ 0x1A
  1563                           
  1564  003A                     ___ftadd@f1:	
  1565                           ; 2 bytes @ 0x1A
  1566                           
  1567                           
  1568                           ; 3 bytes @ 0x1A
  1569  003A                     	ds	2
  1570  003C                     sprintf@sp:	
  1571                           
  1572                           ; 1 bytes @ 0x1C
  1573  003C                     	ds	1
  1574  003D                     sprintf@width:	
  1575  003D                     ___ftadd@f2:	
  1576                           ; 2 bytes @ 0x1D
  1577                           
  1578                           
  1579                           ; 3 bytes @ 0x1D
  1580  003D                     	ds	2
  1581  003F                     sprintf@c:	
  1582                           
  1583                           ; 1 bytes @ 0x1F
  1584  003F                     	ds	1
  1585  0040                     ??___ftadd:	
  1586                           
  1587                           ; 1 bytes @ 0x20
  1588  0040                     	ds	4
  1589  0044                     ___ftadd@sign:	
  1590                           
  1591                           ; 1 bytes @ 0x24
  1592  0044                     	ds	1
  1593  0045                     ___ftadd@exp2:	
  1594                           
  1595                           ; 1 bytes @ 0x25
  1596  0045                     	ds	1
  1597  0046                     ___ftadd@exp1:	
  1598                           
  1599                           ; 1 bytes @ 0x26
  1600  0046                     	ds	1
  1601  0047                     ??_main:	
  1602                           
  1603                           ; 1 bytes @ 0x27
  1604  0047                     	ds	16
  1605  0057                     main@buffer:	
  1606                           
  1607                           ; 20 bytes @ 0x37
  1608  0057                     	ds	20
  1609  006B                     main@temperatureFprecise:	
  1610                           
  1611                           ; 3 bytes @ 0x4B
  1612  006B                     	ds	3
  1613  006E                     main@tempL:	
  1614                           
  1615                           ; 2 bytes @ 0x4E
  1616  006E                     	ds	2
  1617                           
  1618                           	psect	maintext
  1619  0584                     __pmaintext:	
  1620 ;;
  1621 ;;Main: autosize = 0, tempsize = 16, incstack = 0, save=0
  1622 ;;
  1623 ;; *************** function _main *****************
  1624 ;; Defined at:
  1625 ;;		line 61 in file "main.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;		None
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;  deviceSerial   64    0[BANK1 ] unsigned char [64]
  1630 ;;  buffer         20   55[BANK0 ] unsigned char [20]
  1631 ;;  serial_numbe    8   72[BANK1 ] unsigned char [8]
  1632 ;;  serial_numbe    8   64[BANK1 ] unsigned char [8]
  1633 ;;  tCprecise       3   12[BANK2 ] float 
  1634 ;;  temperatureC    3    2[BANK2 ] float 
  1635 ;;  temperatureF    3   75[BANK0 ] float 
  1636 ;;  binaryTemper    2   15[BANK2 ] unsigned int 
  1637 ;;  i               2   10[BANK2 ] int 
  1638 ;;  a               2    7[BANK2 ] int 
  1639 ;;  flag            2    5[BANK2 ] int 
  1640 ;;  tempH           2    0[BANK2 ] unsigned short 
  1641 ;;  tempL           2   78[BANK0 ] unsigned short 
  1642 ;;  temp_msb        2    0        unsigned short 
  1643 ;;  temp_lsb        2    0        unsigned short 
  1644 ;;  temp            1    9[BANK2 ] unsigned char 
  1645 ;; Return value:  Size  Location     Type
  1646 ;;                  1    wreg      void 
  1647 ;; Registers used:
  1648 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1649 ;; Tracked objects:
  1650 ;;		On entry : B3F/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1655 ;;      Locals:         0      25      80      17       0       0       0       0       0       0       0       0       
      +0       0
  1656 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1657 ;;      Totals:         0      41      80      17       0       0       0       0       0       0       0       0       
      +0       0
  1658 ;;Total ram usage:      138 bytes
  1659 ;; Hardware stack levels required when called:    3
  1660 ;; This function calls:
  1661 ;;		_Lcd_Clear
  1662 ;;		_Lcd_Init
  1663 ;;		_Lcd_Set_Cursor
  1664 ;;		_Lcd_Shift_Left
  1665 ;;		_Lcd_Write_String
  1666 ;;		_OW_read_byte
  1667 ;;		_OW_reset_pulse
  1668 ;;		_OW_write_byte
  1669 ;;		_SYSTEM_Initialize
  1670 ;;		___ftadd
  1671 ;;		___ftdiv
  1672 ;;		___ftmul
  1673 ;;		___lwtoft
  1674 ;;		_sprintf
  1675 ;; This function is called by:
  1676 ;;		Startup code after reset
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           
  1681                           ;psect for function _main
  1682  0584                     _main:	
  1683                           
  1684                           ;main.c: 64: SYSTEM_Initialize();
  1685                           
  1686                           ;incstack = 0
  1687                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1688  0584  318E  26EC  3185   	fcall	_SYSTEM_Initialize
  1689                           
  1690                           ;main.c: 65: Lcd_Init();
  1691  0587  3180  20D4  3185   	fcall	_Lcd_Init
  1692  058A                     l1899:	
  1693                           ;main.c: 82: while (1)
  1694                           
  1695                           
  1696                           ;main.c: 83: {
  1697                           ;main.c: 84: int flag, i,a;
  1698                           ;main.c: 85: unsigned int binaryTemperatureC = 0;
  1699  058A  0142               	movlb	2	; select bank2
  1700  058B  01AF               	clrf	main@binaryTemperatureC^(0+256)
  1701  058C  01B0               	clrf	(main@binaryTemperatureC+1)^(0+256)
  1702                           
  1703                           ;main.c: 86: char deviceSerialNum[64];
  1704                           ;main.c: 87: char buffer[20];
  1705                           ;main.c: 88: unsigned char temp;
  1706                           ;main.c: 89: unsigned char serial_number[8], serial_number_reversed[8];
  1707                           ;main.c: 90: unsigned short tempL, tempH;
  1708                           ;main.c: 91: unsigned short temp_lsb,temp_msb;
  1709                           ;main.c: 92: float temperatureCprecise=0.0, tCprecise=0.0, temperatureFprecise=0.0;
  1710  058D  3000               	movlw	0
  1711  058E  00A2               	movwf	main@temperatureCprecise^(0+256)
  1712  058F  3000               	movlw	0
  1713  0590  00A3               	movwf	(main@temperatureCprecise+1)^(0+256)
  1714  0591  3000               	movlw	0
  1715  0592  00A4               	movwf	(main@temperatureCprecise+2)^(0+256)
  1716  0593  3000               	movlw	0
  1717  0594  00AC               	movwf	main@tCprecise^(0+256)
  1718  0595  3000               	movlw	0
  1719  0596  00AD               	movwf	(main@tCprecise+1)^(0+256)
  1720  0597  3000               	movlw	0
  1721  0598  00AE               	movwf	(main@tCprecise+2)^(0+256)
  1722  0599  3000               	movlw	0
  1723  059A  0140               	movlb	0	; select bank0
  1724  059B  00EB               	movwf	main@temperatureFprecise
  1725  059C  3000               	movlw	0
  1726  059D  00EC               	movwf	main@temperatureFprecise+1
  1727  059E  3000               	movlw	0
  1728  059F  00ED               	movwf	main@temperatureFprecise+2
  1729                           
  1730                           ;main.c: 94: flag=OW_reset_pulse();
  1731  05A0  3180  2010  3185   	fcall	_OW_reset_pulse
  1732  05A3  0140               	movlb	0	; select bank0
  1733  05A4  00C7               	movwf	??_main
  1734  05A5  01C8               	clrf	??_main+1
  1735  05A6  0847               	movf	??_main,w
  1736  05A7  0142               	movlb	2	; select bank2
  1737  05A8  00A5               	movwf	main@flag^(0+256)
  1738  05A9  0140               	movlb	0	; select bank0
  1739  05AA  0848               	movf	??_main+1,w
  1740  05AB  0142               	movlb	2	; select bank2
  1741  05AC  00A6               	movwf	(main@flag+1)^(0+256)
  1742                           
  1743                           ;main.c: 95: OW_write_byte(0x33);
  1744  05AD  3033               	movlw	51
  1745  05AE  318F  272A  3185   	fcall	_OW_write_byte
  1746                           
  1747                           ;main.c: 96: _delay((unsigned long)((20)*(32000000/4000000.0)));
  1748  05B1  3035               	movlw	53
  1749  05B2                     u2317:	
  1750  05B2  0B89               	decfsz	9,f
  1751  05B3  2DB2               	goto	u2317
  1752  05B4  0000               	nop
  1753                           
  1754                           ;main.c: 97: for(temp = 0; temp<8; temp++){
  1755  05B5  0142               	movlb	2	; select bank2
  1756  05B6  01A9               	clrf	main@temp^(0+256)
  1757  05B7  3008               	movlw	8
  1758  05B8  0229               	subwf	main@temp^(0+256),w
  1759  05B9  1803               	btfsc	3,0
  1760  05BA  2DD1               	goto	l1925
  1761  05BB                     l1919:	
  1762                           
  1763                           ;main.c: 98: serial_number[temp] = OW_read_byte();
  1764  05BB  318F  2793  3185   	fcall	_OW_read_byte
  1765  05BE  0140               	movlb	0	; select bank0
  1766  05BF  00C7               	movwf	??_main
  1767  05C0  0142               	movlb	2	; select bank2
  1768  05C1  0829               	movf	main@temp^(0+256),w
  1769  05C2  3EE0               	addlw	(low (main@serial_number| 0))& (0+255)
  1770  05C3  0086               	movwf	6
  1771  05C4  0187               	clrf	7
  1772  05C5  0140               	movlb	0	; select bank0
  1773  05C6  0847               	movf	??_main,w
  1774  05C7  0081               	movwf	1
  1775  05C8  3001               	movlw	1
  1776  05C9  00C7               	movwf	??_main
  1777  05CA  0847               	movf	??_main,w
  1778  05CB  0142               	movlb	2	; select bank2
  1779  05CC  07A9               	addwf	main@temp^(0+256),f
  1780  05CD  3008               	movlw	8
  1781  05CE  0229               	subwf	main@temp^(0+256),w
  1782  05CF  1C03               	skipc
  1783  05D0  2DBB               	goto	l1919
  1784  05D1                     l1925:	
  1785                           
  1786                           ;main.c: 99: }
  1787                           ;main.c: 101: for(i=0;i<=7;i++){
  1788  05D1  01AA               	clrf	main@i^(0+256)
  1789  05D2  01AB               	clrf	(main@i+1)^(0+256)
  1790  05D3  082B               	movf	(main@i+1)^(0+256),w
  1791  05D4  3A80               	xorlw	128
  1792  05D5  0140               	movlb	0	; select bank0
  1793  05D6  00C7               	movwf	??_main
  1794  05D7  3080               	movlw	128
  1795  05D8  0247               	subwf	??_main,w
  1796  05D9  1D03               	skipz
  1797  05DA  2DDE               	goto	u2225
  1798  05DB  3008               	movlw	8
  1799  05DC  0142               	movlb	2	; select bank2
  1800  05DD  022A               	subwf	main@i^(0+256),w
  1801  05DE                     u2225:	
  1802  05DE  1803               	btfsc	3,0
  1803  05DF  2E04               	goto	l1937
  1804  05E0                     l1931:	
  1805                           
  1806                           ;main.c: 102: serial_number_reversed[i]=serial_number[7-i] & 0xff;
  1807  05E0  0142               	movlb	2	; select bank2
  1808  05E1  032A               	decf	main@i^(0+256),w
  1809  05E2  3AFF               	xorlw	255
  1810  05E3  3E07               	addlw	7
  1811  05E4  3EE0               	addlw	(low (main@serial_number| 0))& (0+255)
  1812  05E5  0086               	movwf	6
  1813  05E6  0187               	clrf	7
  1814  05E7  0801               	movf	1,w
  1815  05E8  0140               	movlb	0	; select bank0
  1816  05E9  00C7               	movwf	??_main
  1817  05EA  0142               	movlb	2	; select bank2
  1818  05EB  082A               	movf	main@i^(0+256),w
  1819  05EC  3EE8               	addlw	(low (main@serial_number_reversed| 0))& (0+255)
  1820  05ED  0086               	movwf	6
  1821  05EE  0187               	clrf	7
  1822  05EF  0140               	movlb	0	; select bank0
  1823  05F0  0847               	movf	??_main,w
  1824  05F1  0081               	movwf	1
  1825  05F2  3001               	movlw	1
  1826  05F3  0142               	movlb	2	; select bank2
  1827  05F4  07AA               	addwf	main@i^(0+256),f
  1828  05F5  3000               	movlw	0
  1829  05F6  3DAB               	addwfc	(main@i+1)^(0+256),f
  1830  05F7  082B               	movf	(main@i+1)^(0+256),w
  1831  05F8  3A80               	xorlw	128
  1832  05F9  0140               	movlb	0	; select bank0
  1833  05FA  00C7               	movwf	??_main
  1834  05FB  3080               	movlw	128
  1835  05FC  0247               	subwf	??_main,w
  1836  05FD  1D03               	skipz
  1837  05FE  2E02               	goto	u2235
  1838  05FF  3008               	movlw	8
  1839  0600  0142               	movlb	2	; select bank2
  1840  0601  022A               	subwf	main@i^(0+256),w
  1841  0602                     u2235:	
  1842  0602  1C03               	skipc
  1843  0603  2DE0               	goto	l1931
  1844  0604                     l1937:	
  1845                           
  1846                           ;main.c: 103: }
  1847                           ;main.c: 104: sprintf(deviceSerialNum,"%02X%02X%02X%02X%02X%02X%02X%02X",serial_number_r
      +                          eversed[0],serial_number_reversed[1],serial_number_reversed[2],serial_number_reversed[3]
      +                          ,serial_number_reversed[4],serial_number_reversed[5],serial_number_reversed[6],serial_nu
  1848  0604  3008               	movlw	low (STR_1| (0+32768))
  1849  0605  0140               	movlb	0	; select bank0
  1850  0606  00A0               	movwf	sprintf@f
  1851  0607  3088               	movlw	high (STR_1| (0+32768))
  1852  0608  00A1               	movwf	sprintf@f+1
  1853  0609  0141               	movlb	1	; select bank1
  1854  060A  0868               	movf	main@serial_number_reversed^(0+128),w
  1855  060B  0140               	movlb	0	; select bank0
  1856  060C  00C7               	movwf	??_main
  1857  060D  01C8               	clrf	??_main+1
  1858  060E  0847               	movf	??_main,w
  1859  060F  00A2               	movwf	?_sprintf+2
  1860  0610  0848               	movf	??_main+1,w
  1861  0611  00A3               	movwf	?_sprintf+3
  1862  0612  0141               	movlb	1	; select bank1
  1863  0613  0869               	movf	(main@serial_number_reversed^(0+128)+1),w
  1864  0614  0140               	movlb	0	; select bank0
  1865  0615  00C9               	movwf	??_main+2
  1866  0616  01CA               	clrf	??_main+3
  1867  0617  0849               	movf	??_main+2,w
  1868  0618  00A4               	movwf	?_sprintf+4
  1869  0619  084A               	movf	??_main+3,w
  1870  061A  00A5               	movwf	?_sprintf+5
  1871  061B  0141               	movlb	1	; select bank1
  1872  061C  086A               	movf	(main@serial_number_reversed^(0+128)+2),w
  1873  061D  0140               	movlb	0	; select bank0
  1874  061E  00CB               	movwf	??_main+4
  1875  061F  01CC               	clrf	??_main+5
  1876  0620  084B               	movf	??_main+4,w
  1877  0621  00A6               	movwf	?_sprintf+6
  1878  0622  084C               	movf	??_main+5,w
  1879  0623  00A7               	movwf	?_sprintf+7
  1880  0624  0141               	movlb	1	; select bank1
  1881  0625  086B               	movf	(main@serial_number_reversed^(0+128)+3),w
  1882  0626  0140               	movlb	0	; select bank0
  1883  0627  00CD               	movwf	??_main+6
  1884  0628  01CE               	clrf	??_main+7
  1885  0629  084D               	movf	??_main+6,w
  1886  062A  00A8               	movwf	?_sprintf+8
  1887  062B  084E               	movf	??_main+7,w
  1888  062C  00A9               	movwf	?_sprintf+9
  1889  062D  0141               	movlb	1	; select bank1
  1890  062E  086C               	movf	(main@serial_number_reversed^(0+128)+4),w
  1891  062F  0140               	movlb	0	; select bank0
  1892  0630  00CF               	movwf	??_main+8
  1893  0631  01D0               	clrf	??_main+9
  1894  0632  084F               	movf	??_main+8,w
  1895  0633  00AA               	movwf	?_sprintf+10
  1896  0634  0850               	movf	??_main+9,w
  1897  0635  00AB               	movwf	?_sprintf+11
  1898  0636  0141               	movlb	1	; select bank1
  1899  0637  086D               	movf	(main@serial_number_reversed^(0+128)+5),w
  1900  0638  0140               	movlb	0	; select bank0
  1901  0639  00D1               	movwf	??_main+10
  1902  063A  01D2               	clrf	??_main+11
  1903  063B  0851               	movf	??_main+10,w
  1904  063C  00AC               	movwf	?_sprintf+12
  1905  063D  0852               	movf	??_main+11,w
  1906  063E  00AD               	movwf	?_sprintf+13
  1907  063F  0141               	movlb	1	; select bank1
  1908  0640  086E               	movf	(main@serial_number_reversed^(0+128)+6),w
  1909  0641  0140               	movlb	0	; select bank0
  1910  0642  00D3               	movwf	??_main+12
  1911  0643  01D4               	clrf	??_main+13
  1912  0644  0853               	movf	??_main+12,w
  1913  0645  00AE               	movwf	?_sprintf+14
  1914  0646  0854               	movf	??_main+13,w
  1915  0647  00AF               	movwf	?_sprintf+15
  1916  0648  0141               	movlb	1	; select bank1
  1917  0649  086F               	movf	(main@serial_number_reversed^(0+128)+7),w
  1918  064A  0140               	movlb	0	; select bank0
  1919  064B  00D5               	movwf	??_main+14
  1920  064C  01D6               	clrf	??_main+15
  1921  064D  0855               	movf	??_main+14,w
  1922  064E  00B0               	movwf	?_sprintf+16
  1923  064F  0856               	movf	??_main+15,w
  1924  0650  00B1               	movwf	?_sprintf+17
  1925  0651  30A0               	movlw	(low (main@deviceSerialNum| 0))& (0+255)
  1926  0652  3183  23CC  3185   	fcall	_sprintf
  1927                           
  1928                           ;main.c: 106: Lcd_Clear();
  1929  0655  318E  26F2  3185   	fcall	_Lcd_Clear
  1930                           
  1931                           ;main.c: 107: Lcd_Set_Cursor(1,1);
  1932  0658  01F3               	clrf	Lcd_Set_Cursor@b
  1933  0659  0AF3               	incf	Lcd_Set_Cursor@b,f
  1934  065A  3001               	movlw	1
  1935  065B  3180  2094  3185   	fcall	_Lcd_Set_Cursor
  1936                           
  1937                           ;main.c: 109: if(!flag)
  1938  065E  0142               	movlb	2	; select bank2
  1939  065F  0825               	movf	main@flag^(0+256),w
  1940  0660  0426               	iorwf	(main@flag+1)^(0+256),w
  1941  0661  1D03               	btfss	3,2
  1942  0662  2E83               	goto	l160
  1943                           
  1944                           ;main.c: 110: {
  1945                           ;main.c: 111: do { LATAbits.LATA4 = 0; } while(0);
  1946  0663  0140               	movlb	0	; select bank0
  1947  0664  1218               	bcf	24,4	;volatile
  1948                           
  1949                           ;main.c: 112: Lcd_Write_String(" 1-wire Present");
  1950  0665  3021               	movlw	low (STR_2| (0+32768))
  1951  0666  00F5               	movwf	Lcd_Write_String@a
  1952  0667  3090               	movlw	high (STR_2| (0+32768))
  1953  0668  00F6               	movwf	Lcd_Write_String@a+1
  1954  0669  318F  27AB  3185   	fcall	_Lcd_Write_String
  1955                           
  1956                           ;main.c: 113: Lcd_Set_Cursor(2,1);
  1957  066C  01F3               	clrf	Lcd_Set_Cursor@b
  1958  066D  0AF3               	incf	Lcd_Set_Cursor@b,f
  1959  066E  3002               	movlw	2
  1960  066F  3180  2094  3185   	fcall	_Lcd_Set_Cursor
  1961                           
  1962                           ;main.c: 114: sprintf(buffer, "%s", deviceSerialNum);
  1963  0672  3038               	movlw	low (STR_3| (0+32768))
  1964  0673  0140               	movlb	0	; select bank0
  1965  0674  00A0               	movwf	sprintf@f
  1966  0675  3090               	movlw	high (STR_3| (0+32768))
  1967  0676  00A1               	movwf	sprintf@f+1
  1968  0677  30A0               	movlw	(low (main@deviceSerialNum| 0))& (0+255)
  1969  0678  00C7               	movwf	??_main
  1970  0679  0847               	movf	??_main,w
  1971  067A  00A2               	movwf	low ((?_sprintf| 0+2))
  1972  067B  3057               	movlw	(low (main@buffer| 0))& (0+255)
  1973  067C  3183  23CC  3185   	fcall	_sprintf
  1974                           
  1975                           ;main.c: 115: Lcd_Write_String(buffer);
  1976  067F  3057               	movlw	low main@buffer
  1977  0680  00F5               	movwf	Lcd_Write_String@a
  1978  0681  3000               	movlw	high main@buffer
  1979  0682  2E88               	goto	L1
  1980  0683                     l160:	
  1981                           ;main.c: 117: else
  1982                           ;main.c: 118: {
  1983                           ;main.c: 119: do { LATAbits.LATA4 = 1; } while(0);
  1984                           
  1985                           ;main.c: 116: }
  1986                           
  1987  0683  0140               	movlb	0	; select bank0
  1988  0684  1618               	bsf	24,4	;volatile
  1989                           
  1990                           ;main.c: 120: Lcd_Write_String(" 1-wire Missing");
  1991  0685  3011               	movlw	low (STR_4| (0+32768))
  1992  0686  00F5               	movwf	Lcd_Write_String@a
  1993  0687  3090               	movlw	high (STR_4| (0+32768))
  1994  0688                     L1:	
  1995  0688  00F6               	movwf	Lcd_Write_String@a+1
  1996  0689  318F  27AB  3185   	fcall	_Lcd_Write_String
  1997                           
  1998                           ;main.c: 121: }
  1999                           ;main.c: 123: flag=OW_reset_pulse();
  2000  068C  3180  2010  3185   	fcall	_OW_reset_pulse
  2001  068F  0140               	movlb	0	; select bank0
  2002  0690  00C7               	movwf	??_main
  2003  0691  01C8               	clrf	??_main+1
  2004  0692  0847               	movf	??_main,w
  2005  0693  0142               	movlb	2	; select bank2
  2006  0694  00A5               	movwf	main@flag^(0+256)
  2007  0695  0140               	movlb	0	; select bank0
  2008  0696  0848               	movf	??_main+1,w
  2009  0697  0142               	movlb	2	; select bank2
  2010  0698  00A6               	movwf	(main@flag+1)^(0+256)
  2011                           
  2012                           ;main.c: 124: OW_write_byte(0xCC);
  2013  0699  30CC               	movlw	204
  2014  069A  318F  272A  3185   	fcall	_OW_write_byte
  2015                           
  2016                           ;main.c: 125: OW_write_byte(0x44);
  2017  069D  3044               	movlw	68
  2018  069E  318F  272A  3185   	fcall	_OW_write_byte
  2019                           
  2020                           ;main.c: 126: _delay((unsigned long)((750)*(32000000/4000.0)));
  2021  06A1  301F               	movlw	31
  2022  06A2  0140               	movlb	0	; select bank0
  2023  06A3  00C8               	movwf	??_main+1
  2024  06A4  3071               	movlw	113
  2025  06A5  00C7               	movwf	??_main
  2026  06A6  301E               	movlw	30
  2027  06A7                     u2327:	
  2028  06A7  0B89               	decfsz	9,f
  2029  06A8  2EA7               	goto	u2327
  2030  06A9  0BC7               	decfsz	??_main,f
  2031  06AA  2EA7               	goto	u2327
  2032  06AB  0BC8               	decfsz	??_main+1,f
  2033  06AC  2EA7               	goto	u2327
  2034  06AD  0000               	nop
  2035                           
  2036                           ;main.c: 127: flag=OW_reset_pulse();
  2037  06AE  3180  2010  3185   	fcall	_OW_reset_pulse
  2038  06B1  0140               	movlb	0	; select bank0
  2039  06B2  00C7               	movwf	??_main
  2040  06B3  01C8               	clrf	??_main+1
  2041  06B4  0847               	movf	??_main,w
  2042  06B5  0142               	movlb	2	; select bank2
  2043  06B6  00A5               	movwf	main@flag^(0+256)
  2044  06B7  0140               	movlb	0	; select bank0
  2045  06B8  0848               	movf	??_main+1,w
  2046  06B9  0142               	movlb	2	; select bank2
  2047  06BA  00A6               	movwf	(main@flag+1)^(0+256)
  2048                           
  2049                           ;main.c: 128: OW_write_byte(0xCC);
  2050  06BB  30CC               	movlw	204
  2051  06BC  318F  272A  3185   	fcall	_OW_write_byte
  2052                           
  2053                           ;main.c: 129: OW_write_byte(0xBE);
  2054  06BF  30BE               	movlw	190
  2055  06C0  318F  272A  3185   	fcall	_OW_write_byte
  2056                           
  2057                           ;main.c: 131: tempL = OW_read_byte();
  2058  06C3  318F  2793  3185   	fcall	_OW_read_byte
  2059  06C6  0140               	movlb	0	; select bank0
  2060  06C7  00C7               	movwf	??_main
  2061  06C8  01C8               	clrf	??_main+1
  2062  06C9  0847               	movf	??_main,w
  2063  06CA  00EE               	movwf	main@tempL
  2064  06CB  0848               	movf	??_main+1,w
  2065  06CC  00EF               	movwf	main@tempL+1
  2066                           
  2067                           ;main.c: 132: tempH = OW_read_byte();
  2068  06CD  318F  2793  3185   	fcall	_OW_read_byte
  2069  06D0  0140               	movlb	0	; select bank0
  2070  06D1  00C7               	movwf	??_main
  2071  06D2  01C8               	clrf	??_main+1
  2072  06D3  0847               	movf	??_main,w
  2073  06D4  0142               	movlb	2	; select bank2
  2074  06D5  00A0               	movwf	main@tempH^(0+256)
  2075  06D6  0140               	movlb	0	; select bank0
  2076  06D7  0848               	movf	??_main+1,w
  2077  06D8  0142               	movlb	2	; select bank2
  2078  06D9  00A1               	movwf	(main@tempH+1)^(0+256)
  2079                           
  2080                           ;main.c: 134: binaryTemperatureC=((unsigned int)tempH << 8 ) + (unsigned int)tempL;
  2081  06DA  0820               	movf	main@tempH^(0+256),w
  2082  06DB  0140               	movlb	0	; select bank0
  2083  06DC  00C8               	movwf	??_main+1
  2084  06DD  01C7               	clrf	??_main
  2085  06DE  086E               	movf	main@tempL,w
  2086  06DF  0747               	addwf	??_main,w
  2087  06E0  0142               	movlb	2	; select bank2
  2088  06E1  00AF               	movwf	main@binaryTemperatureC^(0+256)
  2089  06E2  0140               	movlb	0	; select bank0
  2090  06E3  086F               	movf	main@tempL+1,w
  2091  06E4  3D48               	addwfc	??_main+1,w
  2092  06E5  0142               	movlb	2	; select bank2
  2093  06E6  00B0               	movwf	(main@binaryTemperatureC+1)^(0+256)
  2094                           
  2095                           ;main.c: 137: if(binaryTemperatureC & 0x08){
  2096  06E7  1DAF               	btfss	main@binaryTemperatureC^(0+256),3
  2097  06E8  2EEF               	goto	l1979
  2098                           
  2099                           ;main.c: 138: tCprecise=0.5;
  2100  06E9  3000               	movlw	0
  2101  06EA  00AC               	movwf	main@tCprecise^(0+256)
  2102  06EB  3000               	movlw	0
  2103  06EC  00AD               	movwf	(main@tCprecise+1)^(0+256)
  2104  06ED  303F               	movlw	63
  2105  06EE  00AE               	movwf	(main@tCprecise+2)^(0+256)
  2106  06EF                     l1979:	
  2107                           
  2108                           ;main.c: 139: }
  2109                           ;main.c: 140: if(binaryTemperatureC & 0x04){
  2110  06EF  1D2F               	btfss	main@binaryTemperatureC^(0+256),2
  2111  06F0  2F13               	goto	l1983
  2112                           
  2113                           ;main.c: 141: tCprecise=tCprecise+0.25;
  2114  06F1  3000               	movlw	0
  2115  06F2  0140               	movlb	0	; select bank0
  2116  06F3  00BA               	movwf	___ftadd@f1
  2117  06F4  3080               	movlw	128
  2118  06F5  00BB               	movwf	___ftadd@f1+1
  2119  06F6  303E               	movlw	62
  2120  06F7  00BC               	movwf	___ftadd@f1+2
  2121  06F8  0142               	movlb	2	; select bank2
  2122  06F9  082C               	movf	main@tCprecise^(0+256),w
  2123  06FA  0140               	movlb	0	; select bank0
  2124  06FB  00BD               	movwf	___ftadd@f2
  2125  06FC  0142               	movlb	2	; select bank2
  2126  06FD  082D               	movf	(main@tCprecise+1)^(0+256),w
  2127  06FE  0140               	movlb	0	; select bank0
  2128  06FF  00BE               	movwf	___ftadd@f2+1
  2129  0700  0142               	movlb	2	; select bank2
  2130  0701  082E               	movf	(main@tCprecise+2)^(0+256),w
  2131  0702  0140               	movlb	0	; select bank0
  2132  0703  00BF               	movwf	___ftadd@f2+2
  2133  0704  3182  22D6  3185   	fcall	___ftadd
  2134  0707  0140               	movlb	0	; select bank0
  2135  0708  083A               	movf	?___ftadd,w
  2136  0709  0142               	movlb	2	; select bank2
  2137  070A  00AC               	movwf	main@tCprecise^(0+256)
  2138  070B  0140               	movlb	0	; select bank0
  2139  070C  083B               	movf	?___ftadd+1,w
  2140  070D  0142               	movlb	2	; select bank2
  2141  070E  00AD               	movwf	(main@tCprecise+1)^(0+256)
  2142  070F  0140               	movlb	0	; select bank0
  2143  0710  083C               	movf	?___ftadd+2,w
  2144  0711  0142               	movlb	2	; select bank2
  2145  0712  00AE               	movwf	(main@tCprecise+2)^(0+256)
  2146  0713                     l1983:	
  2147                           
  2148                           ;main.c: 142: }
  2149                           ;main.c: 143: if(binaryTemperatureC & 0x02){
  2150  0713  1CAF               	btfss	main@binaryTemperatureC^(0+256),1
  2151  0714  2F37               	goto	l1987
  2152                           
  2153                           ;main.c: 144: tCprecise=tCprecise+0.125;
  2154  0715  3000               	movlw	0
  2155  0716  0140               	movlb	0	; select bank0
  2156  0717  00BA               	movwf	___ftadd@f1
  2157  0718  3000               	movlw	0
  2158  0719  00BB               	movwf	___ftadd@f1+1
  2159  071A  303E               	movlw	62
  2160  071B  00BC               	movwf	___ftadd@f1+2
  2161  071C  0142               	movlb	2	; select bank2
  2162  071D  082C               	movf	main@tCprecise^(0+256),w
  2163  071E  0140               	movlb	0	; select bank0
  2164  071F  00BD               	movwf	___ftadd@f2
  2165  0720  0142               	movlb	2	; select bank2
  2166  0721  082D               	movf	(main@tCprecise+1)^(0+256),w
  2167  0722  0140               	movlb	0	; select bank0
  2168  0723  00BE               	movwf	___ftadd@f2+1
  2169  0724  0142               	movlb	2	; select bank2
  2170  0725  082E               	movf	(main@tCprecise+2)^(0+256),w
  2171  0726  0140               	movlb	0	; select bank0
  2172  0727  00BF               	movwf	___ftadd@f2+2
  2173  0728  3182  22D6  3185   	fcall	___ftadd
  2174  072B  0140               	movlb	0	; select bank0
  2175  072C  083A               	movf	?___ftadd,w
  2176  072D  0142               	movlb	2	; select bank2
  2177  072E  00AC               	movwf	main@tCprecise^(0+256)
  2178  072F  0140               	movlb	0	; select bank0
  2179  0730  083B               	movf	?___ftadd+1,w
  2180  0731  0142               	movlb	2	; select bank2
  2181  0732  00AD               	movwf	(main@tCprecise+1)^(0+256)
  2182  0733  0140               	movlb	0	; select bank0
  2183  0734  083C               	movf	?___ftadd+2,w
  2184  0735  0142               	movlb	2	; select bank2
  2185  0736  00AE               	movwf	(main@tCprecise+2)^(0+256)
  2186  0737                     l1987:	
  2187                           
  2188                           ;main.c: 145: }
  2189                           ;main.c: 146: if(binaryTemperatureC & 0x01){
  2190  0737  1C2F               	btfss	main@binaryTemperatureC^(0+256),0
  2191  0738  2F5B               	goto	l165
  2192                           
  2193                           ;main.c: 147: tCprecise=tCprecise+0.0625;
  2194  0739  3000               	movlw	0
  2195  073A  0140               	movlb	0	; select bank0
  2196  073B  00BA               	movwf	___ftadd@f1
  2197  073C  3080               	movlw	128
  2198  073D  00BB               	movwf	___ftadd@f1+1
  2199  073E  303D               	movlw	61
  2200  073F  00BC               	movwf	___ftadd@f1+2
  2201  0740  0142               	movlb	2	; select bank2
  2202  0741  082C               	movf	main@tCprecise^(0+256),w
  2203  0742  0140               	movlb	0	; select bank0
  2204  0743  00BD               	movwf	___ftadd@f2
  2205  0744  0142               	movlb	2	; select bank2
  2206  0745  082D               	movf	(main@tCprecise+1)^(0+256),w
  2207  0746  0140               	movlb	0	; select bank0
  2208  0747  00BE               	movwf	___ftadd@f2+1
  2209  0748  0142               	movlb	2	; select bank2
  2210  0749  082E               	movf	(main@tCprecise+2)^(0+256),w
  2211  074A  0140               	movlb	0	; select bank0
  2212  074B  00BF               	movwf	___ftadd@f2+2
  2213  074C  3182  22D6  3185   	fcall	___ftadd
  2214  074F  0140               	movlb	0	; select bank0
  2215  0750  083A               	movf	?___ftadd,w
  2216  0751  0142               	movlb	2	; select bank2
  2217  0752  00AC               	movwf	main@tCprecise^(0+256)
  2218  0753  0140               	movlb	0	; select bank0
  2219  0754  083B               	movf	?___ftadd+1,w
  2220  0755  0142               	movlb	2	; select bank2
  2221  0756  00AD               	movwf	(main@tCprecise+1)^(0+256)
  2222  0757  0140               	movlb	0	; select bank0
  2223  0758  083C               	movf	?___ftadd+2,w
  2224  0759  0142               	movlb	2	; select bank2
  2225  075A  00AE               	movwf	(main@tCprecise+2)^(0+256)
  2226  075B                     l165:	
  2227                           
  2228                           ;main.c: 148: }
  2229                           ;main.c: 149: temperatureCprecise=(binaryTemperatureC >> 4) + tCprecise;
  2230  075B  082C               	movf	main@tCprecise^(0+256),w
  2231  075C  0140               	movlb	0	; select bank0
  2232  075D  00BA               	movwf	___ftadd@f1
  2233  075E  0142               	movlb	2	; select bank2
  2234  075F  082D               	movf	(main@tCprecise+1)^(0+256),w
  2235  0760  0140               	movlb	0	; select bank0
  2236  0761  00BB               	movwf	___ftadd@f1+1
  2237  0762  0142               	movlb	2	; select bank2
  2238  0763  082E               	movf	(main@tCprecise+2)^(0+256),w
  2239  0764  0140               	movlb	0	; select bank0
  2240  0765  00BC               	movwf	___ftadd@f1+2
  2241  0766  0142               	movlb	2	; select bank2
  2242  0767  0E2F               	swapf	main@binaryTemperatureC^(0+256),w
  2243  0768  390F               	andlw	15
  2244  0769  00F8               	movwf	___lwtoft@c
  2245  076A  0E30               	swapf	(main@binaryTemperatureC+1)^(0+256),w
  2246  076B  39F0               	andlw	240
  2247  076C  04F8               	iorwf	___lwtoft@c,f
  2248  076D  0E30               	swapf	(main@binaryTemperatureC+1)^(0+256),w
  2249  076E  390F               	andlw	15
  2250  076F  00F9               	movwf	___lwtoft@c+1
  2251  0770  318F  273C  3185   	fcall	___lwtoft
  2252  0773  0878               	movf	?___lwtoft,w
  2253  0774  0140               	movlb	0	; select bank0
  2254  0775  00BD               	movwf	___ftadd@f2
  2255  0776  0879               	movf	?___lwtoft+1,w
  2256  0777  00BE               	movwf	___ftadd@f2+1
  2257  0778  087A               	movf	?___lwtoft+2,w
  2258  0779  00BF               	movwf	___ftadd@f2+2
  2259  077A  3182  22D6  3185   	fcall	___ftadd
  2260  077D  0140               	movlb	0	; select bank0
  2261  077E  083A               	movf	?___ftadd,w
  2262  077F  0142               	movlb	2	; select bank2
  2263  0780  00A2               	movwf	main@temperatureCprecise^(0+256)
  2264  0781  0140               	movlb	0	; select bank0
  2265  0782  083B               	movf	?___ftadd+1,w
  2266  0783  0142               	movlb	2	; select bank2
  2267  0784  00A3               	movwf	(main@temperatureCprecise+1)^(0+256)
  2268  0785  0140               	movlb	0	; select bank0
  2269  0786  083C               	movf	?___ftadd+2,w
  2270  0787  0142               	movlb	2	; select bank2
  2271  0788  00A4               	movwf	(main@temperatureCprecise+2)^(0+256)
  2272                           
  2273                           ;main.c: 150: temperatureFprecise = (temperatureCprecise* 9)/5 + 32;
  2274  0789  3000               	movlw	0
  2275  078A  0140               	movlb	0	; select bank0
  2276  078B  00BA               	movwf	___ftadd@f1
  2277  078C  3000               	movlw	0
  2278  078D  00BB               	movwf	___ftadd@f1+1
  2279  078E  3042               	movlw	66
  2280  078F  00BC               	movwf	___ftadd@f1+2
  2281  0790  3000               	movlw	0
  2282  0791  00AA               	movwf	___ftdiv@f2
  2283  0792  30A0               	movlw	160
  2284  0793  00AB               	movwf	___ftdiv@f2+1
  2285  0794  3040               	movlw	64
  2286  0795  00AC               	movwf	___ftdiv@f2+2
  2287  0796  3000               	movlw	0
  2288  0797  00F8               	movwf	___ftmul@f1
  2289  0798  3010               	movlw	16
  2290  0799  00F9               	movwf	___ftmul@f1+1
  2291  079A  3041               	movlw	65
  2292  079B  00FA               	movwf	___ftmul@f1+2
  2293  079C  0142               	movlb	2	; select bank2
  2294  079D  0822               	movf	main@temperatureCprecise^(0+256),w
  2295  079E  00FB               	movwf	___ftmul@f2
  2296  079F  0823               	movf	(main@temperatureCprecise+1)^(0+256),w
  2297  07A0  00FC               	movwf	___ftmul@f2+1
  2298  07A1  0824               	movf	(main@temperatureCprecise+2)^(0+256),w
  2299  07A2  00FD               	movwf	___ftmul@f2+2
  2300  07A3  3182  2223  3185   	fcall	___ftmul
  2301  07A6  0878               	movf	?___ftmul,w
  2302  07A7  0140               	movlb	0	; select bank0
  2303  07A8  00AD               	movwf	___ftdiv@f1
  2304  07A9  0879               	movf	?___ftmul+1,w
  2305  07AA  00AE               	movwf	___ftdiv@f1+1
  2306  07AB  087A               	movf	?___ftmul+2,w
  2307  07AC  00AF               	movwf	___ftdiv@f1+2
  2308  07AD  3181  217A  3185   	fcall	___ftdiv
  2309  07B0  0140               	movlb	0	; select bank0
  2310  07B1  082A               	movf	?___ftdiv,w
  2311  07B2  00BD               	movwf	___ftadd@f2
  2312  07B3  082B               	movf	?___ftdiv+1,w
  2313  07B4  00BE               	movwf	___ftadd@f2+1
  2314  07B5  082C               	movf	?___ftdiv+2,w
  2315  07B6  00BF               	movwf	___ftadd@f2+2
  2316  07B7  3182  22D6  3185   	fcall	___ftadd
  2317  07BA  0140               	movlb	0	; select bank0
  2318  07BB  083A               	movf	?___ftadd,w
  2319  07BC  00EB               	movwf	main@temperatureFprecise
  2320  07BD  083B               	movf	?___ftadd+1,w
  2321  07BE  00EC               	movwf	main@temperatureFprecise+1
  2322  07BF  083C               	movf	?___ftadd+2,w
  2323  07C0  00ED               	movwf	main@temperatureFprecise+2
  2324                           
  2325                           ;main.c: 152: for(a=0;a<16;a++)
  2326  07C1  0142               	movlb	2	; select bank2
  2327  07C2  01A7               	clrf	main@a^(0+256)
  2328  07C3  01A8               	clrf	(main@a+1)^(0+256)
  2329  07C4  0828               	movf	(main@a+1)^(0+256),w
  2330  07C5  3A80               	xorlw	128
  2331  07C6  0140               	movlb	0	; select bank0
  2332  07C7  00C7               	movwf	??_main
  2333  07C8  3080               	movlw	128
  2334  07C9  0247               	subwf	??_main,w
  2335  07CA  1D03               	skipz
  2336  07CB  2FCF               	goto	u2295
  2337  07CC  3010               	movlw	16
  2338  07CD  0142               	movlb	2	; select bank2
  2339  07CE  0227               	subwf	main@a^(0+256),w
  2340  07CF                     u2295:	
  2341  07CF  1803               	btfsc	3,0
  2342  07D0  2FEF               	goto	l2005
  2343  07D1                     l1997:	
  2344                           
  2345                           ;main.c: 153: {
  2346                           ;main.c: 155: _delay((unsigned long)((20000)*(32000000/4000000.0)));
  2347  07D1  30D0               	movlw	208
  2348  07D2  0140               	movlb	0	; select bank0
  2349  07D3  00C7               	movwf	??_main
  2350  07D4  30C9               	movlw	201
  2351  07D5                     u2337:	
  2352  07D5  0B89               	decfsz	9,f
  2353  07D6  2FD5               	goto	u2337
  2354  07D7  0BC7               	decfsz	??_main,f
  2355  07D8  2FD5               	goto	u2337
  2356  07D9  3200               	nop2
  2357                           
  2358                           ;main.c: 156: Lcd_Shift_Left();
  2359  07DA  318E  26FA  3185   	fcall	_Lcd_Shift_Left
  2360  07DD  3001               	movlw	1
  2361  07DE  0142               	movlb	2	; select bank2
  2362  07DF  07A7               	addwf	main@a^(0+256),f
  2363  07E0  3000               	movlw	0
  2364  07E1  3DA8               	addwfc	(main@a+1)^(0+256),f
  2365  07E2  0828               	movf	(main@a+1)^(0+256),w
  2366  07E3  3A80               	xorlw	128
  2367  07E4  0140               	movlb	0	; select bank0
  2368  07E5  00C7               	movwf	??_main
  2369  07E6  3080               	movlw	128
  2370  07E7  0247               	subwf	??_main,w
  2371  07E8  1D03               	skipz
  2372  07E9  2FED               	goto	u2305
  2373  07EA  3010               	movlw	16
  2374  07EB  0142               	movlb	2	; select bank2
  2375  07EC  0227               	subwf	main@a^(0+256),w
  2376  07ED                     u2305:	
  2377  07ED  1C03               	skipc
  2378  07EE  2FD1               	goto	l1997
  2379  07EF                     l2005:	
  2380                           
  2381                           ;main.c: 157: }
  2382                           ;main.c: 158: _delay((unsigned long)((5000)*(32000000/4000.0)));
  2383  07EF  30CB               	movlw	203
  2384  07F0  0140               	movlb	0	; select bank0
  2385  07F1  00C8               	movwf	??_main+1
  2386  07F2  30EC               	movlw	236
  2387  07F3  00C7               	movwf	??_main
  2388  07F4  3084               	movlw	132
  2389  07F5                     u2347:	
  2390  07F5  0B89               	decfsz	9,f
  2391  07F6  2FF5               	goto	u2347
  2392  07F7  0BC7               	decfsz	??_main,f
  2393  07F8  2FF5               	goto	u2347
  2394  07F9  0BC8               	decfsz	??_main+1,f
  2395  07FA  2FF5               	goto	u2347
  2396  07FB  0000               	nop
  2397  07FC  2D8A               	goto	l1899
  2398  07FD                     __end_of_main:	
  2399                           
  2400                           	psect	text1
  2401  03CC                     __ptext1:	
  2402 ;; *************** function _sprintf *****************
  2403 ;; Defined at:
  2404 ;;		line 492 in file "/Applications/microchip/xc8/v1.42/sources/common/doprnt.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;  sp              1    wreg     PTR unsigned char 
  2407 ;;		 -> main@buffer(20), main@deviceSerialNum(64), 
  2408 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  2409 ;;		 -> STR_3(3), STR_1(33), 
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;  sp              1   28[BANK0 ] PTR unsigned char 
  2412 ;;		 -> main@buffer(20), main@deviceSerialNum(64), 
  2413 ;;  idx             1   18[BANK0 ] unsigned char 
  2414 ;;  tmpval          4    0        struct .
  2415 ;;  width           2   29[BANK0 ] int 
  2416 ;;  len             2   26[BANK0 ] unsigned int 
  2417 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  2418 ;;		 -> STR_5(7), main@deviceSerialNum(64), 
  2419 ;;  val             2   20[BANK0 ] unsigned int 
  2420 ;;  c               1   31[BANK0 ] char 
  2421 ;;  ap              1   23[BANK0 ] PTR void [1]
  2422 ;;		 -> ?_sprintf(2), 
  2423 ;;  prec            1   22[BANK0 ] char 
  2424 ;;  flag            1   19[BANK0 ] unsigned char 
  2425 ;; Return value:  Size  Location     Type
  2426 ;;                  2    0[BANK0 ] int 
  2427 ;; Registers used:
  2428 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2429 ;; Tracked objects:
  2430 ;;		On entry : 0/0
  2431 ;;		On exit  : 0/0
  2432 ;;		Unchanged: 0/0
  2433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2434 ;;      Params:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2435 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2436 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2437 ;;      Totals:         4      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2438 ;;Total ram usage:       36 bytes
  2439 ;; Hardware stack levels used:    1
  2440 ;; Hardware stack levels required when called:    1
  2441 ;; This function calls:
  2442 ;;		___lwdiv
  2443 ;;		___wmul
  2444 ;;		_isdigit
  2445 ;; This function is called by:
  2446 ;;		_main
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           
  2451                           ;psect for function _sprintf
  2452  03CC                     _sprintf:	
  2453                           
  2454                           ;incstack = 0
  2455                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2456                           ;sprintf@sp stored from wreg
  2457  03CC  0140               	movlb	0	; select bank0
  2458  03CD  00BC               	movwf	sprintf@sp
  2459                           
  2460                           ;doprnt.c: 494: va_list ap;
  2461                           ;doprnt.c: 499: signed char c;
  2462                           ;doprnt.c: 501: int width;
  2463                           ;doprnt.c: 506: signed char prec;
  2464                           ;doprnt.c: 508: unsigned char flag;
  2465                           ;doprnt.c: 523: union {
  2466                           ;doprnt.c: 524: unsigned long vd;
  2467                           ;doprnt.c: 525: double integ;
  2468                           ;doprnt.c: 526: } tmpval;
  2469                           ;doprnt.c: 528: unsigned int val;
  2470                           ;doprnt.c: 529: unsigned len;
  2471                           ;doprnt.c: 530: const char * cp;
  2472                           ;doprnt.c: 533: *ap = __va_start();
  2473  03CE  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2474  03CF  00F8               	movwf	??_sprintf
  2475  03D0  0878               	movf	??_sprintf,w
  2476  03D1  00B7               	movwf	sprintf@ap
  2477  03D2                     l1723:	
  2478                           ;doprnt.c: 536: while(c = *f++) {
  2479                           
  2480  03D2  0821               	movf	sprintf@f+1,w
  2481  03D3  00F9               	movwf	??_sprintf+1
  2482  03D4  0820               	movf	sprintf@f,w
  2483  03D5  00F8               	movwf	??_sprintf
  2484  03D6  0AA0               	incf	sprintf@f,f
  2485  03D7  1903               	skipnz
  2486  03D8  0AA1               	incf	sprintf@f+1,f
  2487  03D9  0878               	movf	??_sprintf,w
  2488  03DA  0084               	movwf	4
  2489  03DB  0879               	movf	??_sprintf+1,w
  2490  03DC  0085               	movwf	5
  2491  03DD  0800               	movf	0,w	;code access
  2492  03DE  00FA               	movwf	??_sprintf+2
  2493  03DF  087A               	movf	??_sprintf+2,w
  2494  03E0  00BF               	movwf	sprintf@c
  2495  03E1  083F               	movf	sprintf@c,w
  2496  03E2  1903               	btfsc	3,2
  2497  03E3  2D7E               	goto	l1725
  2498                           
  2499                           ;doprnt.c: 538: if(c != '%')
  2500  03E4  3025               	movlw	37
  2501  03E5  063F               	xorwf	sprintf@c,w
  2502  03E6  1903               	btfsc	3,2
  2503  03E7  2BF4               	goto	l1613
  2504                           
  2505                           ;doprnt.c: 540: {
  2506                           ;doprnt.c: 541: ((*sp++ = (c)));
  2507  03E8  083F               	movf	sprintf@c,w
  2508  03E9  00F8               	movwf	??_sprintf
  2509  03EA  083C               	movf	sprintf@sp,w
  2510  03EB  0086               	movwf	6
  2511  03EC  0187               	clrf	7
  2512  03ED  0878               	movf	??_sprintf,w
  2513  03EE  0081               	movwf	1
  2514  03EF  3001               	movlw	1
  2515  03F0  00F8               	movwf	??_sprintf
  2516  03F1  0878               	movf	??_sprintf,w
  2517  03F2  07BC               	addwf	sprintf@sp,f
  2518                           
  2519                           ;doprnt.c: 542: continue;
  2520  03F3  2BD2               	goto	l1723
  2521  03F4                     l1613:	
  2522                           
  2523                           ;doprnt.c: 543: }
  2524                           ;doprnt.c: 546: width = 0;
  2525  03F4  01BD               	clrf	sprintf@width
  2526  03F5  01BE               	clrf	sprintf@width+1
  2527                           
  2528                           ;doprnt.c: 548: flag = 0;
  2529  03F6  01B3               	clrf	sprintf@flag
  2530                           
  2531                           ;doprnt.c: 551: switch(*f) {
  2532                           
  2533                           ;doprnt.c: 550: for(;;) {
  2534  03F7  2BFD               	goto	l1619
  2535  03F8                     l186:	
  2536                           ;doprnt.c: 579: case '0':
  2537                           
  2538                           
  2539                           ;doprnt.c: 580: flag |= 0x04;
  2540  03F8  1533               	bsf	sprintf@flag,2
  2541                           
  2542                           ;doprnt.c: 581: f++;
  2543  03F9  3001               	movlw	1
  2544  03FA  07A0               	addwf	sprintf@f,f
  2545  03FB  3000               	movlw	0
  2546  03FC  3DA1               	addwfc	sprintf@f+1,f
  2547  03FD                     l1619:	
  2548                           ;doprnt.c: 584: }
  2549                           
  2550                           ;doprnt.c: 582: continue;
  2551                           
  2552  03FD  0820               	movf	sprintf@f,w
  2553  03FE  0084               	movwf	4
  2554  03FF  0821               	movf	sprintf@f+1,w
  2555  0400  0085               	movwf	5
  2556  0401  0800               	movf	0,w	;code access
  2557                           
  2558                           ; Switch size 1, requested type "space"
  2559                           ; Number of cases is 1, Range of values is 48 to 48
  2560                           ; switch strategies available:
  2561                           ; Name         Instructions Cycles
  2562                           ; simple_byte            4     3 (average)
  2563                           ; direct_byte           11     9 (fixed)
  2564                           ; jumptable            263     9 (fixed)
  2565                           ;	Chosen strategy is simple_byte
  2566  0402  3A30               	xorlw	48	; case 48
  2567  0403  1903               	skipnz
  2568  0404  2BF8               	goto	l186
  2569  0405  2C06               	goto	l1621
  2570  0406                     l1621:	
  2571                           ;doprnt.c: 586: }
  2572                           
  2573                           ;doprnt.c: 585: break;
  2574                           
  2575                           
  2576                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2577  0406  0820               	movf	sprintf@f,w
  2578  0407  0084               	movwf	4
  2579  0408  0821               	movf	sprintf@f+1,w
  2580  0409  0085               	movwf	5
  2581  040A  0800               	movf	0,w	;code access
  2582  040B  318F  270C  3183   	fcall	_isdigit
  2583  040E  1C03               	btfss	3,0
  2584  040F  2CA8               	goto	l1669
  2585                           
  2586                           ;doprnt.c: 598: width = 0;
  2587  0410  0140               	movlb	0	; select bank0
  2588  0411  01BD               	clrf	sprintf@width
  2589  0412  01BE               	clrf	sprintf@width+1
  2590  0413                     l1625:	
  2591                           ;doprnt.c: 599: do {
  2592                           
  2593                           
  2594                           ;doprnt.c: 600: width *= 10;
  2595  0413  300A               	movlw	10
  2596  0414  00F0               	movwf	___wmul@multiplier
  2597  0415  3000               	movlw	0
  2598  0416  00F1               	movwf	___wmul@multiplier+1
  2599  0417  0140               	movlb	0	; select bank0
  2600  0418  083E               	movf	sprintf@width+1,w
  2601  0419  00F3               	movwf	___wmul@multiplicand+1
  2602  041A  083D               	movf	sprintf@width,w
  2603  041B  00F2               	movwf	___wmul@multiplicand
  2604  041C  318F  27C5  3183   	fcall	___wmul
  2605  041F  0871               	movf	?___wmul+1,w
  2606  0420  0140               	movlb	0	; select bank0
  2607  0421  00BE               	movwf	sprintf@width+1
  2608  0422  0870               	movf	?___wmul,w
  2609  0423  00BD               	movwf	sprintf@width
  2610                           
  2611                           ;doprnt.c: 601: width += *f++ - '0';
  2612  0424  0820               	movf	sprintf@f,w
  2613  0425  0084               	movwf	4
  2614  0426  0821               	movf	sprintf@f+1,w
  2615  0427  0085               	movwf	5
  2616  0428  0800               	movf	0,w	;code access
  2617  0429  3ED0               	addlw	208
  2618  042A  00F8               	movwf	??_sprintf
  2619  042B  30FF               	movlw	255
  2620  042C  1803               	skipnc
  2621  042D  3000               	movlw	0
  2622  042E  00F9               	movwf	??_sprintf+1
  2623  042F  0878               	movf	??_sprintf,w
  2624  0430  07BD               	addwf	sprintf@width,f
  2625  0431  0879               	movf	??_sprintf+1,w
  2626  0432  3DBE               	addwfc	sprintf@width+1,f
  2627  0433  3001               	movlw	1
  2628  0434  07A0               	addwf	sprintf@f,f
  2629  0435  3000               	movlw	0
  2630  0436  3DA1               	addwfc	sprintf@f+1,f
  2631                           
  2632                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2633  0437  0820               	movf	sprintf@f,w
  2634  0438  0084               	movwf	4
  2635  0439  0821               	movf	sprintf@f+1,w
  2636  043A  0085               	movwf	5
  2637  043B  0800               	movf	0,w	;code access
  2638  043C  318F  270C  3183   	fcall	_isdigit
  2639  043F  1C03               	btfss	3,0
  2640  0440  2CA8               	goto	l1669
  2641  0441  2C13               	goto	l1625
  2642  0442                     l1633:	
  2643                           ;doprnt.c: 728: case 's':
  2644                           
  2645                           ;doprnt.c: 718: case 'x':
  2646                           ;doprnt.c: 723: break;
  2647                           
  2648                           ;doprnt.c: 712: case 'X':
  2649                           
  2650                           ;doprnt.c: 638: goto alldone;
  2651                           
  2652                           ;doprnt.c: 637: case 0:
  2653                           
  2654                           ;doprnt.c: 608: }
  2655                           ;doprnt.c: 635: switch(c = *f++) {
  2656                           
  2657                           
  2658                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2659  0442  0140               	movlb	0	; select bank0
  2660  0443  0837               	movf	sprintf@ap,w
  2661  0444  0086               	movwf	6
  2662  0445  0187               	clrf	7
  2663  0446  0801               	movf	1,w
  2664  0447  00B8               	movwf	sprintf@cp
  2665  0448  3000               	movlw	0
  2666  0449  00B9               	movwf	sprintf@cp+1
  2667  044A  3001               	movlw	1
  2668  044B  00F8               	movwf	??_sprintf
  2669  044C  0878               	movf	??_sprintf,w
  2670  044D  07B7               	addwf	sprintf@ap,f
  2671                           
  2672                           ;doprnt.c: 740: if(!cp)
  2673  044E  0838               	movf	sprintf@cp,w
  2674  044F  0439               	iorwf	sprintf@cp+1,w
  2675  0450  1D03               	btfss	3,2
  2676  0451  2C56               	goto	l1641
  2677                           
  2678                           ;doprnt.c: 741: cp = "(null)";
  2679  0452  3031               	movlw	low (STR_5| (0+32768))
  2680  0453  00B8               	movwf	sprintf@cp
  2681  0454  3090               	movlw	high (STR_5| (0+32768))
  2682  0455  00B9               	movwf	sprintf@cp+1
  2683  0456                     l1641:	
  2684                           
  2685                           ;doprnt.c: 745: len = 0;
  2686  0456  01BA               	clrf	sprintf@len
  2687  0457  01BB               	clrf	sprintf@len+1
  2688  0458                     l1645:	
  2689                           ;doprnt.c: 746: while(cp[len])
  2690                           
  2691  0458  0838               	movf	sprintf@cp,w
  2692  0459  073A               	addwf	sprintf@len,w
  2693  045A  0084               	movwf	4
  2694  045B  0839               	movf	sprintf@cp+1,w
  2695  045C  3D3B               	addwfc	sprintf@len+1,w
  2696  045D  0085               	movwf	5
  2697  045E  0012               	moviw fsr0++
  2698  045F  1903               	btfsc	3,2
  2699  0460  2C66               	goto	l1647
  2700                           
  2701                           ;doprnt.c: 747: len++;
  2702  0461  3001               	movlw	1
  2703  0462  07BA               	addwf	sprintf@len,f
  2704  0463  3000               	movlw	0
  2705  0464  3DBB               	addwfc	sprintf@len+1,f
  2706  0465  2C58               	goto	l1645
  2707  0466                     l1647:	
  2708                           
  2709                           ;doprnt.c: 757: if(width > len)
  2710  0466  083E               	movf	sprintf@width+1,w
  2711  0467  023B               	subwf	sprintf@len+1,w
  2712  0468  1D03               	skipz
  2713  0469  2C6C               	goto	u1635
  2714  046A  083D               	movf	sprintf@width,w
  2715  046B  023A               	subwf	sprintf@len,w
  2716  046C                     u1635:	
  2717  046C  1803               	skipnc
  2718  046D  2C73               	goto	l1651
  2719                           
  2720                           ;doprnt.c: 758: width -= len;
  2721  046E  083A               	movf	sprintf@len,w
  2722  046F  02BD               	subwf	sprintf@width,f
  2723  0470  083B               	movf	sprintf@len+1,w
  2724  0471  3BBE               	subwfb	sprintf@width+1,f
  2725  0472  2C75               	goto	l1657
  2726  0473                     l1651:	
  2727                           
  2728                           ;doprnt.c: 759: else
  2729                           ;doprnt.c: 760: width = 0;
  2730  0473  01BD               	clrf	sprintf@width
  2731  0474  01BE               	clrf	sprintf@width+1
  2732  0475                     l1657:	
  2733                           ;doprnt.c: 764: while(width--)
  2734                           
  2735  0475  30FF               	movlw	255
  2736  0476  07BD               	addwf	sprintf@width,f
  2737  0477  30FF               	movlw	255
  2738  0478  3DBE               	addwfc	sprintf@width+1,f
  2739  0479  0A3D               	incf	sprintf@width,w
  2740  047A  1903               	btfsc	3,2
  2741  047B  0A3E               	incf	sprintf@width+1,w
  2742  047C  1903               	btfsc	3,2
  2743  047D  2C9D               	goto	l1665
  2744                           
  2745                           ;doprnt.c: 765: ((*sp++ = (' ')));
  2746  047E  3020               	movlw	32
  2747  047F  00F8               	movwf	??_sprintf
  2748  0480  083C               	movf	sprintf@sp,w
  2749  0481  0086               	movwf	6
  2750  0482  0187               	clrf	7
  2751  0483  0878               	movf	??_sprintf,w
  2752  0484  0081               	movwf	1
  2753  0485  3001               	movlw	1
  2754  0486  00F8               	movwf	??_sprintf
  2755  0487  0878               	movf	??_sprintf,w
  2756  0488  07BC               	addwf	sprintf@sp,f
  2757  0489  2C75               	goto	l1657
  2758  048A                     l1659:	
  2759                           ;doprnt.c: 767: while(len--)
  2760                           
  2761                           
  2762                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  2763  048A  0838               	movf	sprintf@cp,w
  2764  048B  0084               	movwf	4
  2765  048C  0839               	movf	sprintf@cp+1,w
  2766  048D  0085               	movwf	5
  2767  048E  0800               	movf	0,w	;code access
  2768  048F  00F8               	movwf	??_sprintf
  2769  0490  083C               	movf	sprintf@sp,w
  2770  0491  0086               	movwf	6
  2771  0492  0187               	clrf	7
  2772  0493  0878               	movf	??_sprintf,w
  2773  0494  0081               	movwf	1
  2774  0495  3001               	movlw	1
  2775  0496  07B8               	addwf	sprintf@cp,f
  2776  0497  3000               	movlw	0
  2777  0498  3DB9               	addwfc	sprintf@cp+1,f
  2778  0499  3001               	movlw	1
  2779  049A  00F8               	movwf	??_sprintf
  2780  049B  0878               	movf	??_sprintf,w
  2781  049C  07BC               	addwf	sprintf@sp,f
  2782  049D                     l1665:	
  2783  049D  3001               	movlw	1
  2784  049E  02BA               	subwf	sprintf@len,f
  2785  049F  3000               	movlw	0
  2786  04A0  3BBB               	subwfb	sprintf@len+1,f
  2787  04A1  0A3A               	incf	sprintf@len,w
  2788  04A2  1D03               	skipz
  2789  04A3  2C8A               	goto	l1659
  2790  04A4  0A3B               	incf	sprintf@len+1,w
  2791  04A5  1903               	btfsc	3,2
  2792  04A6  2BD2               	goto	l1723
  2793  04A7  2C8A               	goto	l1659
  2794  04A8                     l1669:	
  2795                           ;doprnt.c: 822: }
  2796                           
  2797                           ;doprnt.c: 813: continue;
  2798                           
  2799                           ;doprnt.c: 802: default:
  2800                           
  2801                           ;doprnt.c: 774: continue;
  2802                           
  2803  04A8  0140               	movlb	0	; select bank0
  2804  04A9  0821               	movf	sprintf@f+1,w
  2805  04AA  00F9               	movwf	??_sprintf+1
  2806  04AB  0820               	movf	sprintf@f,w
  2807  04AC  00F8               	movwf	??_sprintf
  2808  04AD  0AA0               	incf	sprintf@f,f
  2809  04AE  1903               	skipnz
  2810  04AF  0AA1               	incf	sprintf@f+1,f
  2811  04B0  0878               	movf	??_sprintf,w
  2812  04B1  0084               	movwf	4
  2813  04B2  0879               	movf	??_sprintf+1,w
  2814  04B3  0085               	movwf	5
  2815  04B4  0800               	movf	0,w	;code access
  2816  04B5  00BF               	movwf	sprintf@c
  2817                           
  2818                           ; Switch size 1, requested type "space"
  2819                           ; Number of cases is 4, Range of values is 0 to 120
  2820                           ; switch strategies available:
  2821                           ; Name         Instructions Cycles
  2822                           ; simple_byte           13     7 (average)
  2823                           ; direct_byte          248     6 (fixed)
  2824                           ; jumptable            260     6 (fixed)
  2825                           ;	Chosen strategy is simple_byte
  2826  04B6  3A00               	xorlw	0	; case 0
  2827  04B7  1903               	skipnz
  2828  04B8  2D7E               	goto	l1725
  2829  04B9  3A58               	xorlw	88	; case 88
  2830  04BA  1903               	skipnz
  2831  04BB  2CC3               	goto	l1671
  2832  04BC  3A2B               	xorlw	43	; case 115
  2833  04BD  1903               	skipnz
  2834  04BE  2C42               	goto	l1633
  2835  04BF  3A0B               	xorlw	11	; case 120
  2836  04C0  1903               	skipnz
  2837  04C1  2CC3               	goto	l1671
  2838  04C2  2BD2               	goto	l1723
  2839  04C3                     l1671:	
  2840                           
  2841                           ;doprnt.c: 1273: {
  2842                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2843  04C3  0140               	movlb	0	; select bank0
  2844  04C4  0837               	movf	sprintf@ap,w
  2845  04C5  0086               	movwf	6
  2846  04C6  0187               	clrf	7
  2847  04C7  3F40               	moviw [0]fsr1
  2848  04C8  00B4               	movwf	sprintf@val
  2849  04C9  3F41               	moviw [1]fsr1
  2850  04CA  00B5               	movwf	sprintf@val+1
  2851  04CB  3002               	movlw	2
  2852  04CC  00F8               	movwf	??_sprintf
  2853  04CD  0878               	movf	??_sprintf,w
  2854  04CE  07B7               	addwf	sprintf@ap,f
  2855                           
  2856                           ;doprnt.c: 1287: }
  2857                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2858  04CF  01BF               	clrf	sprintf@c
  2859  04D0  0ABF               	incf	sprintf@c,f
  2860  04D1  3004               	movlw	4
  2861  04D2  063F               	xorwf	sprintf@c,w
  2862  04D3  1903               	btfsc	3,2
  2863  04D4  2CF4               	goto	l1687
  2864  04D5                     l1681:	
  2865                           
  2866                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2867  04D5  083F               	movf	sprintf@c,w
  2868  04D6  00F8               	movwf	??_sprintf
  2869  04D7  01F9               	clrf	??_sprintf+1
  2870  04D8  35F8               	lslf	??_sprintf,f
  2871  04D9  0DF9               	rlf	??_sprintf+1,f
  2872  04DA  3000               	movlw	low (_hexpowers| (0+32768))
  2873  04DB  0778               	addwf	??_sprintf,w
  2874  04DC  0084               	movwf	4
  2875  04DD  3088               	movlw	high (_hexpowers| (0+32768))
  2876  04DE  3D79               	addwfc	??_sprintf+1,w
  2877  04DF  0085               	movwf	5
  2878  04E0  3F00               	moviw [0]fsr0
  2879  04E1  00FA               	movwf	??_sprintf+2
  2880  04E2  3F01               	moviw [1]fsr0
  2881  04E3  00FB               	movwf	??_sprintf+3
  2882  04E4  087B               	movf	??_sprintf+3,w
  2883  04E5  0235               	subwf	sprintf@val+1,w
  2884  04E6  1D03               	skipz
  2885  04E7  2CEA               	goto	u1675
  2886  04E8  087A               	movf	??_sprintf+2,w
  2887  04E9  0234               	subwf	sprintf@val,w
  2888  04EA                     u1675:	
  2889  04EA  1C03               	btfss	3,0
  2890  04EB  2CF4               	goto	l1687
  2891                           
  2892                           ;doprnt.c: 1318: break;
  2893  04EC  3001               	movlw	1
  2894  04ED  00F8               	movwf	??_sprintf
  2895  04EE  0878               	movf	??_sprintf,w
  2896  04EF  07BF               	addwf	sprintf@c,f
  2897  04F0  3004               	movlw	4
  2898  04F1  063F               	xorwf	sprintf@c,w
  2899  04F2  1D03               	btfss	3,2
  2900  04F3  2CD5               	goto	l1681
  2901  04F4                     l1687:	
  2902                           
  2903                           ;doprnt.c: 1381: if(width > c)
  2904  04F4  083F               	movf	sprintf@c,w
  2905  04F5  00F8               	movwf	??_sprintf
  2906  04F6  01F9               	clrf	??_sprintf+1
  2907  04F7  1BF8               	btfsc	??_sprintf,7
  2908  04F8  03F9               	decf	??_sprintf+1,f
  2909  04F9  0879               	movf	??_sprintf+1,w
  2910  04FA  3A80               	xorlw	128
  2911  04FB  00FA               	movwf	??_sprintf+2
  2912  04FC  083E               	movf	sprintf@width+1,w
  2913  04FD  3A80               	xorlw	128
  2914  04FE  027A               	subwf	??_sprintf+2,w
  2915  04FF  1D03               	skipz
  2916  0500  2D03               	goto	u1695
  2917  0501  083D               	movf	sprintf@width,w
  2918  0502  0278               	subwf	??_sprintf,w
  2919  0503                     u1695:	
  2920  0503  1803               	skipnc
  2921  0504  2D10               	goto	l1691
  2922                           
  2923                           ;doprnt.c: 1382: width -= c;
  2924  0505  0140               	movlb	0	; select bank0
  2925  0506  083F               	movf	sprintf@c,w
  2926  0507  00F8               	movwf	??_sprintf
  2927  0508  01F9               	clrf	??_sprintf+1
  2928  0509  1BF8               	btfsc	??_sprintf,7
  2929  050A  03F9               	decf	??_sprintf+1,f
  2930  050B  0878               	movf	??_sprintf,w
  2931  050C  02BD               	subwf	sprintf@width,f
  2932  050D  0879               	movf	??_sprintf+1,w
  2933  050E  3BBE               	subwfb	sprintf@width+1,f
  2934  050F  2D13               	goto	l1693
  2935  0510                     l1691:	
  2936                           
  2937                           ;doprnt.c: 1383: else
  2938                           ;doprnt.c: 1384: width = 0;
  2939  0510  0140               	movlb	0	; select bank0
  2940  0511  01BD               	clrf	sprintf@width
  2941  0512  01BE               	clrf	sprintf@width+1
  2942  0513                     l1693:	
  2943                           
  2944                           ;doprnt.c: 1387: if(flag & 0x04) {
  2945  0513  1D33               	btfss	sprintf@flag,2
  2946  0514  2D29               	goto	l1703
  2947  0515                     L3:	
  2948                           
  2949                           ;doprnt.c: 1415: if(width)
  2950  0515  083D               	movf	sprintf@width,w
  2951  0516  043E               	iorwf	sprintf@width+1,w
  2952  0517  1903               	btfsc	3,2
  2953  0518  2D40               	goto	l1711
  2954                           
  2955                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2956                           
  2957                           ;doprnt.c: 1416: do
  2958  0519  3030               	movlw	48
  2959  051A  00F8               	movwf	??_sprintf
  2960  051B  083C               	movf	sprintf@sp,w
  2961  051C  0086               	movwf	6
  2962  051D  0187               	clrf	7
  2963  051E  0878               	movf	??_sprintf,w
  2964  051F  0081               	movwf	1
  2965  0520  3001               	movlw	1
  2966  0521  00F8               	movwf	??_sprintf
  2967  0522  0878               	movf	??_sprintf,w
  2968  0523  07BC               	addwf	sprintf@sp,f
  2969                           
  2970                           ;doprnt.c: 1418: while(--width);
  2971  0524  30FF               	movlw	255
  2972  0525  07BD               	addwf	sprintf@width,f
  2973  0526  30FF               	movlw	255
  2974  0527  3DBE               	addwfc	sprintf@width+1,f
  2975  0528  2D15               	goto	L3
  2976  0529                     l1703:	
  2977                           ;doprnt.c: 1420: } else
  2978                           
  2979                           
  2980                           ;doprnt.c: 1422: {
  2981                           ;doprnt.c: 1424: if(width
  2982                           ;doprnt.c: 1428: )
  2983  0529  083D               	movf	sprintf@width,w
  2984  052A  043E               	iorwf	sprintf@width+1,w
  2985  052B  1903               	btfsc	3,2
  2986  052C  2D40               	goto	l1711
  2987  052D                     l1705:	
  2988                           ;doprnt.c: 1429: do
  2989                           
  2990                           
  2991                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2992  052D  3020               	movlw	32
  2993  052E  00F8               	movwf	??_sprintf
  2994  052F  083C               	movf	sprintf@sp,w
  2995  0530  0086               	movwf	6
  2996  0531  0187               	clrf	7
  2997  0532  0878               	movf	??_sprintf,w
  2998  0533  0081               	movwf	1
  2999  0534  3001               	movlw	1
  3000  0535  00F8               	movwf	??_sprintf
  3001  0536  0878               	movf	??_sprintf,w
  3002  0537  07BC               	addwf	sprintf@sp,f
  3003                           
  3004                           ;doprnt.c: 1431: while(--width);
  3005  0538  30FF               	movlw	255
  3006  0539  07BD               	addwf	sprintf@width,f
  3007  053A  30FF               	movlw	255
  3008  053B  3DBE               	addwfc	sprintf@width+1,f
  3009  053C  083D               	movf	sprintf@width,w
  3010  053D  043E               	iorwf	sprintf@width+1,w
  3011  053E  1D03               	btfss	3,2
  3012  053F  2D2D               	goto	l1705
  3013  0540                     l1711:	
  3014                           
  3015                           ;doprnt.c: 1469: }
  3016                           ;doprnt.c: 1472: prec = c;
  3017  0540  083F               	movf	sprintf@c,w
  3018  0541  00F8               	movwf	??_sprintf
  3019  0542  0878               	movf	??_sprintf,w
  3020  0543  00B6               	movwf	sprintf@prec
  3021  0544                     l1721:	
  3022                           ;doprnt.c: 1474: while(prec--) {
  3023                           
  3024  0544  30FF               	movlw	255
  3025  0545  00F8               	movwf	??_sprintf
  3026  0546  0878               	movf	??_sprintf,w
  3027  0547  07B6               	addwf	sprintf@prec,f
  3028  0548  0A36               	incf	sprintf@prec,w
  3029  0549  1903               	btfsc	3,2
  3030  054A  2BD2               	goto	l1723
  3031                           
  3032                           ;doprnt.c: 1478: {
  3033                           ;doprnt.c: 1499: {
  3034                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3035  054B  0836               	movf	sprintf@prec,w
  3036  054C  00F8               	movwf	??_sprintf
  3037  054D  01F9               	clrf	??_sprintf+1
  3038  054E  35F8               	lslf	??_sprintf,f
  3039  054F  0DF9               	rlf	??_sprintf+1,f
  3040  0550  3000               	movlw	low (_hexpowers| (0+32768))
  3041  0551  0778               	addwf	??_sprintf,w
  3042  0552  0084               	movwf	4
  3043  0553  3088               	movlw	high (_hexpowers| (0+32768))
  3044  0554  3D79               	addwfc	??_sprintf+1,w
  3045  0555  0085               	movwf	5
  3046  0556  3F00               	moviw [0]fsr0
  3047  0557  00F0               	movwf	___lwdiv@divisor
  3048  0558  3F01               	moviw [1]fsr0
  3049  0559  00F1               	movwf	___lwdiv@divisor+1
  3050  055A  0835               	movf	sprintf@val+1,w
  3051  055B  00F3               	movwf	___lwdiv@dividend+1
  3052  055C  0834               	movf	sprintf@val,w
  3053  055D  00F2               	movwf	___lwdiv@dividend
  3054  055E  3180  2060  3183   	fcall	___lwdiv
  3055  0561  0870               	movf	?___lwdiv,w
  3056  0562  390F               	andlw	15
  3057  0563  00FA               	movwf	??_sprintf+2
  3058  0564  087A               	movf	??_sprintf+2,w
  3059  0565  0140               	movlb	0	; select bank0
  3060  0566  00B2               	movwf	sprintf@idx
  3061                           
  3062                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  3063  0567  0832               	movf	sprintf@idx,w
  3064  0568  3E00               	addlw	low (STR_6| (0+32768))
  3065  0569  0084               	movwf	4
  3066  056A  3090               	movlw	high (STR_6| (0+32768))
  3067  056B  1803               	skipnc
  3068  056C  3E01               	addlw	1
  3069  056D  0085               	movwf	5
  3070  056E  0800               	movf	0,w	;code access
  3071  056F  00F8               	movwf	??_sprintf
  3072  0570  0878               	movf	??_sprintf,w
  3073  0571  00BF               	movwf	sprintf@c
  3074                           
  3075                           ;doprnt.c: 1508: }
  3076                           ;doprnt.c: 1523: }
  3077                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3078  0572  083F               	movf	sprintf@c,w
  3079  0573  00F8               	movwf	??_sprintf
  3080  0574  083C               	movf	sprintf@sp,w
  3081  0575  0086               	movwf	6
  3082  0576  0187               	clrf	7
  3083  0577  0878               	movf	??_sprintf,w
  3084  0578  0081               	movwf	1
  3085  0579  3001               	movlw	1
  3086  057A  00F8               	movwf	??_sprintf
  3087  057B  0878               	movf	??_sprintf,w
  3088  057C  07BC               	addwf	sprintf@sp,f
  3089  057D  2D44               	goto	l1721
  3090  057E                     l1725:	
  3091                           ;doprnt.c: 1525: }
  3092                           ;doprnt.c: 1533: }
  3093                           ;doprnt.c: 1535: alldone:
  3094                           
  3095                           
  3096                           ;doprnt.c: 1538: *sp = 0;
  3097  057E  0140               	movlb	0	; select bank0
  3098  057F  083C               	movf	sprintf@sp,w
  3099  0580  0086               	movwf	6
  3100  0581  0187               	clrf	7
  3101  0582  0181               	clrf	1
  3102  0583  0008               	return
  3103  0584                     __end_of_sprintf:	
  3104                           ;doprnt.c: 1540: return 0;
  3105                           ;	Return value of _sprintf is never used
  3106                           
  3107                           
  3108                           	psect	text2
  3109  0F0C                     __ptext2:	
  3110 ;; *************** function _isdigit *****************
  3111 ;; Defined at:
  3112 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/isdigit.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;  c               1    wreg     unsigned char 
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  c               1    1[COMMON] unsigned char 
  3117 ;; Return value:  Size  Location     Type
  3118 ;;		None               void
  3119 ;; Registers used:
  3120 ;;		wreg, status,2, status,0
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3127 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3129 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3130 ;;Total ram usage:        2 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; This function calls:
  3133 ;;		Nothing
  3134 ;; This function is called by:
  3135 ;;		_sprintf
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           
  3140                           ;psect for function _isdigit
  3141  0F0C                     _isdigit:	
  3142                           
  3143                           ;incstack = 0
  3144                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3145                           ;isdigit@c stored from wreg
  3146  0F0C  00F1               	movwf	isdigit@c
  3147  0F0D  01F0               	clrf	_isdigit$378
  3148  0F0E  303A               	movlw	58
  3149  0F0F  0271               	subwf	isdigit@c,w
  3150  0F10  1803               	skipnc
  3151  0F11  2F18               	goto	l1435
  3152  0F12  3030               	movlw	48
  3153  0F13  0271               	subwf	isdigit@c,w
  3154  0F14  1C03               	skipc
  3155  0F15  2F18               	goto	l1435
  3156  0F16  01F0               	clrf	_isdigit$378
  3157  0F17  0AF0               	incf	_isdigit$378,f
  3158  0F18                     l1435:	
  3159  0F18  0C70               	rrf	_isdigit$378,w
  3160  0F19  0008               	return
  3161  0F1A                     __end_of_isdigit:	
  3162                           
  3163                           	psect	text3
  3164  0FC5                     __ptext3:	
  3165 ;; *************** function ___wmul *****************
  3166 ;; Defined at:
  3167 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul16.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;  multiplier      2    0[COMMON] unsigned int 
  3170 ;;  multiplicand    2    2[COMMON] unsigned int 
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;  product         2    4[COMMON] unsigned int 
  3173 ;; Return value:  Size  Location     Type
  3174 ;;                  2    0[COMMON] unsigned int 
  3175 ;; Registers used:
  3176 ;;		wreg, status,2, status,0
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3182 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3183 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3185 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3186 ;;Total ram usage:        6 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; This function calls:
  3189 ;;		Nothing
  3190 ;; This function is called by:
  3191 ;;		_sprintf
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           
  3196                           ;psect for function ___wmul
  3197  0FC5                     ___wmul:	
  3198                           
  3199                           ;incstack = 0
  3200                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3201  0FC5  01F4               	clrf	___wmul@product
  3202  0FC6  01F5               	clrf	___wmul@product+1
  3203  0FC7                     l1441:	
  3204  0FC7  1C70               	btfss	___wmul@multiplier,0
  3205  0FC8  2FCD               	goto	l234
  3206  0FC9  0872               	movf	___wmul@multiplicand,w
  3207  0FCA  07F4               	addwf	___wmul@product,f
  3208  0FCB  0873               	movf	___wmul@multiplicand+1,w
  3209  0FCC  3DF5               	addwfc	___wmul@product+1,f
  3210  0FCD                     l234:	
  3211  0FCD  3001               	movlw	1
  3212  0FCE                     u1265:	
  3213  0FCE  35F2               	lslf	___wmul@multiplicand,f
  3214  0FCF  0DF3               	rlf	___wmul@multiplicand+1,f
  3215  0FD0  0B89               	decfsz	9,f
  3216  0FD1  2FCE               	goto	u1265
  3217  0FD2  3001               	movlw	1
  3218  0FD3                     u1275:	
  3219  0FD3  36F1               	lsrf	___wmul@multiplier+1,f
  3220  0FD4  0CF0               	rrf	___wmul@multiplier,f
  3221  0FD5  0B89               	decfsz	9,f
  3222  0FD6  2FD3               	goto	u1275
  3223  0FD7  0870               	movf	___wmul@multiplier,w
  3224  0FD8  0471               	iorwf	___wmul@multiplier+1,w
  3225  0FD9  1D03               	btfss	3,2
  3226  0FDA  2FC7               	goto	l1441
  3227  0FDB  0875               	movf	___wmul@product+1,w
  3228  0FDC  00F1               	movwf	?___wmul+1
  3229  0FDD  0874               	movf	___wmul@product,w
  3230  0FDE  00F0               	movwf	?___wmul
  3231  0FDF  0008               	return
  3232  0FE0                     __end_of___wmul:	
  3233                           
  3234                           	psect	text4
  3235  0060                     __ptext4:	
  3236 ;; *************** function ___lwdiv *****************
  3237 ;; Defined at:
  3238 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lwdiv.c"
  3239 ;; Parameters:    Size  Location     Type
  3240 ;;  divisor         2    0[COMMON] unsigned int 
  3241 ;;  dividend        2    2[COMMON] unsigned int 
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;  quotient        2    5[COMMON] unsigned int 
  3244 ;;  counter         1    7[COMMON] unsigned char 
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  2    0[COMMON] unsigned int 
  3247 ;; Registers used:
  3248 ;;		wreg, status,2, status,0
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3254 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3255 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3256 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3257 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3258 ;;Total ram usage:        8 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; This function calls:
  3261 ;;		Nothing
  3262 ;; This function is called by:
  3263 ;;		_sprintf
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           
  3268                           ;psect for function ___lwdiv
  3269  0060                     ___lwdiv:	
  3270                           
  3271                           ;incstack = 0
  3272                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3273  0060  01F5               	clrf	___lwdiv@quotient
  3274  0061  01F6               	clrf	___lwdiv@quotient+1
  3275  0062  0870               	movf	___lwdiv@divisor,w
  3276  0063  0471               	iorwf	___lwdiv@divisor+1,w
  3277  0064  1903               	btfsc	3,2
  3278  0065  288F               	goto	l1507
  3279  0066  01F7               	clrf	___lwdiv@counter
  3280  0067  0AF7               	incf	___lwdiv@counter,f
  3281  0068                     l1495:	
  3282  0068  1BF1               	btfsc	___lwdiv@divisor+1,7
  3283  0069  2874               	goto	l1497
  3284  006A  3001               	movlw	1
  3285  006B                     u1425:	
  3286  006B  35F0               	lslf	___lwdiv@divisor,f
  3287  006C  0DF1               	rlf	___lwdiv@divisor+1,f
  3288  006D  0B89               	decfsz	9,f
  3289  006E  286B               	goto	u1425
  3290  006F  3001               	movlw	1
  3291  0070  00F4               	movwf	??___lwdiv
  3292  0071  0874               	movf	??___lwdiv,w
  3293  0072  07F7               	addwf	___lwdiv@counter,f
  3294  0073  2868               	goto	l1495
  3295  0074                     l1497:	
  3296  0074  3001               	movlw	1
  3297  0075                     u1445:	
  3298  0075  35F5               	lslf	___lwdiv@quotient,f
  3299  0076  0DF6               	rlf	___lwdiv@quotient+1,f
  3300  0077  0B89               	decfsz	9,f
  3301  0078  2875               	goto	u1445
  3302  0079  0871               	movf	___lwdiv@divisor+1,w
  3303  007A  0273               	subwf	___lwdiv@dividend+1,w
  3304  007B  1D03               	skipz
  3305  007C  287F               	goto	u1455
  3306  007D  0870               	movf	___lwdiv@divisor,w
  3307  007E  0272               	subwf	___lwdiv@dividend,w
  3308  007F                     u1455:	
  3309  007F  1C03               	skipc
  3310  0080  2886               	goto	l1503
  3311  0081  0870               	movf	___lwdiv@divisor,w
  3312  0082  02F2               	subwf	___lwdiv@dividend,f
  3313  0083  0871               	movf	___lwdiv@divisor+1,w
  3314  0084  3BF3               	subwfb	___lwdiv@dividend+1,f
  3315  0085  1475               	bsf	___lwdiv@quotient,0
  3316  0086                     l1503:	
  3317  0086  3001               	movlw	1
  3318  0087                     u1465:	
  3319  0087  36F1               	lsrf	___lwdiv@divisor+1,f
  3320  0088  0CF0               	rrf	___lwdiv@divisor,f
  3321  0089  0B89               	decfsz	9,f
  3322  008A  2887               	goto	u1465
  3323  008B  3001               	movlw	1
  3324  008C  02F7               	subwf	___lwdiv@counter,f
  3325  008D  1D03               	btfss	3,2
  3326  008E  2874               	goto	l1497
  3327  008F                     l1507:	
  3328  008F  0876               	movf	___lwdiv@quotient+1,w
  3329  0090  00F1               	movwf	?___lwdiv+1
  3330  0091  0875               	movf	___lwdiv@quotient,w
  3331  0092  00F0               	movwf	?___lwdiv
  3332  0093  0008               	return
  3333  0094                     __end_of___lwdiv:	
  3334                           
  3335                           	psect	text5
  3336  0F3C                     __ptext5:	
  3337 ;; *************** function ___lwtoft *****************
  3338 ;; Defined at:
  3339 ;;		line 28 in file "/Applications/microchip/xc8/v1.42/sources/common/lwtoft.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;  c               2    8[COMMON] unsigned int 
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;		None
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  3    8[COMMON] float 
  3346 ;; Registers used:
  3347 ;;		wreg, status,2, status,0, pclath, cstack
  3348 ;; Tracked objects:
  3349 ;;		On entry : 0/0
  3350 ;;		On exit  : 0/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3353 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3355 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3356 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3357 ;;Total ram usage:        4 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    1
  3360 ;; This function calls:
  3361 ;;		___ftpack
  3362 ;; This function is called by:
  3363 ;;		_main
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           
  3368                           ;psect for function ___lwtoft
  3369  0F3C                     ___lwtoft:	
  3370                           
  3371                           ;incstack = 0
  3372                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  3373  0F3C  0878               	movf	___lwtoft@c,w
  3374  0F3D  00F0               	movwf	___ftpack@arg
  3375  0F3E  0879               	movf	___lwtoft@c+1,w
  3376  0F3F  00F1               	movwf	___ftpack@arg+1
  3377  0F40  01F2               	clrf	___ftpack@arg+2
  3378  0F41  308E               	movlw	142
  3379  0F42  00FB               	movwf	??___lwtoft
  3380  0F43  087B               	movf	??___lwtoft,w
  3381  0F44  00F3               	movwf	___ftpack@exp
  3382  0F45  01F4               	clrf	___ftpack@sign
  3383  0F46  3181  2116         	fcall	___ftpack
  3384  0F48  0870               	movf	?___ftpack,w
  3385  0F49  00F8               	movwf	?___lwtoft
  3386  0F4A  0871               	movf	?___ftpack+1,w
  3387  0F4B  00F9               	movwf	?___lwtoft+1
  3388  0F4C  0872               	movf	?___ftpack+2,w
  3389  0F4D  00FA               	movwf	?___lwtoft+2
  3390  0F4E  0008               	return
  3391  0F4F                     __end_of___lwtoft:	
  3392                           
  3393                           	psect	text6
  3394  0223                     __ptext6:	
  3395 ;; *************** function ___ftmul *****************
  3396 ;; Defined at:
  3397 ;;		line 62 in file "/Applications/microchip/xc8/v1.42/sources/common/ftmul.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;  f1              3    8[COMMON] float 
  3400 ;;  f2              3   11[COMMON] float 
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;  f3_as_produc    3    5[BANK0 ] unsigned um
  3403 ;;  sign            1    9[BANK0 ] unsigned char 
  3404 ;;  cntr            1    8[BANK0 ] unsigned char 
  3405 ;;  exp             1    4[BANK0 ] unsigned char 
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  3    8[COMMON] float 
  3408 ;; Registers used:
  3409 ;;		wreg, status,2, status,0, pclath, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3415 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3416 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3417 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3418 ;;      Totals:         6      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3419 ;;Total ram usage:       16 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; Hardware stack levels required when called:    1
  3422 ;; This function calls:
  3423 ;;		___ftpack
  3424 ;; This function is called by:
  3425 ;;		_main
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429                           
  3430                           ;psect for function ___ftmul
  3431  0223                     ___ftmul:	
  3432                           
  3433                           ;incstack = 0
  3434                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3435  0223  0878               	movf	___ftmul@f1,w
  3436  0224  0140               	movlb	0	; select bank0
  3437  0225  00A0               	movwf	??___ftmul
  3438  0226  0879               	movf	___ftmul@f1+1,w
  3439  0227  00A1               	movwf	??___ftmul+1
  3440  0228  087A               	movf	___ftmul@f1+2,w
  3441  0229  00A2               	movwf	??___ftmul+2
  3442  022A  1003               	clrc
  3443  022B  0D21               	rlf	??___ftmul+1,w
  3444  022C  0D22               	rlf	??___ftmul+2,w
  3445  022D  00A3               	movwf	??___ftmul+3
  3446  022E  0823               	movf	??___ftmul+3,w
  3447  022F  00A4               	movwf	___ftmul@exp
  3448  0230  0824               	movf	___ftmul@exp,w
  3449  0231  1D03               	btfss	3,2
  3450  0232  2A3A               	goto	l1847
  3451  0233  3000               	movlw	0
  3452  0234  00F8               	movwf	?___ftmul
  3453  0235  3000               	movlw	0
  3454  0236  00F9               	movwf	?___ftmul+1
  3455  0237  3000               	movlw	0
  3456  0238  00FA               	movwf	?___ftmul+2
  3457  0239  0008               	return
  3458  023A                     l1847:	
  3459  023A  087B               	movf	___ftmul@f2,w
  3460  023B  00A0               	movwf	??___ftmul
  3461  023C  087C               	movf	___ftmul@f2+1,w
  3462  023D  00A1               	movwf	??___ftmul+1
  3463  023E  087D               	movf	___ftmul@f2+2,w
  3464  023F  00A2               	movwf	??___ftmul+2
  3465  0240  1003               	clrc
  3466  0241  0D21               	rlf	??___ftmul+1,w
  3467  0242  0D22               	rlf	??___ftmul+2,w
  3468  0243  00A3               	movwf	??___ftmul+3
  3469  0244  0823               	movf	??___ftmul+3,w
  3470  0245  00A9               	movwf	___ftmul@sign
  3471  0246  0829               	movf	___ftmul@sign,w
  3472  0247  1D03               	btfss	3,2
  3473  0248  2A50               	goto	l1853
  3474  0249  3000               	movlw	0
  3475  024A  00F8               	movwf	?___ftmul
  3476  024B  3000               	movlw	0
  3477  024C  00F9               	movwf	?___ftmul+1
  3478  024D  3000               	movlw	0
  3479  024E  00FA               	movwf	?___ftmul+2
  3480  024F  0008               	return
  3481  0250                     l1853:	
  3482  0250  0829               	movf	___ftmul@sign,w
  3483  0251  3E7B               	addlw	123
  3484  0252  00A0               	movwf	??___ftmul
  3485  0253  0820               	movf	??___ftmul,w
  3486  0254  07A4               	addwf	___ftmul@exp,f
  3487  0255  0878               	movf	___ftmul@f1,w
  3488  0256  00A0               	movwf	??___ftmul
  3489  0257  0879               	movf	___ftmul@f1+1,w
  3490  0258  00A1               	movwf	??___ftmul+1
  3491  0259  087A               	movf	___ftmul@f1+2,w
  3492  025A  00A2               	movwf	??___ftmul+2
  3493  025B  3010               	movlw	16
  3494  025C                     u2105:	
  3495  025C  36A2               	lsrf	??___ftmul+2,f
  3496  025D  0CA1               	rrf	??___ftmul+1,f
  3497  025E  0CA0               	rrf	??___ftmul,f
  3498  025F  0B89               	decfsz	9,f
  3499  0260  2A5C               	goto	u2105
  3500  0261  0820               	movf	??___ftmul,w
  3501  0262  00A3               	movwf	??___ftmul+3
  3502  0263  0823               	movf	??___ftmul+3,w
  3503  0264  00A9               	movwf	___ftmul@sign
  3504  0265  087B               	movf	___ftmul@f2,w
  3505  0266  00A0               	movwf	??___ftmul
  3506  0267  087C               	movf	___ftmul@f2+1,w
  3507  0268  00A1               	movwf	??___ftmul+1
  3508  0269  087D               	movf	___ftmul@f2+2,w
  3509  026A  00A2               	movwf	??___ftmul+2
  3510  026B  3010               	movlw	16
  3511  026C                     u2115:	
  3512  026C  36A2               	lsrf	??___ftmul+2,f
  3513  026D  0CA1               	rrf	??___ftmul+1,f
  3514  026E  0CA0               	rrf	??___ftmul,f
  3515  026F  0B89               	decfsz	9,f
  3516  0270  2A6C               	goto	u2115
  3517  0271  0820               	movf	??___ftmul,w
  3518  0272  00A3               	movwf	??___ftmul+3
  3519  0273  0823               	movf	??___ftmul+3,w
  3520  0274  06A9               	xorwf	___ftmul@sign,f
  3521  0275  3080               	movlw	128
  3522  0276  00A0               	movwf	??___ftmul
  3523  0277  0820               	movf	??___ftmul,w
  3524  0278  05A9               	andwf	___ftmul@sign,f
  3525  0279  17F9               	bsf	___ftmul@f1+1,7
  3526  027A  17FC               	bsf	___ftmul@f2+1,7
  3527  027B  30FF               	movlw	255
  3528  027C  05FB               	andwf	___ftmul@f2,f
  3529  027D  30FF               	movlw	255
  3530  027E  05FC               	andwf	___ftmul@f2+1,f
  3531  027F  3000               	movlw	0
  3532  0280  05FD               	andwf	___ftmul@f2+2,f
  3533  0281  3000               	movlw	0
  3534  0282  00A5               	movwf	___ftmul@f3_as_product
  3535  0283  3000               	movlw	0
  3536  0284  00A6               	movwf	___ftmul@f3_as_product+1
  3537  0285  3000               	movlw	0
  3538  0286  00A7               	movwf	___ftmul@f3_as_product+2
  3539  0287  3007               	movlw	7
  3540  0288  00A0               	movwf	??___ftmul
  3541  0289  0820               	movf	??___ftmul,w
  3542  028A  00A8               	movwf	___ftmul@cntr
  3543  028B                     l1865:	
  3544  028B  1C78               	btfss	___ftmul@f1,0
  3545  028C  2A93               	goto	l1869
  3546  028D  087B               	movf	___ftmul@f2,w
  3547  028E  07A5               	addwf	___ftmul@f3_as_product,f
  3548  028F  087C               	movf	___ftmul@f2+1,w
  3549  0290  3DA6               	addwfc	___ftmul@f3_as_product+1,f
  3550  0291  087D               	movf	___ftmul@f2+2,w
  3551  0292  3DA7               	addwfc	___ftmul@f3_as_product+2,f
  3552  0293                     l1869:	
  3553  0293  3001               	movlw	1
  3554  0294                     u2135:	
  3555  0294  36FA               	lsrf	___ftmul@f1+2,f
  3556  0295  0CF9               	rrf	___ftmul@f1+1,f
  3557  0296  0CF8               	rrf	___ftmul@f1,f
  3558  0297  0B89               	decfsz	9,f
  3559  0298  2A94               	goto	u2135
  3560  0299  3001               	movlw	1
  3561  029A                     u2145:	
  3562  029A  35FB               	lslf	___ftmul@f2,f
  3563  029B  0DFC               	rlf	___ftmul@f2+1,f
  3564  029C  0DFD               	rlf	___ftmul@f2+2,f
  3565  029D  0B89               	decfsz	9,f
  3566  029E  2A9A               	goto	u2145
  3567  029F  3001               	movlw	1
  3568  02A0  02A8               	subwf	___ftmul@cntr,f
  3569  02A1  1D03               	btfss	3,2
  3570  02A2  2A8B               	goto	l1865
  3571  02A3  3009               	movlw	9
  3572  02A4  00A0               	movwf	??___ftmul
  3573  02A5  0820               	movf	??___ftmul,w
  3574  02A6  00A8               	movwf	___ftmul@cntr
  3575  02A7                     l1877:	
  3576  02A7  1C78               	btfss	___ftmul@f1,0
  3577  02A8  2AAF               	goto	l1881
  3578  02A9  087B               	movf	___ftmul@f2,w
  3579  02AA  07A5               	addwf	___ftmul@f3_as_product,f
  3580  02AB  087C               	movf	___ftmul@f2+1,w
  3581  02AC  3DA6               	addwfc	___ftmul@f3_as_product+1,f
  3582  02AD  087D               	movf	___ftmul@f2+2,w
  3583  02AE  3DA7               	addwfc	___ftmul@f3_as_product+2,f
  3584  02AF                     l1881:	
  3585  02AF  3001               	movlw	1
  3586  02B0                     u2175:	
  3587  02B0  36FA               	lsrf	___ftmul@f1+2,f
  3588  02B1  0CF9               	rrf	___ftmul@f1+1,f
  3589  02B2  0CF8               	rrf	___ftmul@f1,f
  3590  02B3  0B89               	decfsz	9,f
  3591  02B4  2AB0               	goto	u2175
  3592  02B5  3001               	movlw	1
  3593  02B6                     u2185:	
  3594  02B6  36A7               	lsrf	___ftmul@f3_as_product+2,f
  3595  02B7  0CA6               	rrf	___ftmul@f3_as_product+1,f
  3596  02B8  0CA5               	rrf	___ftmul@f3_as_product,f
  3597  02B9  0B89               	decfsz	9,f
  3598  02BA  2AB6               	goto	u2185
  3599  02BB  3001               	movlw	1
  3600  02BC  02A8               	subwf	___ftmul@cntr,f
  3601  02BD  1D03               	btfss	3,2
  3602  02BE  2AA7               	goto	l1877
  3603  02BF  0825               	movf	___ftmul@f3_as_product,w
  3604  02C0  00F0               	movwf	___ftpack@arg
  3605  02C1  0826               	movf	___ftmul@f3_as_product+1,w
  3606  02C2  00F1               	movwf	___ftpack@arg+1
  3607  02C3  0827               	movf	___ftmul@f3_as_product+2,w
  3608  02C4  00F2               	movwf	___ftpack@arg+2
  3609  02C5  0824               	movf	___ftmul@exp,w
  3610  02C6  00A0               	movwf	??___ftmul
  3611  02C7  0820               	movf	??___ftmul,w
  3612  02C8  00F3               	movwf	___ftpack@exp
  3613  02C9  0829               	movf	___ftmul@sign,w
  3614  02CA  00A1               	movwf	??___ftmul+1
  3615  02CB  0821               	movf	??___ftmul+1,w
  3616  02CC  00F4               	movwf	___ftpack@sign
  3617  02CD  3181  2116         	fcall	___ftpack
  3618  02CF  0870               	movf	?___ftpack,w
  3619  02D0  00F8               	movwf	?___ftmul
  3620  02D1  0871               	movf	?___ftpack+1,w
  3621  02D2  00F9               	movwf	?___ftmul+1
  3622  02D3  0872               	movf	?___ftpack+2,w
  3623  02D4  00FA               	movwf	?___ftmul+2
  3624  02D5  0008               	return
  3625  02D6                     __end_of___ftmul:	
  3626                           
  3627                           	psect	text7
  3628  017A                     __ptext7:	
  3629 ;; *************** function ___ftdiv *****************
  3630 ;; Defined at:
  3631 ;;		line 56 in file "/Applications/microchip/xc8/v1.42/sources/common/ftdiv.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;  f2              3   10[BANK0 ] float 
  3634 ;;  f1              3   13[BANK0 ] float 
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;  f3              3   21[BANK0 ] float 
  3637 ;;  sign            1   25[BANK0 ] unsigned char 
  3638 ;;  exp             1   24[BANK0 ] unsigned char 
  3639 ;;  cntr            1   20[BANK0 ] unsigned char 
  3640 ;; Return value:  Size  Location     Type
  3641 ;;                  3   10[BANK0 ] float 
  3642 ;; Registers used:
  3643 ;;		wreg, status,2, status,0, pclath, cstack
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3649 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3650 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3651 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3652 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3653 ;;Total ram usage:       16 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; Hardware stack levels required when called:    1
  3656 ;; This function calls:
  3657 ;;		___ftpack
  3658 ;; This function is called by:
  3659 ;;		_main
  3660 ;; This function uses a non-reentrant model
  3661 ;;
  3662                           
  3663                           
  3664                           ;psect for function ___ftdiv
  3665  017A                     ___ftdiv:	
  3666                           
  3667                           ;incstack = 0
  3668                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3669  017A  0140               	movlb	0	; select bank0
  3670  017B  082D               	movf	___ftdiv@f1,w
  3671  017C  00B0               	movwf	??___ftdiv
  3672  017D  082E               	movf	___ftdiv@f1+1,w
  3673  017E  00B1               	movwf	??___ftdiv+1
  3674  017F  082F               	movf	___ftdiv@f1+2,w
  3675  0180  00B2               	movwf	??___ftdiv+2
  3676  0181  1003               	clrc
  3677  0182  0D31               	rlf	??___ftdiv+1,w
  3678  0183  0D32               	rlf	??___ftdiv+2,w
  3679  0184  00B3               	movwf	??___ftdiv+3
  3680  0185  0833               	movf	??___ftdiv+3,w
  3681  0186  00B8               	movwf	___ftdiv@exp
  3682  0187  0838               	movf	___ftdiv@exp,w
  3683  0188  1D03               	btfss	3,2
  3684  0189  2991               	goto	l1805
  3685  018A  3000               	movlw	0
  3686  018B  00AA               	movwf	?___ftdiv
  3687  018C  3000               	movlw	0
  3688  018D  00AB               	movwf	?___ftdiv+1
  3689  018E  3000               	movlw	0
  3690  018F  00AC               	movwf	?___ftdiv+2
  3691  0190  0008               	return
  3692  0191                     l1805:	
  3693  0191  082A               	movf	___ftdiv@f2,w
  3694  0192  00B0               	movwf	??___ftdiv
  3695  0193  082B               	movf	___ftdiv@f2+1,w
  3696  0194  00B1               	movwf	??___ftdiv+1
  3697  0195  082C               	movf	___ftdiv@f2+2,w
  3698  0196  00B2               	movwf	??___ftdiv+2
  3699  0197  1003               	clrc
  3700  0198  0D31               	rlf	??___ftdiv+1,w
  3701  0199  0D32               	rlf	??___ftdiv+2,w
  3702  019A  00B3               	movwf	??___ftdiv+3
  3703  019B  0833               	movf	??___ftdiv+3,w
  3704  019C  00B9               	movwf	___ftdiv@sign
  3705  019D  0839               	movf	___ftdiv@sign,w
  3706  019E  1D03               	btfss	3,2
  3707  019F  29A7               	goto	l1811
  3708  01A0  3000               	movlw	0
  3709  01A1  00AA               	movwf	?___ftdiv
  3710  01A2  3000               	movlw	0
  3711  01A3  00AB               	movwf	?___ftdiv+1
  3712  01A4  3000               	movlw	0
  3713  01A5  00AC               	movwf	?___ftdiv+2
  3714  01A6  0008               	return
  3715  01A7                     l1811:	
  3716  01A7  3000               	movlw	0
  3717  01A8  00B5               	movwf	___ftdiv@f3
  3718  01A9  3000               	movlw	0
  3719  01AA  00B6               	movwf	___ftdiv@f3+1
  3720  01AB  3000               	movlw	0
  3721  01AC  00B7               	movwf	___ftdiv@f3+2
  3722  01AD  3089               	movlw	137
  3723  01AE  0739               	addwf	___ftdiv@sign,w
  3724  01AF  00B0               	movwf	??___ftdiv
  3725  01B0  0830               	movf	??___ftdiv,w
  3726  01B1  02B8               	subwf	___ftdiv@exp,f
  3727  01B2  082D               	movf	___ftdiv@f1,w
  3728  01B3  00B0               	movwf	??___ftdiv
  3729  01B4  082E               	movf	___ftdiv@f1+1,w
  3730  01B5  00B1               	movwf	??___ftdiv+1
  3731  01B6  082F               	movf	___ftdiv@f1+2,w
  3732  01B7  00B2               	movwf	??___ftdiv+2
  3733  01B8  3010               	movlw	16
  3734  01B9                     u2025:	
  3735  01B9  36B2               	lsrf	??___ftdiv+2,f
  3736  01BA  0CB1               	rrf	??___ftdiv+1,f
  3737  01BB  0CB0               	rrf	??___ftdiv,f
  3738  01BC  0B89               	decfsz	9,f
  3739  01BD  29B9               	goto	u2025
  3740  01BE  0830               	movf	??___ftdiv,w
  3741  01BF  00B3               	movwf	??___ftdiv+3
  3742  01C0  0833               	movf	??___ftdiv+3,w
  3743  01C1  00B9               	movwf	___ftdiv@sign
  3744  01C2  082A               	movf	___ftdiv@f2,w
  3745  01C3  00B0               	movwf	??___ftdiv
  3746  01C4  082B               	movf	___ftdiv@f2+1,w
  3747  01C5  00B1               	movwf	??___ftdiv+1
  3748  01C6  082C               	movf	___ftdiv@f2+2,w
  3749  01C7  00B2               	movwf	??___ftdiv+2
  3750  01C8  3010               	movlw	16
  3751  01C9                     u2035:	
  3752  01C9  36B2               	lsrf	??___ftdiv+2,f
  3753  01CA  0CB1               	rrf	??___ftdiv+1,f
  3754  01CB  0CB0               	rrf	??___ftdiv,f
  3755  01CC  0B89               	decfsz	9,f
  3756  01CD  29C9               	goto	u2035
  3757  01CE  0830               	movf	??___ftdiv,w
  3758  01CF  00B3               	movwf	??___ftdiv+3
  3759  01D0  0833               	movf	??___ftdiv+3,w
  3760  01D1  06B9               	xorwf	___ftdiv@sign,f
  3761  01D2  3080               	movlw	128
  3762  01D3  00B0               	movwf	??___ftdiv
  3763  01D4  0830               	movf	??___ftdiv,w
  3764  01D5  05B9               	andwf	___ftdiv@sign,f
  3765  01D6  17AE               	bsf	___ftdiv@f1+1,7
  3766  01D7  30FF               	movlw	255
  3767  01D8  05AD               	andwf	___ftdiv@f1,f
  3768  01D9  30FF               	movlw	255
  3769  01DA  05AE               	andwf	___ftdiv@f1+1,f
  3770  01DB  3000               	movlw	0
  3771  01DC  05AF               	andwf	___ftdiv@f1+2,f
  3772  01DD  17AB               	bsf	___ftdiv@f2+1,7
  3773  01DE  30FF               	movlw	255
  3774  01DF  05AA               	andwf	___ftdiv@f2,f
  3775  01E0  30FF               	movlw	255
  3776  01E1  05AB               	andwf	___ftdiv@f2+1,f
  3777  01E2  3000               	movlw	0
  3778  01E3  05AC               	andwf	___ftdiv@f2+2,f
  3779  01E4  3018               	movlw	24
  3780  01E5  00B0               	movwf	??___ftdiv
  3781  01E6  0830               	movf	??___ftdiv,w
  3782  01E7  00B4               	movwf	___ftdiv@cntr
  3783  01E8                     l1825:	
  3784  01E8  3001               	movlw	1
  3785  01E9                     u2045:	
  3786  01E9  35B5               	lslf	___ftdiv@f3,f
  3787  01EA  0DB6               	rlf	___ftdiv@f3+1,f
  3788  01EB  0DB7               	rlf	___ftdiv@f3+2,f
  3789  01EC  0B89               	decfsz	9,f
  3790  01ED  29E9               	goto	u2045
  3791  01EE  082C               	movf	___ftdiv@f2+2,w
  3792  01EF  022F               	subwf	___ftdiv@f1+2,w
  3793  01F0  1D03               	skipz
  3794  01F1  29F8               	goto	u2055
  3795  01F2  082B               	movf	___ftdiv@f2+1,w
  3796  01F3  022E               	subwf	___ftdiv@f1+1,w
  3797  01F4  1D03               	skipz
  3798  01F5  29F8               	goto	u2055
  3799  01F6  082A               	movf	___ftdiv@f2,w
  3800  01F7  022D               	subwf	___ftdiv@f1,w
  3801  01F8                     u2055:	
  3802  01F8  1C03               	skipc
  3803  01F9  2A01               	goto	l1833
  3804  01FA  082A               	movf	___ftdiv@f2,w
  3805  01FB  02AD               	subwf	___ftdiv@f1,f
  3806  01FC  082B               	movf	___ftdiv@f2+1,w
  3807  01FD  3BAE               	subwfb	___ftdiv@f1+1,f
  3808  01FE  082C               	movf	___ftdiv@f2+2,w
  3809  01FF  3BAF               	subwfb	___ftdiv@f1+2,f
  3810  0200  1435               	bsf	___ftdiv@f3,0
  3811  0201                     l1833:	
  3812  0201  3001               	movlw	1
  3813  0202                     u2065:	
  3814  0202  35AD               	lslf	___ftdiv@f1,f
  3815  0203  0DAE               	rlf	___ftdiv@f1+1,f
  3816  0204  0DAF               	rlf	___ftdiv@f1+2,f
  3817  0205  0B89               	decfsz	9,f
  3818  0206  2A02               	goto	u2065
  3819  0207  3001               	movlw	1
  3820  0208  02B4               	subwf	___ftdiv@cntr,f
  3821  0209  1D03               	btfss	3,2
  3822  020A  29E8               	goto	l1825
  3823  020B  0835               	movf	___ftdiv@f3,w
  3824  020C  00F0               	movwf	___ftpack@arg
  3825  020D  0836               	movf	___ftdiv@f3+1,w
  3826  020E  00F1               	movwf	___ftpack@arg+1
  3827  020F  0837               	movf	___ftdiv@f3+2,w
  3828  0210  00F2               	movwf	___ftpack@arg+2
  3829  0211  0838               	movf	___ftdiv@exp,w
  3830  0212  00B0               	movwf	??___ftdiv
  3831  0213  0830               	movf	??___ftdiv,w
  3832  0214  00F3               	movwf	___ftpack@exp
  3833  0215  0839               	movf	___ftdiv@sign,w
  3834  0216  00B1               	movwf	??___ftdiv+1
  3835  0217  0831               	movf	??___ftdiv+1,w
  3836  0218  00F4               	movwf	___ftpack@sign
  3837  0219  3181  2116         	fcall	___ftpack
  3838  021B  0870               	movf	?___ftpack,w
  3839  021C  0140               	movlb	0	; select bank0
  3840  021D  00AA               	movwf	?___ftdiv
  3841  021E  0871               	movf	?___ftpack+1,w
  3842  021F  00AB               	movwf	?___ftdiv+1
  3843  0220  0872               	movf	?___ftpack+2,w
  3844  0221  00AC               	movwf	?___ftdiv+2
  3845  0222  0008               	return
  3846  0223                     __end_of___ftdiv:	
  3847                           
  3848                           	psect	text8
  3849  02D6                     __ptext8:	
  3850 ;; *************** function ___ftadd *****************
  3851 ;; Defined at:
  3852 ;;		line 86 in file "/Applications/microchip/xc8/v1.42/sources/common/ftadd.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;  f1              3   26[BANK0 ] float 
  3855 ;;  f2              3   29[BANK0 ] float 
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;  exp1            1   38[BANK0 ] unsigned char 
  3858 ;;  exp2            1   37[BANK0 ] unsigned char 
  3859 ;;  sign            1   36[BANK0 ] unsigned char 
  3860 ;; Return value:  Size  Location     Type
  3861 ;;                  3   26[BANK0 ] float 
  3862 ;; Registers used:
  3863 ;;		wreg, status,2, status,0, pclath, cstack
  3864 ;; Tracked objects:
  3865 ;;		On entry : 0/0
  3866 ;;		On exit  : 0/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3869 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3870 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3871 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3872 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3873 ;;Total ram usage:       13 bytes
  3874 ;; Hardware stack levels used:    1
  3875 ;; Hardware stack levels required when called:    1
  3876 ;; This function calls:
  3877 ;;		___ftpack
  3878 ;; This function is called by:
  3879 ;;		_main
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           
  3884                           ;psect for function ___ftadd
  3885  02D6                     ___ftadd:	
  3886                           
  3887                           ;incstack = 0
  3888                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  3889  02D6  0140               	movlb	0	; select bank0
  3890  02D7  083A               	movf	___ftadd@f1,w
  3891  02D8  00C0               	movwf	??___ftadd
  3892  02D9  083B               	movf	___ftadd@f1+1,w
  3893  02DA  00C1               	movwf	??___ftadd+1
  3894  02DB  083C               	movf	___ftadd@f1+2,w
  3895  02DC  00C2               	movwf	??___ftadd+2
  3896  02DD  1003               	clrc
  3897  02DE  0D41               	rlf	??___ftadd+1,w
  3898  02DF  0D42               	rlf	??___ftadd+2,w
  3899  02E0  00C3               	movwf	??___ftadd+3
  3900  02E1  0843               	movf	??___ftadd+3,w
  3901  02E2  00C6               	movwf	___ftadd@exp1
  3902  02E3  083D               	movf	___ftadd@f2,w
  3903  02E4  00C0               	movwf	??___ftadd
  3904  02E5  083E               	movf	___ftadd@f2+1,w
  3905  02E6  00C1               	movwf	??___ftadd+1
  3906  02E7  083F               	movf	___ftadd@f2+2,w
  3907  02E8  00C2               	movwf	??___ftadd+2
  3908  02E9  1003               	clrc
  3909  02EA  0D41               	rlf	??___ftadd+1,w
  3910  02EB  0D42               	rlf	??___ftadd+2,w
  3911  02EC  00C3               	movwf	??___ftadd+3
  3912  02ED  0843               	movf	??___ftadd+3,w
  3913  02EE  00C5               	movwf	___ftadd@exp2
  3914  02EF  0846               	movf	___ftadd@exp1,w
  3915  02F0  1903               	btfsc	3,2
  3916  02F1  2AFE               	goto	l1735
  3917  02F2  0845               	movf	___ftadd@exp2,w
  3918  02F3  0246               	subwf	___ftadd@exp1,w
  3919  02F4  1803               	skipnc
  3920  02F5  2B05               	goto	l1739
  3921  02F6  0346               	decf	___ftadd@exp1,w
  3922  02F7  3AFF               	xorlw	255
  3923  02F8  0745               	addwf	___ftadd@exp2,w
  3924  02F9  00C0               	movwf	??___ftadd
  3925  02FA  3019               	movlw	25
  3926  02FB  0240               	subwf	??___ftadd,w
  3927  02FC  1C03               	skipc
  3928  02FD  2B05               	goto	l1739
  3929  02FE                     l1735:	
  3930  02FE  083D               	movf	___ftadd@f2,w
  3931  02FF  00BA               	movwf	?___ftadd
  3932  0300  083E               	movf	___ftadd@f2+1,w
  3933  0301  00BB               	movwf	?___ftadd+1
  3934  0302  083F               	movf	___ftadd@f2+2,w
  3935  0303  00BC               	movwf	?___ftadd+2
  3936  0304  0008               	return
  3937  0305                     l1739:	
  3938  0305  0845               	movf	___ftadd@exp2,w
  3939  0306  1903               	btfsc	3,2
  3940  0307  0008               	return
  3941  0308  0846               	movf	___ftadd@exp1,w
  3942  0309  0245               	subwf	___ftadd@exp2,w
  3943  030A  1803               	skipnc
  3944  030B  2B14               	goto	l1745
  3945  030C  0345               	decf	___ftadd@exp2,w
  3946  030D  3AFF               	xorlw	255
  3947  030E  0746               	addwf	___ftadd@exp1,w
  3948  030F  00C0               	movwf	??___ftadd
  3949  0310  3019               	movlw	25
  3950  0311  0240               	subwf	??___ftadd,w
  3951  0312  1803               	btfsc	3,0
  3952  0313  0008               	return
  3953  0314                     l1745:	
  3954  0314  3006               	movlw	6
  3955  0315  00C0               	movwf	??___ftadd
  3956  0316  0840               	movf	??___ftadd,w
  3957  0317  00C4               	movwf	___ftadd@sign
  3958  0318  1BBC               	btfsc	___ftadd@f1+2,7
  3959  0319  17C4               	bsf	___ftadd@sign,7
  3960  031A  1BBF               	btfsc	___ftadd@f2+2,7
  3961  031B  1744               	bsf	___ftadd@sign,6
  3962  031C  17BB               	bsf	___ftadd@f1+1,7
  3963  031D  30FF               	movlw	255
  3964  031E  05BA               	andwf	___ftadd@f1,f
  3965  031F  30FF               	movlw	255
  3966  0320  05BB               	andwf	___ftadd@f1+1,f
  3967  0321  3000               	movlw	0
  3968  0322  05BC               	andwf	___ftadd@f1+2,f
  3969  0323  17BE               	bsf	___ftadd@f2+1,7
  3970  0324  30FF               	movlw	255
  3971  0325  05BD               	andwf	___ftadd@f2,f
  3972  0326  30FF               	movlw	255
  3973  0327  05BE               	andwf	___ftadd@f2+1,f
  3974  0328  3000               	movlw	0
  3975  0329  05BF               	andwf	___ftadd@f2+2,f
  3976  032A  0845               	movf	___ftadd@exp2,w
  3977  032B  0246               	subwf	___ftadd@exp1,w
  3978  032C  1803               	skipnc
  3979  032D  2B50               	goto	l1767
  3980  032E                     l1757:	
  3981  032E  3001               	movlw	1
  3982  032F                     u1865:	
  3983  032F  35BD               	lslf	___ftadd@f2,f
  3984  0330  0DBE               	rlf	___ftadd@f2+1,f
  3985  0331  0DBF               	rlf	___ftadd@f2+2,f
  3986  0332  0B89               	decfsz	9,f
  3987  0333  2B2F               	goto	u1865
  3988  0334  3001               	movlw	1
  3989  0335  02C5               	subwf	___ftadd@exp2,f
  3990  0336  0845               	movf	___ftadd@exp2,w
  3991  0337  0646               	xorwf	___ftadd@exp1,w
  3992  0338  1903               	skipnz
  3993  0339  2B4B               	goto	l1765
  3994  033A  3001               	movlw	1
  3995  033B  02C4               	subwf	___ftadd@sign,f
  3996  033C  0844               	movf	___ftadd@sign,w
  3997  033D  3907               	andlw	7
  3998  033E  1903               	btfsc	3,2
  3999  033F  2B4B               	goto	l1765
  4000  0340  2B2E               	goto	l1757
  4001  0341                     l1763:	
  4002  0341  3001               	movlw	1
  4003  0342                     u1895:	
  4004  0342  36BC               	lsrf	___ftadd@f1+2,f
  4005  0343  0CBB               	rrf	___ftadd@f1+1,f
  4006  0344  0CBA               	rrf	___ftadd@f1,f
  4007  0345  0B89               	decfsz	9,f
  4008  0346  2B42               	goto	u1895
  4009  0347  3001               	movlw	1
  4010  0348  00C0               	movwf	??___ftadd
  4011  0349  0840               	movf	??___ftadd,w
  4012  034A  07C6               	addwf	___ftadd@exp1,f
  4013  034B                     l1765:	
  4014  034B  0846               	movf	___ftadd@exp1,w
  4015  034C  0645               	xorwf	___ftadd@exp2,w
  4016  034D  1903               	btfsc	3,2
  4017  034E  2B75               	goto	l426
  4018  034F  2B41               	goto	l1763
  4019  0350                     l1767:	
  4020  0350  0846               	movf	___ftadd@exp1,w
  4021  0351  0245               	subwf	___ftadd@exp2,w
  4022  0352  1803               	skipnc
  4023  0353  2B75               	goto	l426
  4024  0354                     l1769:	
  4025  0354  3001               	movlw	1
  4026  0355                     u1925:	
  4027  0355  35BA               	lslf	___ftadd@f1,f
  4028  0356  0DBB               	rlf	___ftadd@f1+1,f
  4029  0357  0DBC               	rlf	___ftadd@f1+2,f
  4030  0358  0B89               	decfsz	9,f
  4031  0359  2B55               	goto	u1925
  4032  035A  3001               	movlw	1
  4033  035B  02C6               	subwf	___ftadd@exp1,f
  4034  035C  0845               	movf	___ftadd@exp2,w
  4035  035D  0646               	xorwf	___ftadd@exp1,w
  4036  035E  1903               	skipnz
  4037  035F  2B71               	goto	l1777
  4038  0360  3001               	movlw	1
  4039  0361  02C4               	subwf	___ftadd@sign,f
  4040  0362  0844               	movf	___ftadd@sign,w
  4041  0363  3907               	andlw	7
  4042  0364  1903               	btfsc	3,2
  4043  0365  2B71               	goto	l1777
  4044  0366  2B54               	goto	l1769
  4045  0367                     l1775:	
  4046  0367  3001               	movlw	1
  4047  0368                     u1955:	
  4048  0368  36BF               	lsrf	___ftadd@f2+2,f
  4049  0369  0CBE               	rrf	___ftadd@f2+1,f
  4050  036A  0CBD               	rrf	___ftadd@f2,f
  4051  036B  0B89               	decfsz	9,f
  4052  036C  2B68               	goto	u1955
  4053  036D  3001               	movlw	1
  4054  036E  00C0               	movwf	??___ftadd
  4055  036F  0840               	movf	??___ftadd,w
  4056  0370  07C5               	addwf	___ftadd@exp2,f
  4057  0371                     l1777:	
  4058  0371  0846               	movf	___ftadd@exp1,w
  4059  0372  0645               	xorwf	___ftadd@exp2,w
  4060  0373  1D03               	skipz
  4061  0374  2B67               	goto	l1775
  4062  0375                     l426:	
  4063  0375  1FC4               	btfss	___ftadd@sign,7
  4064  0376  2B87               	goto	l1781
  4065  0377  30FF               	movlw	255
  4066  0378  06BA               	xorwf	___ftadd@f1,f
  4067  0379  30FF               	movlw	255
  4068  037A  06BB               	xorwf	___ftadd@f1+1,f
  4069  037B  30FF               	movlw	255
  4070  037C  06BC               	xorwf	___ftadd@f1+2,f
  4071  037D  3001               	movlw	1
  4072  037E  07BA               	addwf	___ftadd@f1,f
  4073  037F  3000               	movlw	0
  4074  0380  1803               	skipnc
  4075  0381  3001               	movlw	1
  4076  0382  07BB               	addwf	___ftadd@f1+1,f
  4077  0383  3000               	movlw	0
  4078  0384  1803               	skipnc
  4079  0385  3001               	movlw	1
  4080  0386  07BC               	addwf	___ftadd@f1+2,f
  4081  0387                     l1781:	
  4082  0387  1F44               	btfss	___ftadd@sign,6
  4083  0388  2B99               	goto	l1785
  4084  0389  30FF               	movlw	255
  4085  038A  06BD               	xorwf	___ftadd@f2,f
  4086  038B  30FF               	movlw	255
  4087  038C  06BE               	xorwf	___ftadd@f2+1,f
  4088  038D  30FF               	movlw	255
  4089  038E  06BF               	xorwf	___ftadd@f2+2,f
  4090  038F  3001               	movlw	1
  4091  0390  07BD               	addwf	___ftadd@f2,f
  4092  0391  3000               	movlw	0
  4093  0392  1803               	skipnc
  4094  0393  3001               	movlw	1
  4095  0394  07BE               	addwf	___ftadd@f2+1,f
  4096  0395  3000               	movlw	0
  4097  0396  1803               	skipnc
  4098  0397  3001               	movlw	1
  4099  0398  07BF               	addwf	___ftadd@f2+2,f
  4100  0399                     l1785:	
  4101  0399  01C4               	clrf	___ftadd@sign
  4102  039A  083A               	movf	___ftadd@f1,w
  4103  039B  07BD               	addwf	___ftadd@f2,f
  4104  039C  083B               	movf	___ftadd@f1+1,w
  4105  039D  3DBE               	addwfc	___ftadd@f2+1,f
  4106  039E  083C               	movf	___ftadd@f1+2,w
  4107  039F  3DBF               	addwfc	___ftadd@f2+2,f
  4108  03A0  1FBF               	btfss	___ftadd@f2+2,7
  4109  03A1  2BB4               	goto	l1795
  4110  03A2  30FF               	movlw	255
  4111  03A3  06BD               	xorwf	___ftadd@f2,f
  4112  03A4  30FF               	movlw	255
  4113  03A5  06BE               	xorwf	___ftadd@f2+1,f
  4114  03A6  30FF               	movlw	255
  4115  03A7  06BF               	xorwf	___ftadd@f2+2,f
  4116  03A8  3001               	movlw	1
  4117  03A9  07BD               	addwf	___ftadd@f2,f
  4118  03AA  3000               	movlw	0
  4119  03AB  1803               	skipnc
  4120  03AC  3001               	movlw	1
  4121  03AD  07BE               	addwf	___ftadd@f2+1,f
  4122  03AE  3000               	movlw	0
  4123  03AF  1803               	skipnc
  4124  03B0  3001               	movlw	1
  4125  03B1  07BF               	addwf	___ftadd@f2+2,f
  4126  03B2  01C4               	clrf	___ftadd@sign
  4127  03B3  0AC4               	incf	___ftadd@sign,f
  4128  03B4                     l1795:	
  4129  03B4  083D               	movf	___ftadd@f2,w
  4130  03B5  00F0               	movwf	___ftpack@arg
  4131  03B6  083E               	movf	___ftadd@f2+1,w
  4132  03B7  00F1               	movwf	___ftpack@arg+1
  4133  03B8  083F               	movf	___ftadd@f2+2,w
  4134  03B9  00F2               	movwf	___ftpack@arg+2
  4135  03BA  0846               	movf	___ftadd@exp1,w
  4136  03BB  00C0               	movwf	??___ftadd
  4137  03BC  0840               	movf	??___ftadd,w
  4138  03BD  00F3               	movwf	___ftpack@exp
  4139  03BE  0844               	movf	___ftadd@sign,w
  4140  03BF  00C1               	movwf	??___ftadd+1
  4141  03C0  0841               	movf	??___ftadd+1,w
  4142  03C1  00F4               	movwf	___ftpack@sign
  4143  03C2  3181  2116         	fcall	___ftpack
  4144  03C4  0870               	movf	?___ftpack,w
  4145  03C5  0140               	movlb	0	; select bank0
  4146  03C6  00BA               	movwf	?___ftadd
  4147  03C7  0871               	movf	?___ftpack+1,w
  4148  03C8  00BB               	movwf	?___ftadd+1
  4149  03C9  0872               	movf	?___ftpack+2,w
  4150  03CA  00BC               	movwf	?___ftadd+2
  4151  03CB  0008               	return
  4152  03CC                     __end_of___ftadd:	
  4153                           
  4154                           	psect	text9
  4155  0116                     __ptext9:	
  4156 ;; *************** function ___ftpack *****************
  4157 ;; Defined at:
  4158 ;;		line 62 in file "/Applications/microchip/xc8/v1.42/sources/common/float.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  arg             3    0[COMMON] unsigned um
  4161 ;;  exp             1    3[COMMON] unsigned char 
  4162 ;;  sign            1    4[COMMON] unsigned char 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;		None
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  3    0[COMMON] float 
  4167 ;; Registers used:
  4168 ;;		wreg, status,2, status,0
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4174 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4176 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4177 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4178 ;;Total ram usage:        8 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; This function calls:
  4181 ;;		Nothing
  4182 ;; This function is called by:
  4183 ;;		___ftadd
  4184 ;;		___ftdiv
  4185 ;;		___ftmul
  4186 ;;		___lwtoft
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           
  4191                           ;psect for function ___ftpack
  4192  0116                     ___ftpack:	
  4193                           
  4194                           ;incstack = 0
  4195                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4196  0116  0873               	movf	___ftpack@exp,w
  4197  0117  1903               	btfsc	3,2
  4198  0118  291E               	goto	l1457
  4199  0119  0872               	movf	___ftpack@arg+2,w
  4200  011A  0471               	iorwf	___ftpack@arg+1,w
  4201  011B  0470               	iorwf	___ftpack@arg,w
  4202  011C  1D03               	skipz
  4203  011D  292F               	goto	l1463
  4204  011E                     l1457:	
  4205  011E  3000               	movlw	0
  4206  011F  00F0               	movwf	?___ftpack
  4207  0120  3000               	movlw	0
  4208  0121  00F1               	movwf	?___ftpack+1
  4209  0122  3000               	movlw	0
  4210  0123  00F2               	movwf	?___ftpack+2
  4211  0124  0008               	return
  4212  0125                     l1461:	
  4213  0125  3001               	movlw	1
  4214  0126  00F5               	movwf	??___ftpack
  4215  0127  0875               	movf	??___ftpack,w
  4216  0128  07F3               	addwf	___ftpack@exp,f
  4217  0129  3001               	movlw	1
  4218  012A                     u1315:	
  4219  012A  36F2               	lsrf	___ftpack@arg+2,f
  4220  012B  0CF1               	rrf	___ftpack@arg+1,f
  4221  012C  0CF0               	rrf	___ftpack@arg,f
  4222  012D  0B89               	decfsz	9,f
  4223  012E  292A               	goto	u1315
  4224  012F                     l1463:	
  4225  012F  30FE               	movlw	254
  4226  0130  0572               	andwf	___ftpack@arg+2,w
  4227  0131  1903               	btfsc	3,2
  4228  0132  2948               	goto	l395
  4229  0133  2925               	goto	l1461
  4230  0134                     l1465:	
  4231  0134  3001               	movlw	1
  4232  0135  00F5               	movwf	??___ftpack
  4233  0136  0875               	movf	??___ftpack,w
  4234  0137  07F3               	addwf	___ftpack@exp,f
  4235  0138  3001               	movlw	1
  4236  0139  07F0               	addwf	___ftpack@arg,f
  4237  013A  3000               	movlw	0
  4238  013B  1803               	skipnc
  4239  013C  3001               	movlw	1
  4240  013D  07F1               	addwf	___ftpack@arg+1,f
  4241  013E  3000               	movlw	0
  4242  013F  1803               	skipnc
  4243  0140  3001               	movlw	1
  4244  0141  07F2               	addwf	___ftpack@arg+2,f
  4245  0142  3001               	movlw	1
  4246  0143                     u1335:	
  4247  0143  36F2               	lsrf	___ftpack@arg+2,f
  4248  0144  0CF1               	rrf	___ftpack@arg+1,f
  4249  0145  0CF0               	rrf	___ftpack@arg,f
  4250  0146  0B89               	decfsz	9,f
  4251  0147  2943               	goto	u1335
  4252  0148                     l395:	
  4253  0148  30FF               	movlw	255
  4254  0149  0572               	andwf	___ftpack@arg+2,w
  4255  014A  1903               	btfsc	3,2
  4256  014B  2955               	goto	l1473
  4257  014C  2934               	goto	l1465
  4258  014D                     l1471:	
  4259  014D  3001               	movlw	1
  4260  014E  02F3               	subwf	___ftpack@exp,f
  4261  014F  3001               	movlw	1
  4262  0150                     u1355:	
  4263  0150  35F0               	lslf	___ftpack@arg,f
  4264  0151  0DF1               	rlf	___ftpack@arg+1,f
  4265  0152  0DF2               	rlf	___ftpack@arg+2,f
  4266  0153  0B89               	decfsz	9,f
  4267  0154  2950               	goto	u1355
  4268  0155                     l1473:	
  4269  0155  1BF1               	btfsc	___ftpack@arg+1,7
  4270  0156  295B               	goto	l402
  4271  0157  3002               	movlw	2
  4272  0158  0273               	subwf	___ftpack@exp,w
  4273  0159  1803               	skipnc
  4274  015A  294D               	goto	l1471
  4275  015B                     l402:	
  4276  015B  1873               	btfsc	___ftpack@exp,0
  4277  015C  2963               	goto	l403
  4278  015D  30FF               	movlw	255
  4279  015E  05F0               	andwf	___ftpack@arg,f
  4280  015F  307F               	movlw	127
  4281  0160  05F1               	andwf	___ftpack@arg+1,f
  4282  0161  30FF               	movlw	255
  4283  0162  05F2               	andwf	___ftpack@arg+2,f
  4284  0163                     l403:	
  4285  0163  1003               	clrc
  4286  0164  0CF3               	rrf	___ftpack@exp,f
  4287  0165  0873               	movf	___ftpack@exp,w
  4288  0166  00F5               	movwf	??___ftpack
  4289  0167  01F6               	clrf	??___ftpack+1
  4290  0168  01F7               	clrf	??___ftpack+2
  4291  0169  3010               	movlw	16
  4292  016A                     u1395:	
  4293  016A  35F5               	lslf	??___ftpack,f
  4294  016B  0DF6               	rlf	??___ftpack+1,f
  4295  016C  0DF7               	rlf	??___ftpack+2,f
  4296  016D  0B89               	decfsz	9,f
  4297  016E  296A               	goto	u1395
  4298  016F  0875               	movf	??___ftpack,w
  4299  0170  04F0               	iorwf	___ftpack@arg,f
  4300  0171  0876               	movf	??___ftpack+1,w
  4301  0172  04F1               	iorwf	___ftpack@arg+1,f
  4302  0173  0877               	movf	??___ftpack+2,w
  4303  0174  04F2               	iorwf	___ftpack@arg+2,f
  4304  0175  0874               	movf	___ftpack@sign,w
  4305  0176  1903               	btfsc	3,2
  4306  0177  0008               	return
  4307  0178  17F2               	bsf	___ftpack@arg+2,7
  4308  0179  0008               	return
  4309  017A                     __end_of___ftpack:	
  4310                           
  4311                           	psect	text10
  4312  0EEC                     __ptext10:	
  4313 ;; *************** function _SYSTEM_Initialize *****************
  4314 ;; Defined at:
  4315 ;;		line 86 in file "mcc_generated_files/mcc.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;		None
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;		None
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      void 
  4322 ;; Registers used:
  4323 ;;		wreg, status,2, status,0, pclath, cstack
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4333 ;;Total ram usage:        0 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    1
  4336 ;; This function calls:
  4337 ;;		_OSCILLATOR_Initialize
  4338 ;;		_PIN_MANAGER_Initialize
  4339 ;; This function is called by:
  4340 ;;		_main
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           
  4345                           ;psect for function _SYSTEM_Initialize
  4346  0EEC                     _SYSTEM_Initialize:	
  4347                           
  4348                           ;mcc.c: 89: PIN_MANAGER_Initialize();
  4349                           
  4350                           ;incstack = 0
  4351                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4352  0EEC  318F  271A  318E   	fcall	_PIN_MANAGER_Initialize
  4353                           
  4354                           ;mcc.c: 90: OSCILLATOR_Initialize();
  4355  0EEF  318F  2702         	fcall	_OSCILLATOR_Initialize
  4356  0EF1  0008               	return
  4357  0EF2                     __end_of_SYSTEM_Initialize:	
  4358                           
  4359                           	psect	text11
  4360  0F1A                     __ptext11:	
  4361 ;; *************** function _PIN_MANAGER_Initialize *****************
  4362 ;; Defined at:
  4363 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;		None
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;		None
  4368 ;; Return value:  Size  Location     Type
  4369 ;;                  1    wreg      void 
  4370 ;; Registers used:
  4371 ;;		wreg, status,2
  4372 ;; Tracked objects:
  4373 ;;		On entry : 0/0
  4374 ;;		On exit  : 0/0
  4375 ;;		Unchanged: 0/0
  4376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4381 ;;Total ram usage:        0 bytes
  4382 ;; Hardware stack levels used:    1
  4383 ;; This function calls:
  4384 ;;		Nothing
  4385 ;; This function is called by:
  4386 ;;		_SYSTEM_Initialize
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           
  4391                           ;psect for function _PIN_MANAGER_Initialize
  4392  0F1A                     _PIN_MANAGER_Initialize:	
  4393                           
  4394                           ;pin_manager.c: 57: LATA = 0x00;
  4395                           
  4396                           ;incstack = 0
  4397                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4398  0F1A  0140               	movlb	0	; select bank0
  4399  0F1B  0198               	clrf	24	;volatile
  4400                           
  4401                           ;pin_manager.c: 58: LATC = 0x00;
  4402  0F1C  019A               	clrf	26	;volatile
  4403                           
  4404                           ;pin_manager.c: 63: TRISA = 0x07;
  4405  0F1D  3007               	movlw	7
  4406  0F1E  0092               	movwf	18	;volatile
  4407                           
  4408                           ;pin_manager.c: 64: TRISC = 0x00;
  4409  0F1F  0194               	clrf	20	;volatile
  4410                           
  4411                           ;pin_manager.c: 69: ANSELC = 0x00;
  4412  0F20  017E               	movlb	62	; select bank62
  4413  0F21  01CE               	clrf	78	;volatile
  4414                           
  4415                           ;pin_manager.c: 70: ANSELA = 0x07;
  4416  0F22  3007               	movlw	7
  4417  0F23  00B8               	movwf	56	;volatile
  4418                           
  4419                           ;pin_manager.c: 75: WPUA = 0x00;
  4420  0F24  01B9               	clrf	57	;volatile
  4421                           
  4422                           ;pin_manager.c: 76: WPUC = 0x00;
  4423  0F25  01CF               	clrf	79	;volatile
  4424                           
  4425                           ;pin_manager.c: 81: ODCONA = 0x18;
  4426  0F26  3018               	movlw	24
  4427  0F27  00BA               	movwf	58	;volatile
  4428                           
  4429                           ;pin_manager.c: 82: ODCONC = 0x00;
  4430  0F28  01D0               	clrf	80	;volatile
  4431  0F29  0008               	return
  4432  0F2A                     __end_of_PIN_MANAGER_Initialize:	
  4433                           
  4434                           	psect	text12
  4435  0F02                     __ptext12:	
  4436 ;; *************** function _OSCILLATOR_Initialize *****************
  4437 ;; Defined at:
  4438 ;;		line 93 in file "mcc_generated_files/mcc.c"
  4439 ;; Parameters:    Size  Location     Type
  4440 ;;		None
  4441 ;; Auto vars:     Size  Location     Type
  4442 ;;		None
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  1    wreg      void 
  4445 ;; Registers used:
  4446 ;;		wreg, status,2
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4456 ;;Total ram usage:        0 bytes
  4457 ;; Hardware stack levels used:    1
  4458 ;; This function calls:
  4459 ;;		Nothing
  4460 ;; This function is called by:
  4461 ;;		_SYSTEM_Initialize
  4462 ;; This function uses a non-reentrant model
  4463 ;;
  4464                           
  4465                           
  4466                           ;psect for function _OSCILLATOR_Initialize
  4467  0F02                     _OSCILLATOR_Initialize:	
  4468                           
  4469                           ;mcc.c: 96: OSCCON1 = 0x60;
  4470                           
  4471                           ;incstack = 0
  4472                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4473  0F02  3060               	movlw	96
  4474  0F03  0151               	movlb	17	; select bank17
  4475  0F04  008D               	movwf	13	;volatile
  4476                           
  4477                           ;mcc.c: 98: OSCCON3 = 0x00;
  4478  0F05  018F               	clrf	15	;volatile
  4479                           
  4480                           ;mcc.c: 100: OSCEN = 0x00;
  4481  0F06  0191               	clrf	17	;volatile
  4482                           
  4483                           ;mcc.c: 102: OSCFRQ = 0x06;
  4484  0F07  3006               	movlw	6
  4485  0F08  0093               	movwf	19	;volatile
  4486                           
  4487                           ;mcc.c: 104: OSCSTAT = 0x00;
  4488  0F09  0190               	clrf	16	;volatile
  4489                           
  4490                           ;mcc.c: 106: OSCTUNE = 0x00;
  4491  0F0A  0192               	clrf	18	;volatile
  4492  0F0B  0008               	return
  4493  0F0C                     __end_of_OSCILLATOR_Initialize:	
  4494                           
  4495                           	psect	text13
  4496  0F2A                     __ptext13:	
  4497 ;; *************** function _OW_write_byte *****************
  4498 ;; Defined at:
  4499 ;;		line 155 in file "1-wire.h"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;  write_data      1    wreg     unsigned char 
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;  write_data      1    2[COMMON] unsigned char 
  4504 ;;  loop            1    3[COMMON] unsigned char 
  4505 ;; Return value:  Size  Location     Type
  4506 ;;                  1    wreg      void 
  4507 ;; Registers used:
  4508 ;;		wreg, status,2, status,0, pclath, cstack
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4515 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4516 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4517 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4518 ;;Total ram usage:        3 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:    2
  4521 ;; This function calls:
  4522 ;;		_OW_write_bit
  4523 ;; This function is called by:
  4524 ;;		_main
  4525 ;; This function uses a non-reentrant model
  4526 ;;
  4527                           
  4528                           
  4529                           ;psect for function _OW_write_byte
  4530  0F2A                     _OW_write_byte:	
  4531                           
  4532                           ;incstack = 0
  4533                           ; Regs used in _OW_write_byte: [wreg+status,2+status,0+pclath+cstack]
  4534                           ;OW_write_byte@write_data stored from wreg
  4535  0F2A  00F2               	movwf	OW_write_byte@write_data
  4536                           
  4537                           ;1-wire.h: 157: unsigned char loop;
  4538                           ;1-wire.h: 158: for (loop = 0; loop < 8; loop++)
  4539  0F2B  01F3               	clrf	OW_write_byte@loop
  4540  0F2C                     L4:	
  4541  0F2C  3008               	movlw	8
  4542  0F2D  0273               	subwf	OW_write_byte@loop,w
  4543  0F2E  1803               	btfsc	3,0
  4544  0F2F  0008               	return
  4545                           
  4546                           ;1-wire.h: 159: {
  4547                           ;1-wire.h: 160: OW_write_bit(write_data & 0x01);
  4548  0F30  0872               	movf	OW_write_byte@write_data,w
  4549  0F31  3901               	andlw	1
  4550  0F32  318F  27E0  318F   	fcall	_OW_write_bit
  4551                           
  4552                           ;1-wire.h: 161: write_data >>= 1;
  4553  0F35  1003               	clrc
  4554  0F36  0CF2               	rrf	OW_write_byte@write_data,f
  4555  0F37  3001               	movlw	1
  4556  0F38  00F1               	movwf	??_OW_write_byte
  4557  0F39  0871               	movf	??_OW_write_byte,w
  4558  0F3A  07F3               	addwf	OW_write_byte@loop,f
  4559  0F3B  2F2C               	goto	L4
  4560  0F3C                     __end_of_OW_write_byte:	
  4561                           
  4562                           	psect	text14
  4563  0FE0                     __ptext14:	
  4564 ;; *************** function _OW_write_bit *****************
  4565 ;; Defined at:
  4566 ;;		line 93 in file "1-wire.h"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;  write_bit       1    wreg     unsigned char 
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  write_bit       1    0[COMMON] unsigned char 
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  1    wreg      void 
  4573 ;; Registers used:
  4574 ;;		wreg, status,2, status,0, pclath, cstack
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4581 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4583 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4584 ;;Total ram usage:        1 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    1
  4587 ;; This function calls:
  4588 ;;		_drive_OW_high
  4589 ;;		_drive_OW_low
  4590 ;; This function is called by:
  4591 ;;		_OW_write_byte
  4592 ;; This function uses a non-reentrant model
  4593 ;;
  4594                           
  4595                           
  4596                           ;psect for function _OW_write_bit
  4597  0FE0                     _OW_write_bit:	
  4598                           
  4599                           ;incstack = 0
  4600                           ; Regs used in _OW_write_bit: [wreg+status,2+status,0+pclath+cstack]
  4601                           ;OW_write_bit@write_bit stored from wreg
  4602  0FE0  00F0               	movwf	OW_write_bit@write_bit
  4603                           
  4604                           ;1-wire.h: 95: if (write_bit)
  4605  0FE1  0870               	movf	OW_write_bit@write_bit,w
  4606  0FE2  1903               	btfsc	3,2
  4607  0FE3  2FF2               	goto	l1377
  4608                           
  4609                           ;1-wire.h: 96: {
  4610                           ;1-wire.h: 98: drive_OW_low();
  4611  0FE4  318E  26E8  318F   	fcall	_drive_OW_low
  4612                           
  4613                           ;1-wire.h: 112: _delay((unsigned long)((6)*(32000000/4000000.0)));
  4614  0FE7  3010               	movlw	16
  4615  0FE8                     u2357:	
  4616  0FE8  0B89               	decfsz	9,f
  4617  0FE9  2FE8               	goto	u2357
  4618                           
  4619                           ;1-wire.h: 113: drive_OW_high ();
  4620  0FEA  318E  26E4  318F   	fcall	_drive_OW_high
  4621                           
  4622                           ;1-wire.h: 114: _delay((unsigned long)((64)*(32000000/4000000.0)));
  4623  0FED  30AA               	movlw	170
  4624  0FEE                     u2367:	
  4625  0FEE  0B89               	decfsz	9,f
  4626  0FEF  2FEE               	goto	u2367
  4627  0FF0  3200               	nop2
  4628                           
  4629                           ;1-wire.h: 115: }
  4630  0FF1  0008               	return
  4631  0FF2                     l1377:	
  4632                           
  4633                           ;1-wire.h: 116: else
  4634                           ;1-wire.h: 117: {
  4635                           ;1-wire.h: 119: drive_OW_low();
  4636  0FF2  318E  26E8  318F   	fcall	_drive_OW_low
  4637                           
  4638                           ;1-wire.h: 120: _delay((unsigned long)((60)*(32000000/4000000.0)));
  4639  0FF5  30A0               	movlw	160
  4640  0FF6                     u2377:	
  4641  0FF6  0B89               	decfsz	9,f
  4642  0FF7  2FF6               	goto	u2377
  4643                           
  4644                           ;1-wire.h: 121: drive_OW_high ();
  4645  0FF8  318E  26E4  318F   	fcall	_drive_OW_high
  4646                           
  4647                           ;1-wire.h: 122: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4648  0FFB  301A               	movlw	26
  4649  0FFC                     u2387:	
  4650  0FFC  0B89               	decfsz	9,f
  4651  0FFD  2FFC               	goto	u2387
  4652  0FFE  3200               	nop2
  4653  0FFF  0008               	return
  4654  1000                     __end_of_OW_write_bit:	
  4655                           
  4656                           	psect	text15
  4657  0010                     __ptext15:	
  4658 ;; *************** function _OW_reset_pulse *****************
  4659 ;; Defined at:
  4660 ;;		line 69 in file "1-wire.h"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;		None
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;  presence_det    1    2[COMMON] unsigned char 
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  1    wreg      unsigned char 
  4667 ;; Registers used:
  4668 ;;		wreg, status,2, status,0, pclath, cstack
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4678 ;;Total ram usage:        2 bytes
  4679 ;; Hardware stack levels used:    1
  4680 ;; Hardware stack levels required when called:    1
  4681 ;; This function calls:
  4682 ;;		_drive_OW_high
  4683 ;;		_drive_OW_low
  4684 ;;		_read_OW
  4685 ;; This function is called by:
  4686 ;;		_main
  4687 ;; This function uses a non-reentrant model
  4688 ;;
  4689                           
  4690                           
  4691                           ;psect for function _OW_reset_pulse
  4692  0010                     _OW_reset_pulse:	
  4693                           
  4694                           ;1-wire.h: 71: unsigned char presence_detect;
  4695                           ;1-wire.h: 72: drive_OW_low();
  4696                           
  4697                           ;incstack = 0
  4698                           ; Regs used in _OW_reset_pulse: [wreg+status,2+status,0+pclath+cstack]
  4699  0010  318E  26E8  3180   	fcall	_drive_OW_low
  4700                           
  4701                           ;1-wire.h: 73: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4702  0013  3006               	movlw	6
  4703  0014  00F1               	movwf	??_OW_reset_pulse
  4704  0015  3030               	movlw	48
  4705  0016                     u2397:	
  4706  0016  0B89               	decfsz	9,f
  4707  0017  2816               	goto	u2397
  4708  0018  0BF1               	decfsz	??_OW_reset_pulse,f
  4709  0019  2816               	goto	u2397
  4710  001A  3200               	nop2
  4711                           
  4712                           ;1-wire.h: 75: drive_OW_high ();
  4713  001B  318E  26E4  3180   	fcall	_drive_OW_high
  4714                           
  4715                           ;1-wire.h: 76: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4716  001E  30A0               	movlw	160
  4717  001F                     u2407:	
  4718  001F  3200               	nop2
  4719  0020  0B89               	decfsz	9,f
  4720  0021  281F               	goto	u2407
  4721                           
  4722                           ;1-wire.h: 77: presence_detect = read_OW();
  4723  0022  3180  2005  3180   	fcall	_read_OW
  4724  0025  00F1               	movwf	??_OW_reset_pulse
  4725  0026  0871               	movf	??_OW_reset_pulse,w
  4726  0027  00F2               	movwf	OW_reset_pulse@presence_detect
  4727                           
  4728                           ;1-wire.h: 78: _delay((unsigned long)((410)*(32000000/4000000.0)));
  4729  0028  3005               	movlw	5
  4730  0029  00F1               	movwf	??_OW_reset_pulse
  4731  002A  3041               	movlw	65
  4732  002B                     u2417:	
  4733  002B  0B89               	decfsz	9,f
  4734  002C  282B               	goto	u2417
  4735  002D  0BF1               	decfsz	??_OW_reset_pulse,f
  4736  002E  282B               	goto	u2417
  4737  002F  0000               	nop
  4738                           
  4739                           ;1-wire.h: 80: drive_OW_high ();
  4740  0030  318E  26E4         	fcall	_drive_OW_high
  4741                           
  4742                           ;1-wire.h: 81: return presence_detect;
  4743  0032  0872               	movf	OW_reset_pulse@presence_detect,w
  4744  0033  0008               	return
  4745  0034                     __end_of_OW_reset_pulse:	
  4746                           
  4747                           	psect	text16
  4748  0F93                     __ptext16:	
  4749 ;; *************** function _OW_read_byte *****************
  4750 ;; Defined at:
  4751 ;;		line 173 in file "1-wire.h"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;		None
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;  loop            1    5[COMMON] unsigned char 
  4756 ;;  result          1    4[COMMON] unsigned char 
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  1    wreg      unsigned char 
  4759 ;; Registers used:
  4760 ;;		wreg, status,2, status,0, pclath, cstack
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4767 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4768 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4769 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4770 ;;Total ram usage:        3 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    2
  4773 ;; This function calls:
  4774 ;;		_OW_read_bit
  4775 ;; This function is called by:
  4776 ;;		_main
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           
  4781                           ;psect for function _OW_read_byte
  4782  0F93                     _OW_read_byte:	
  4783                           
  4784                           ;1-wire.h: 175: unsigned char loop, result=0;
  4785                           
  4786                           ;incstack = 0
  4787                           ; Regs used in _OW_read_byte: [wreg+status,2+status,0+pclath+cstack]
  4788  0F93  01F4               	clrf	OW_read_byte@result
  4789                           
  4790                           ;1-wire.h: 176: for (loop = 0; loop < 8; loop++)
  4791  0F94  01F5               	clrf	OW_read_byte@loop
  4792  0F95  3008               	movlw	8
  4793  0F96  0275               	subwf	OW_read_byte@loop,w
  4794  0F97  1803               	btfsc	3,0
  4795  0F98  2FA9               	goto	l1559
  4796                           
  4797                           ;1-wire.h: 177: {
  4798                           ;1-wire.h: 178: result >>= 1;
  4799  0F99  1003               	clrc
  4800  0F9A                     L5:	
  4801  0F9A  0CF4               	rrf	OW_read_byte@result,f
  4802                           
  4803                           ;1-wire.h: 179: if (OW_read_bit())
  4804  0F9B  318F  277B  318F   	fcall	_OW_read_bit
  4805  0F9E  3A00               	xorlw	0
  4806  0F9F  1D03               	btfss	3,2
  4807                           
  4808                           ;1-wire.h: 180: result |= 0x80;
  4809  0FA0  17F4               	bsf	OW_read_byte@result,7
  4810  0FA1  3001               	movlw	1
  4811  0FA2  00F3               	movwf	??_OW_read_byte
  4812  0FA3  0873               	movf	??_OW_read_byte,w
  4813  0FA4  07F5               	addwf	OW_read_byte@loop,f
  4814  0FA5  3008               	movlw	8
  4815  0FA6  0275               	subwf	OW_read_byte@loop,w
  4816  0FA7  1C03               	skipc
  4817  0FA8  2F9A               	goto	L5
  4818  0FA9                     l1559:	
  4819                           
  4820                           ;1-wire.h: 181: }
  4821                           ;1-wire.h: 182: return result;
  4822  0FA9  0874               	movf	OW_read_byte@result,w
  4823  0FAA  0008               	return
  4824  0FAB                     __end_of_OW_read_byte:	
  4825                           
  4826                           	psect	text17
  4827  0F7B                     __ptext17:	
  4828 ;; *************** function _OW_read_bit *****************
  4829 ;; Defined at:
  4830 ;;		line 134 in file "1-wire.h"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;		None
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;  read_data       1    2[COMMON] unsigned char 
  4835 ;; Return value:  Size  Location     Type
  4836 ;;                  1    wreg      unsigned char 
  4837 ;; Registers used:
  4838 ;;		wreg, status,2, status,0, pclath, cstack
  4839 ;; Tracked objects:
  4840 ;;		On entry : 0/0
  4841 ;;		On exit  : 0/0
  4842 ;;		Unchanged: 0/0
  4843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4845 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4846 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;Total ram usage:        2 bytes
  4849 ;; Hardware stack levels used:    1
  4850 ;; Hardware stack levels required when called:    1
  4851 ;; This function calls:
  4852 ;;		_drive_OW_high
  4853 ;;		_drive_OW_low
  4854 ;;		_read_OW
  4855 ;; This function is called by:
  4856 ;;		_OW_read_byte
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           
  4861                           ;psect for function _OW_read_bit
  4862  0F7B                     _OW_read_bit:	
  4863                           
  4864                           ;1-wire.h: 136: unsigned char read_data;
  4865                           ;1-wire.h: 138: drive_OW_low();
  4866                           
  4867                           ;incstack = 0
  4868                           ; Regs used in _OW_read_bit: [wreg+status,2+status,0+pclath+cstack]
  4869  0F7B  318E  26E8  318F   	fcall	_drive_OW_low
  4870                           
  4871                           ;1-wire.h: 139: _delay((unsigned long)((6)*(32000000/4000000.0)));
  4872  0F7E  3010               	movlw	16
  4873  0F7F                     u2427:	
  4874  0F7F  0B89               	decfsz	9,f
  4875  0F80  2F7F               	goto	u2427
  4876                           
  4877                           ;1-wire.h: 140: drive_OW_high ();
  4878  0F81  318E  26E4  318F   	fcall	_drive_OW_high
  4879                           
  4880                           ;1-wire.h: 141: _delay((unsigned long)((9)*(32000000/4000000.0)));
  4881  0F84  3018               	movlw	24
  4882  0F85                     u2437:	
  4883  0F85  0B89               	decfsz	9,f
  4884  0F86  2F85               	goto	u2437
  4885                           
  4886                           ;1-wire.h: 142: read_data = read_OW();
  4887  0F87  3180  2005  318F   	fcall	_read_OW
  4888  0F8A  00F1               	movwf	??_OW_read_bit
  4889  0F8B  0871               	movf	??_OW_read_bit,w
  4890  0F8C  00F2               	movwf	OW_read_bit@read_data
  4891                           
  4892                           ;1-wire.h: 143: _delay((unsigned long)((65)*(32000000/4000000.0)));
  4893  0F8D  30AD               	movlw	173
  4894  0F8E                     u2447:	
  4895  0F8E  0B89               	decfsz	9,f
  4896  0F8F  2F8E               	goto	u2447
  4897  0F90  0000               	nop
  4898                           
  4899                           ;1-wire.h: 144: return read_data;
  4900  0F91  0872               	movf	OW_read_bit@read_data,w
  4901  0F92  0008               	return
  4902  0F93                     __end_of_OW_read_bit:	
  4903                           
  4904                           	psect	text18
  4905  0005                     __ptext18:	
  4906 ;; *************** function _read_OW *****************
  4907 ;; Defined at:
  4908 ;;		line 50 in file "1-wire.h"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;		None
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;  read_data       1    0[COMMON] unsigned char 
  4913 ;; Return value:  Size  Location     Type
  4914 ;;                  1    wreg      unsigned char 
  4915 ;; Registers used:
  4916 ;;		wreg, status,2
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/0
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4923 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4925 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4926 ;;Total ram usage:        1 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; This function calls:
  4929 ;;		Nothing
  4930 ;; This function is called by:
  4931 ;;		_OW_reset_pulse
  4932 ;;		_OW_read_bit
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           
  4937                           ;psect for function _read_OW
  4938  0005                     _read_OW:	
  4939                           
  4940                           ;1-wire.h: 52: unsigned char read_data=0;
  4941                           
  4942                           ;incstack = 0
  4943                           ; Regs used in _read_OW: [wreg+status,2]
  4944  0005  01F0               	clrf	read_OW@read_data
  4945                           
  4946                           ;1-wire.h: 53: LATAbits.LATA5 = 1;
  4947  0006  0140               	movlb	0	; select bank0
  4948  0007  1698               	bsf	24,5	;volatile
  4949                           
  4950                           ;1-wire.h: 54: if (1 == PORTAbits.RA5)
  4951  0008  1E8C               	btfss	12,5	;volatile
  4952  0009  280D               	goto	l1323
  4953                           
  4954                           ;1-wire.h: 55: read_data = 1;
  4955  000A  01F0               	clrf	read_OW@read_data
  4956  000B  0AF0               	incf	read_OW@read_data,f
  4957  000C  280E               	goto	l1325
  4958  000D                     l1323:	
  4959                           
  4960                           ;1-wire.h: 56: else
  4961                           ;1-wire.h: 57: read_data = 0;
  4962  000D  01F0               	clrf	read_OW@read_data
  4963  000E                     l1325:	
  4964                           
  4965                           ;1-wire.h: 58: return read_data;
  4966  000E  0870               	movf	read_OW@read_data,w
  4967  000F  0008               	return
  4968  0010                     __end_of_read_OW:	
  4969                           
  4970                           	psect	text19
  4971  0EE8                     __ptext19:	
  4972 ;; *************** function _drive_OW_low *****************
  4973 ;; Defined at:
  4974 ;;		line 24 in file "1-wire.h"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;		None
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;		None
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  1    wreg      void 
  4981 ;; Registers used:
  4982 ;;		None
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;Total ram usage:        0 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; This function calls:
  4995 ;;		Nothing
  4996 ;; This function is called by:
  4997 ;;		_OW_reset_pulse
  4998 ;;		_OW_write_bit
  4999 ;;		_OW_read_bit
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           
  5004                           ;psect for function _drive_OW_low
  5005  0EE8                     _drive_OW_low:	
  5006                           
  5007                           ;1-wire.h: 26: TRISAbits.TRISA5 = 0;
  5008                           
  5009                           ;incstack = 0
  5010                           ; Regs used in _drive_OW_low: []
  5011  0EE8  0140               	movlb	0	; select bank0
  5012  0EE9  1292               	bcf	18,5	;volatile
  5013                           
  5014                           ;1-wire.h: 27: LATAbits.LATA5=0;
  5015  0EEA  1298               	bcf	24,5	;volatile
  5016  0EEB  0008               	return
  5017  0EEC                     __end_of_drive_OW_low:	
  5018                           
  5019                           	psect	text20
  5020  0EE4                     __ptext20:	
  5021 ;; *************** function _drive_OW_high *****************
  5022 ;; Defined at:
  5023 ;;		line 37 in file "1-wire.h"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;		None
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;		None
  5028 ;; Return value:  Size  Location     Type
  5029 ;;                  1    wreg      void 
  5030 ;; Registers used:
  5031 ;;		None
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5041 ;;Total ram usage:        0 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; This function calls:
  5044 ;;		Nothing
  5045 ;; This function is called by:
  5046 ;;		_OW_reset_pulse
  5047 ;;		_OW_write_bit
  5048 ;;		_OW_read_bit
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           
  5052                           
  5053                           ;psect for function _drive_OW_high
  5054  0EE4                     _drive_OW_high:	
  5055                           
  5056                           ;1-wire.h: 39: TRISAbits.TRISA5 = 0;
  5057                           
  5058                           ;incstack = 0
  5059                           ; Regs used in _drive_OW_high: []
  5060  0EE4  0140               	movlb	0	; select bank0
  5061  0EE5  1292               	bcf	18,5	;volatile
  5062                           
  5063                           ;1-wire.h: 40: LATAbits.LATA5 = 1;
  5064  0EE6  1698               	bsf	24,5	;volatile
  5065  0EE7  0008               	return
  5066  0EE8                     __end_of_drive_OW_high:	
  5067                           
  5068                           	psect	text21
  5069  0FAB                     __ptext21:	
  5070 ;; *************** function _Lcd_Write_String *****************
  5071 ;; Defined at:
  5072 ;;		line 97 in file "lcd.h"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;  a               2    5[COMMON] PTR unsigned char 
  5075 ;;		 -> STR_4(16), main@buffer(20), STR_2(16), 
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;  i               2    8[COMMON] int 
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  1    wreg      void 
  5080 ;; Registers used:
  5081 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5087 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5088 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5089 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5090 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5091 ;;Total ram usage:        5 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    2
  5094 ;; This function calls:
  5095 ;;		_Lcd_Write_Char
  5096 ;; This function is called by:
  5097 ;;		_main
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           
  5102                           ;psect for function _Lcd_Write_String
  5103  0FAB                     _Lcd_Write_String:	
  5104                           
  5105                           ;lcd.h: 99: int i;
  5106                           ;lcd.h: 100: for(i=0;a[i]!='\0';i++)
  5107                           
  5108                           ;incstack = 0
  5109                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5110  0FAB  01F8               	clrf	Lcd_Write_String@i
  5111  0FAC  01F9               	clrf	Lcd_Write_String@i+1
  5112  0FAD                     l1601:	
  5113  0FAD  0875               	movf	Lcd_Write_String@a,w
  5114  0FAE  0778               	addwf	Lcd_Write_String@i,w
  5115  0FAF  0084               	movwf	4
  5116  0FB0  0876               	movf	Lcd_Write_String@a+1,w
  5117  0FB1  3D79               	addwfc	Lcd_Write_String@i+1,w
  5118  0FB2  0085               	movwf	5
  5119  0FB3  0012               	moviw fsr0++
  5120  0FB4  1903               	btfsc	3,2
  5121  0FB5  0008               	return
  5122                           
  5123                           ;lcd.h: 101: Lcd_Write_Char(a[i]);
  5124  0FB6  0875               	movf	Lcd_Write_String@a,w
  5125  0FB7  0778               	addwf	Lcd_Write_String@i,w
  5126  0FB8  0084               	movwf	4
  5127  0FB9  0876               	movf	Lcd_Write_String@a+1,w
  5128  0FBA  3D79               	addwfc	Lcd_Write_String@i+1,w
  5129  0FBB  0085               	movwf	5
  5130  0FBC  0800               	movf	0,w	;code access
  5131  0FBD  3180  2034  318F   	fcall	_Lcd_Write_Char
  5132  0FC0  3001               	movlw	1
  5133  0FC1  07F8               	addwf	Lcd_Write_String@i,f
  5134  0FC2  3000               	movlw	0
  5135  0FC3  3DF9               	addwfc	Lcd_Write_String@i+1,f
  5136  0FC4  2FAD               	goto	l1601
  5137  0FC5                     __end_of_Lcd_Write_String:	
  5138                           
  5139                           	psect	text22
  5140  0034                     __ptext22:	
  5141 ;; *************** function _Lcd_Write_Char *****************
  5142 ;; Defined at:
  5143 ;;		line 81 in file "lcd.h"
  5144 ;; Parameters:    Size  Location     Type
  5145 ;;  a               1    wreg     unsigned char 
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;  a               1    4[COMMON] unsigned char 
  5148 ;;  y               1    3[COMMON] unsigned char 
  5149 ;;  temp            1    2[COMMON] unsigned char 
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  1    wreg      void 
  5152 ;; Registers used:
  5153 ;;		wreg, status,2, status,0, pclath, cstack
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/0
  5156 ;;		On exit  : 0/0
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5160 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5161 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5162 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5163 ;;Total ram usage:        4 bytes
  5164 ;; Hardware stack levels used:    1
  5165 ;; Hardware stack levels required when called:    1
  5166 ;; This function calls:
  5167 ;;		_Lcd_Port
  5168 ;; This function is called by:
  5169 ;;		_Lcd_Write_String
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           
  5174                           ;psect for function _Lcd_Write_Char
  5175  0034                     _Lcd_Write_Char:	
  5176                           
  5177                           ;incstack = 0
  5178                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  5179                           ;Lcd_Write_Char@a stored from wreg
  5180  0034  00F4               	movwf	Lcd_Write_Char@a
  5181                           
  5182                           ;lcd.h: 83: char temp,y;
  5183                           ;lcd.h: 84: temp = a&0x0F;
  5184  0035  0874               	movf	Lcd_Write_Char@a,w
  5185  0036  390F               	andlw	15
  5186  0037  00F1               	movwf	??_Lcd_Write_Char
  5187  0038  0871               	movf	??_Lcd_Write_Char,w
  5188  0039  00F2               	movwf	Lcd_Write_Char@temp
  5189                           
  5190                           ;lcd.h: 85: y = a&0xF0;
  5191  003A  0874               	movf	Lcd_Write_Char@a,w
  5192  003B  39F0               	andlw	240
  5193  003C  00F1               	movwf	??_Lcd_Write_Char
  5194  003D  0871               	movf	??_Lcd_Write_Char,w
  5195  003E  00F3               	movwf	Lcd_Write_Char@y
  5196                           
  5197                           ;lcd.h: 86: RC0 = 1;
  5198  003F  0140               	movlb	0	; select bank0
  5199  0040  140E               	bsf	14,0	;volatile
  5200                           
  5201                           ;lcd.h: 87: Lcd_Port(y>>4);
  5202  0041  0873               	movf	Lcd_Write_Char@y,w
  5203  0042  00F1               	movwf	??_Lcd_Write_Char
  5204  0043  3004               	movlw	4
  5205  0044                     u1225:	
  5206  0044  36F1               	lsrf	??_Lcd_Write_Char,f
  5207  0045  0B89               	decfsz	9,f
  5208  0046  2844               	goto	u1225
  5209  0047  0871               	movf	??_Lcd_Write_Char,w
  5210  0048  318F  2763  3180   	fcall	_Lcd_Port
  5211                           
  5212                           ;lcd.h: 88: RC1 = 1;
  5213  004B  0140               	movlb	0	; select bank0
  5214  004C  148E               	bsf	14,1	;volatile
  5215                           
  5216                           ;lcd.h: 89: _delay((unsigned long)((40)*(32000000/4000000.0)));
  5217  004D  306A               	movlw	106
  5218  004E                     u2457:	
  5219  004E  0B89               	decfsz	9,f
  5220  004F  284E               	goto	u2457
  5221  0050  3200               	nop2
  5222                           
  5223                           ;lcd.h: 90: RC1 = 0;
  5224  0051  0140               	movlb	0	; select bank0
  5225  0052  108E               	bcf	14,1	;volatile
  5226                           
  5227                           ;lcd.h: 91: Lcd_Port(temp);
  5228  0053  0872               	movf	Lcd_Write_Char@temp,w
  5229  0054  318F  2763  3180   	fcall	_Lcd_Port
  5230                           
  5231                           ;lcd.h: 92: RC1 = 1;
  5232  0057  0140               	movlb	0	; select bank0
  5233  0058  148E               	bsf	14,1	;volatile
  5234                           
  5235                           ;lcd.h: 93: _delay((unsigned long)((40)*(32000000/4000000.0)));
  5236  0059  306A               	movlw	106
  5237  005A                     u2467:	
  5238  005A  0B89               	decfsz	9,f
  5239  005B  285A               	goto	u2467
  5240  005C  3200               	nop2
  5241                           
  5242                           ;lcd.h: 94: RC1 = 0;
  5243  005D  0140               	movlb	0	; select bank0
  5244  005E  108E               	bcf	14,1	;volatile
  5245  005F  0008               	return
  5246  0060                     __end_of_Lcd_Write_Char:	
  5247                           
  5248                           	psect	text23
  5249  0EFA                     __ptext23:	
  5250 ;; *************** function _Lcd_Shift_Left *****************
  5251 ;; Defined at:
  5252 ;;		line 110 in file "lcd.h"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;		None
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;		None
  5257 ;; Return value:  Size  Location     Type
  5258 ;;                  1    wreg      void 
  5259 ;; Registers used:
  5260 ;;		wreg, status,2, status,0, pclath, cstack
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;Total ram usage:        0 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:    2
  5273 ;; This function calls:
  5274 ;;		_Lcd_Cmd
  5275 ;; This function is called by:
  5276 ;;		_main
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           
  5281                           ;psect for function _Lcd_Shift_Left
  5282  0EFA                     _Lcd_Shift_Left:	
  5283                           
  5284                           ;lcd.h: 112: Lcd_Cmd(0x01);
  5285                           
  5286                           ;incstack = 0
  5287                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  5288  0EFA  3001               	movlw	1
  5289  0EFB  318F  274F  318E   	fcall	_Lcd_Cmd
  5290                           
  5291                           ;lcd.h: 113: Lcd_Cmd(0x08);
  5292  0EFE  3008               	movlw	8
  5293  0EFF  318F  274F         	fcall	_Lcd_Cmd
  5294  0F01  0008               	return
  5295  0F02                     __end_of_Lcd_Shift_Left:	
  5296                           
  5297                           	psect	text24
  5298  0094                     __ptext24:	
  5299 ;; *************** function _Lcd_Set_Cursor *****************
  5300 ;; Defined at:
  5301 ;;		line 41 in file "lcd.h"
  5302 ;; Parameters:    Size  Location     Type
  5303 ;;  a               1    wreg     unsigned char 
  5304 ;;  b               1    3[COMMON] unsigned char 
  5305 ;; Auto vars:     Size  Location     Type
  5306 ;;  a               1    6[COMMON] unsigned char 
  5307 ;;  temp            1    9[COMMON] unsigned char 
  5308 ;;  y               1    8[COMMON] unsigned char 
  5309 ;;  z               1    7[COMMON] unsigned char 
  5310 ;; Return value:  Size  Location     Type
  5311 ;;                  1    wreg      void 
  5312 ;; Registers used:
  5313 ;;		wreg, status,2, status,0, pclath, cstack
  5314 ;; Tracked objects:
  5315 ;;		On entry : 0/0
  5316 ;;		On exit  : 0/0
  5317 ;;		Unchanged: 0/0
  5318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5319 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5320 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5321 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5322 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5323 ;;Total ram usage:        7 bytes
  5324 ;; Hardware stack levels used:    1
  5325 ;; Hardware stack levels required when called:    2
  5326 ;; This function calls:
  5327 ;;		_Lcd_Cmd
  5328 ;; This function is called by:
  5329 ;;		_main
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           
  5334                           ;psect for function _Lcd_Set_Cursor
  5335  0094                     _Lcd_Set_Cursor:	
  5336                           
  5337                           ;incstack = 0
  5338                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  5339                           ;Lcd_Set_Cursor@a stored from wreg
  5340  0094  00F6               	movwf	Lcd_Set_Cursor@a
  5341                           
  5342                           ;lcd.h: 43: char temp,z,y;
  5343                           ;lcd.h: 44: if(a == 1)
  5344  0095  0376               	decf	Lcd_Set_Cursor@a,w
  5345  0096  1D03               	btfss	3,2
  5346  0097  28B4               	goto	l1575
  5347                           
  5348                           ;lcd.h: 45: {
  5349                           ;lcd.h: 46: temp = 0x80 + b - 1;
  5350  0098  0873               	movf	Lcd_Set_Cursor@b,w
  5351  0099  3E7F               	addlw	127
  5352  009A  00F4               	movwf	??_Lcd_Set_Cursor
  5353  009B  0874               	movf	??_Lcd_Set_Cursor,w
  5354  009C  00F9               	movwf	Lcd_Set_Cursor@temp
  5355                           
  5356                           ;lcd.h: 47: z = temp>>4;
  5357  009D  0879               	movf	Lcd_Set_Cursor@temp,w
  5358  009E  00F4               	movwf	??_Lcd_Set_Cursor
  5359  009F  3004               	movlw	4
  5360  00A0                     u1545:	
  5361  00A0  36F4               	lsrf	??_Lcd_Set_Cursor,f
  5362  00A1  0B89               	decfsz	9,f
  5363  00A2  28A0               	goto	u1545
  5364  00A3  0874               	movf	??_Lcd_Set_Cursor,w
  5365  00A4  00F5               	movwf	??_Lcd_Set_Cursor+1
  5366  00A5  0875               	movf	??_Lcd_Set_Cursor+1,w
  5367  00A6  00F7               	movwf	Lcd_Set_Cursor@z
  5368                           
  5369                           ;lcd.h: 48: y = temp & 0x0F;
  5370  00A7  0879               	movf	Lcd_Set_Cursor@temp,w
  5371  00A8  390F               	andlw	15
  5372  00A9  00F4               	movwf	??_Lcd_Set_Cursor
  5373  00AA  0874               	movf	??_Lcd_Set_Cursor,w
  5374  00AB  00F8               	movwf	Lcd_Set_Cursor@y
  5375                           
  5376                           ;lcd.h: 49: Lcd_Cmd(z);
  5377  00AC  0877               	movf	Lcd_Set_Cursor@z,w
  5378  00AD  318F  274F  3180   	fcall	_Lcd_Cmd
  5379                           
  5380                           ;lcd.h: 50: Lcd_Cmd(y);
  5381  00B0  0878               	movf	Lcd_Set_Cursor@y,w
  5382  00B1  318F  274F         	fcall	_Lcd_Cmd
  5383                           
  5384                           ;lcd.h: 51: }
  5385  00B3  0008               	return
  5386  00B4                     l1575:	
  5387                           
  5388                           ;lcd.h: 52: else if(a == 2)
  5389  00B4  3002               	movlw	2
  5390  00B5  0676               	xorwf	Lcd_Set_Cursor@a,w
  5391  00B6  1D03               	btfss	3,2
  5392  00B7  0008               	return
  5393                           
  5394                           ;lcd.h: 53: {
  5395                           ;lcd.h: 54: temp = 0xC0 + b - 1;
  5396  00B8  0873               	movf	Lcd_Set_Cursor@b,w
  5397  00B9  3EBF               	addlw	191
  5398  00BA  00F4               	movwf	??_Lcd_Set_Cursor
  5399  00BB  0874               	movf	??_Lcd_Set_Cursor,w
  5400  00BC  00F9               	movwf	Lcd_Set_Cursor@temp
  5401                           
  5402                           ;lcd.h: 55: z = temp>>4;
  5403  00BD  0879               	movf	Lcd_Set_Cursor@temp,w
  5404  00BE  00F4               	movwf	??_Lcd_Set_Cursor
  5405  00BF  3004               	movlw	4
  5406  00C0                     u1565:	
  5407  00C0  36F4               	lsrf	??_Lcd_Set_Cursor,f
  5408  00C1  0B89               	decfsz	9,f
  5409  00C2  28C0               	goto	u1565
  5410  00C3  0874               	movf	??_Lcd_Set_Cursor,w
  5411  00C4  00F5               	movwf	??_Lcd_Set_Cursor+1
  5412  00C5  0875               	movf	??_Lcd_Set_Cursor+1,w
  5413  00C6  00F7               	movwf	Lcd_Set_Cursor@z
  5414                           
  5415                           ;lcd.h: 56: y = temp & 0x0F;
  5416  00C7  0879               	movf	Lcd_Set_Cursor@temp,w
  5417  00C8  390F               	andlw	15
  5418  00C9  00F4               	movwf	??_Lcd_Set_Cursor
  5419  00CA  0874               	movf	??_Lcd_Set_Cursor,w
  5420  00CB  00F8               	movwf	Lcd_Set_Cursor@y
  5421                           
  5422                           ;lcd.h: 57: Lcd_Cmd(z);
  5423  00CC  0877               	movf	Lcd_Set_Cursor@z,w
  5424  00CD  318F  274F  3180   	fcall	_Lcd_Cmd
  5425                           
  5426                           ;lcd.h: 58: Lcd_Cmd(y);
  5427  00D0  0878               	movf	Lcd_Set_Cursor@y,w
  5428  00D1  318F  274F         	fcall	_Lcd_Cmd
  5429  00D3  0008               	return
  5430  00D4                     __end_of_Lcd_Set_Cursor:	
  5431                           
  5432                           	psect	text25
  5433  00D4                     __ptext25:	
  5434 ;; *************** function _Lcd_Init *****************
  5435 ;; Defined at:
  5436 ;;		line 62 in file "lcd.h"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;		None
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;		None
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  1    wreg      void 
  5443 ;; Registers used:
  5444 ;;		wreg, status,2, status,0, pclath, cstack
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5452 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5453 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5454 ;;Total ram usage:        1 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; Hardware stack levels required when called:    2
  5457 ;; This function calls:
  5458 ;;		_Lcd_Cmd
  5459 ;;		_Lcd_Port
  5460 ;; This function is called by:
  5461 ;;		_main
  5462 ;; This function uses a non-reentrant model
  5463 ;;
  5464                           
  5465                           
  5466                           ;psect for function _Lcd_Init
  5467  00D4                     _Lcd_Init:	
  5468                           
  5469                           ;lcd.h: 64: Lcd_Port(0x00);
  5470                           
  5471                           ;incstack = 0
  5472                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  5473  00D4  3000               	movlw	0
  5474  00D5  318F  2763  3180   	fcall	_Lcd_Port
  5475                           
  5476                           ;lcd.h: 65: _delay((unsigned long)((20)*(32000000/4000.0)));
  5477  00D8  30D0               	movlw	208
  5478  00D9  00F3               	movwf	??_Lcd_Init
  5479  00DA  30CA               	movlw	202
  5480  00DB                     u2477:	
  5481  00DB  0B89               	decfsz	9,f
  5482  00DC  28DB               	goto	u2477
  5483  00DD  0BF3               	decfsz	??_Lcd_Init,f
  5484  00DE  28DB               	goto	u2477
  5485                           
  5486                           ;lcd.h: 66: Lcd_Cmd(0x03);
  5487  00DF  3003               	movlw	3
  5488  00E0  318F  274F  3180   	fcall	_Lcd_Cmd
  5489                           
  5490                           ;lcd.h: 67: _delay((unsigned long)((10)*(32000000/4000.0)));
  5491  00E3  3068               	movlw	104
  5492  00E4  00F3               	movwf	??_Lcd_Init
  5493  00E5  30E4               	movlw	228
  5494  00E6                     u2487:	
  5495  00E6  0B89               	decfsz	9,f
  5496  00E7  28E6               	goto	u2487
  5497  00E8  0BF3               	decfsz	??_Lcd_Init,f
  5498  00E9  28E6               	goto	u2487
  5499  00EA  3200               	nop2
  5500                           
  5501                           ;lcd.h: 68: Lcd_Cmd(0x03);
  5502  00EB  3003               	movlw	3
  5503  00EC  318F  274F  3180   	fcall	_Lcd_Cmd
  5504                           
  5505                           ;lcd.h: 69: _delay((unsigned long)((20)*(32000000/4000.0)));
  5506  00EF  30D0               	movlw	208
  5507  00F0  00F3               	movwf	??_Lcd_Init
  5508  00F1  30CA               	movlw	202
  5509  00F2                     u2497:	
  5510  00F2  0B89               	decfsz	9,f
  5511  00F3  28F2               	goto	u2497
  5512  00F4  0BF3               	decfsz	??_Lcd_Init,f
  5513  00F5  28F2               	goto	u2497
  5514                           
  5515                           ;lcd.h: 70: Lcd_Cmd(0x03);
  5516  00F6  3003               	movlw	3
  5517  00F7  318F  274F  3180   	fcall	_Lcd_Cmd
  5518                           
  5519                           ;lcd.h: 72: Lcd_Cmd(0x02);
  5520  00FA  3002               	movlw	2
  5521  00FB  318F  274F  3180   	fcall	_Lcd_Cmd
  5522                           
  5523                           ;lcd.h: 73: Lcd_Cmd(0x02);
  5524  00FE  3002               	movlw	2
  5525  00FF  318F  274F  3180   	fcall	_Lcd_Cmd
  5526                           
  5527                           ;lcd.h: 74: Lcd_Cmd(0x08);
  5528  0102  3008               	movlw	8
  5529  0103  318F  274F  3180   	fcall	_Lcd_Cmd
  5530                           
  5531                           ;lcd.h: 75: Lcd_Cmd(0x00);
  5532  0106  3000               	movlw	0
  5533  0107  318F  274F  3180   	fcall	_Lcd_Cmd
  5534                           
  5535                           ;lcd.h: 76: Lcd_Cmd(0x0C);
  5536  010A  300C               	movlw	12
  5537  010B  318F  274F  3180   	fcall	_Lcd_Cmd
  5538                           
  5539                           ;lcd.h: 77: Lcd_Cmd(0x00);
  5540  010E  3000               	movlw	0
  5541  010F  318F  274F  3180   	fcall	_Lcd_Cmd
  5542                           
  5543                           ;lcd.h: 78: Lcd_Cmd(0x06);
  5544  0112  3006               	movlw	6
  5545  0113  318F  274F         	fcall	_Lcd_Cmd
  5546  0115  0008               	return
  5547  0116                     __end_of_Lcd_Init:	
  5548                           
  5549                           	psect	text26
  5550  0EF2                     __ptext26:	
  5551 ;; *************** function _Lcd_Clear *****************
  5552 ;; Defined at:
  5553 ;;		line 35 in file "lcd.h"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;		None
  5556 ;; Auto vars:     Size  Location     Type
  5557 ;;		None
  5558 ;; Return value:  Size  Location     Type
  5559 ;;                  2  121[None  ] int 
  5560 ;; Registers used:
  5561 ;;		wreg, status,2, status,0, pclath, cstack
  5562 ;; Tracked objects:
  5563 ;;		On entry : 0/0
  5564 ;;		On exit  : 0/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5571 ;;Total ram usage:        0 bytes
  5572 ;; Hardware stack levels used:    1
  5573 ;; Hardware stack levels required when called:    2
  5574 ;; This function calls:
  5575 ;;		_Lcd_Cmd
  5576 ;; This function is called by:
  5577 ;;		_main
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           
  5582                           ;psect for function _Lcd_Clear
  5583  0EF2                     _Lcd_Clear:	
  5584                           
  5585                           ;lcd.h: 37: Lcd_Cmd(0);
  5586                           
  5587                           ;incstack = 0
  5588                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  5589  0EF2  3000               	movlw	0
  5590  0EF3  318F  274F  318E   	fcall	_Lcd_Cmd
  5591                           
  5592                           ;lcd.h: 38: Lcd_Cmd(1);
  5593  0EF6  3001               	movlw	1
  5594  0EF7  318F  274F         	fcall	_Lcd_Cmd
  5595  0EF9  0008               	return
  5596  0EFA                     __end_of_Lcd_Clear:	
  5597                           
  5598                           	psect	text27
  5599  0F4F                     __ptext27:	
  5600 ;; *************** function _Lcd_Cmd *****************
  5601 ;; Defined at:
  5602 ;;		line 26 in file "lcd.h"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;  a               1    wreg     unsigned char 
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;  a               1    2[COMMON] unsigned char 
  5607 ;; Return value:  Size  Location     Type
  5608 ;;                  1    wreg      void 
  5609 ;; Registers used:
  5610 ;;		wreg, status,2, status,0, pclath, cstack
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5618 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5619 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5620 ;;Total ram usage:        2 bytes
  5621 ;; Hardware stack levels used:    1
  5622 ;; Hardware stack levels required when called:    1
  5623 ;; This function calls:
  5624 ;;		_Lcd_Port
  5625 ;; This function is called by:
  5626 ;;		_Lcd_Clear
  5627 ;;		_Lcd_Set_Cursor
  5628 ;;		_Lcd_Init
  5629 ;;		_Lcd_Shift_Left
  5630 ;;		_Lcd_Shift_Right
  5631 ;; This function uses a non-reentrant model
  5632 ;;
  5633                           
  5634                           
  5635                           ;psect for function _Lcd_Cmd
  5636  0F4F                     _Lcd_Cmd:	
  5637                           
  5638                           ;incstack = 0
  5639                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  5640                           ;Lcd_Cmd@a stored from wreg
  5641  0F4F  00F2               	movwf	Lcd_Cmd@a
  5642                           
  5643                           ;lcd.h: 28: RC0 = 0;
  5644  0F50  0140               	movlb	0	; select bank0
  5645  0F51  100E               	bcf	14,0	;volatile
  5646                           
  5647                           ;lcd.h: 29: Lcd_Port(a);
  5648  0F52  0872               	movf	Lcd_Cmd@a,w
  5649  0F53  318F  2763  318F   	fcall	_Lcd_Port
  5650                           
  5651                           ;lcd.h: 30: RC1 = 1;
  5652  0F56  0140               	movlb	0	; select bank0
  5653  0F57  148E               	bsf	14,1	;volatile
  5654                           
  5655                           ;lcd.h: 31: _delay((unsigned long)((8)*(32000000/4000.0)));
  5656  0F58  3054               	movlw	84
  5657  0F59  00F1               	movwf	??_Lcd_Cmd
  5658  0F5A  301C               	movlw	28
  5659  0F5B                     u2507:	
  5660  0F5B  0B89               	decfsz	9,f
  5661  0F5C  2F5B               	goto	u2507
  5662  0F5D  0BF1               	decfsz	??_Lcd_Cmd,f
  5663  0F5E  2F5B               	goto	u2507
  5664  0F5F  3200               	nop2
  5665                           
  5666                           ;lcd.h: 32: RC1 = 0;
  5667  0F60  0140               	movlb	0	; select bank0
  5668  0F61  108E               	bcf	14,1	;volatile
  5669  0F62  0008               	return
  5670  0F63                     __end_of_Lcd_Cmd:	
  5671                           
  5672                           	psect	text28
  5673  0F63                     __ptext28:	
  5674 ;; *************** function _Lcd_Port *****************
  5675 ;; Defined at:
  5676 ;;		line 4 in file "lcd.h"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;  a               1    wreg     unsigned char 
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;  a               1    0[COMMON] unsigned char 
  5681 ;; Return value:  Size  Location     Type
  5682 ;;                  1    wreg      void 
  5683 ;; Registers used:
  5684 ;;		wreg
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5691 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5694 ;;Total ram usage:        1 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; This function calls:
  5697 ;;		Nothing
  5698 ;; This function is called by:
  5699 ;;		_Lcd_Cmd
  5700 ;;		_Lcd_Init
  5701 ;;		_Lcd_Write_Char
  5702 ;; This function uses a non-reentrant model
  5703 ;;
  5704                           
  5705                           
  5706                           ;psect for function _Lcd_Port
  5707  0F63                     _Lcd_Port:	
  5708                           
  5709                           ;incstack = 0
  5710                           ; Regs used in _Lcd_Port: [wreg]
  5711                           ;Lcd_Port@a stored from wreg
  5712  0F63  00F0               	movwf	Lcd_Port@a
  5713                           
  5714                           ;lcd.h: 6: if(a & 1)
  5715  0F64  1C70               	btfss	Lcd_Port@a,0
  5716  0F65  2F69               	goto	l108
  5717                           
  5718                           ;lcd.h: 7: RC2 = 1;
  5719  0F66  0140               	movlb	0	; select bank0
  5720  0F67  150E               	bsf	14,2	;volatile
  5721  0F68  2F6B               	goto	l1333
  5722  0F69                     l108:	
  5723                           
  5724                           ;lcd.h: 8: else
  5725                           ;lcd.h: 9: RC2 = 0;
  5726  0F69  0140               	movlb	0	; select bank0
  5727  0F6A  110E               	bcf	14,2	;volatile
  5728  0F6B                     l1333:	
  5729                           
  5730                           ;lcd.h: 11: if(a & 2)
  5731  0F6B  1CF0               	btfss	Lcd_Port@a,1
  5732  0F6C  2F6F               	goto	l110
  5733                           
  5734                           ;lcd.h: 12: RC3 = 1;
  5735  0F6D  158E               	bsf	14,3	;volatile
  5736  0F6E  2F70               	goto	l1337
  5737  0F6F                     l110:	
  5738                           
  5739                           ;lcd.h: 13: else
  5740                           ;lcd.h: 14: RC3 = 0;
  5741  0F6F  118E               	bcf	14,3	;volatile
  5742  0F70                     l1337:	
  5743                           
  5744                           ;lcd.h: 16: if(a & 4)
  5745  0F70  1D70               	btfss	Lcd_Port@a,2
  5746  0F71  2F74               	goto	l112
  5747                           
  5748                           ;lcd.h: 17: RC4 = 1;
  5749  0F72  160E               	bsf	14,4	;volatile
  5750  0F73  2F75               	goto	l1341
  5751  0F74                     l112:	
  5752                           
  5753                           ;lcd.h: 18: else
  5754                           ;lcd.h: 19: RC4 = 0;
  5755  0F74  120E               	bcf	14,4	;volatile
  5756  0F75                     l1341:	
  5757                           
  5758                           ;lcd.h: 21: if(a & 8)
  5759  0F75  1DF0               	btfss	Lcd_Port@a,3
  5760  0F76  2F79               	goto	l114
  5761                           
  5762                           ;lcd.h: 22: RC5 = 1;
  5763  0F77  168E               	bsf	14,5	;volatile
  5764  0F78  0008               	return
  5765  0F79                     l114:	
  5766                           
  5767                           ;lcd.h: 23: else
  5768                           ;lcd.h: 24: RC5 = 0;
  5769  0F79  128E               	bcf	14,5	;volatile
  5770  0F7A  0008               	return
  5771  0F7B                     __end_of_Lcd_Port:	
  5772  007E                     btemp	set	126	;btemp
  5773  007E                     wtemp0	set	126


Data Sizes:
    Strings     92
    Constant    8
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     80      80
    BANK2            80     17      17
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 64
		 -> STR_5(CODE[7]), main@deviceSerialNum(BANK1[64]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_3(CODE[3]), STR_1(CODE[33]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 64
		 -> main@buffer(BANK0[20]), main@deviceSerialNum(BANK1[64]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[16]), main@buffer(BANK0[20]), STR_2(CODE[16]), 


Critical Paths under _main in COMMON

    _main->___ftmul
    _sprintf->___lwdiv
    ___lwtoft->___ftpack
    ___ftmul->___ftpack
    ___ftdiv->___ftmul
    ___ftadd->___ftmul
    _OW_write_byte->_OW_write_bit
    _OW_reset_pulse->_read_OW
    _OW_read_byte->_OW_read_bit
    _OW_read_bit->_read_OW
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               142   142      0   13358
                                             39 BANK0     41    41      0
                                              0 BANK1     80    80      0
                                              0 BANK2     17    17      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                   _Lcd_Write_String
                       _OW_read_byte
                     _OW_reset_pulse
                      _OW_write_byte
                  _SYSTEM_Initialize
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             40    22     18    1718
                                              8 COMMON     4     4      0
                                              0 BANK0     32    14     18
                            ___lwdiv
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    1782
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             16    10      6    2139
                                              8 COMMON     6     0      6
                                              0 BANK0     10    10      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2093
                                             10 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftadd                                             13     7      6    3157
                                             26 BANK0     13     7      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OW_write_byte                                        3     3      0      91
                                              1 COMMON     3     3      0
                       _OW_write_bit
 ---------------------------------------------------------------------------------
 (2) _OW_write_bit                                         1     1      0      22
                                              0 COMMON     1     1      0
                      _drive_OW_high
                       _drive_OW_low
 ---------------------------------------------------------------------------------
 (1) _OW_reset_pulse                                       2     2      0      48
                                              1 COMMON     2     2      0
                      _drive_OW_high
                       _drive_OW_low
                            _read_OW
 ---------------------------------------------------------------------------------
 (1) _OW_read_byte                                         3     3      0     119
                                              3 COMMON     3     3      0
                        _OW_read_bit
 ---------------------------------------------------------------------------------
 (2) _OW_read_bit                                          2     2      0      48
                                              1 COMMON     2     2      0
                      _drive_OW_high
                       _drive_OW_low
                            _read_OW
 ---------------------------------------------------------------------------------
 (2) _read_OW                                              1     1      0      25
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _drive_OW_low                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _drive_OW_high                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     5     3      2     427
                                              5 COMMON     5     3      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     486
                                              3 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 COMMON     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _OW_read_byte
     _OW_read_bit
       _drive_OW_high
       _drive_OW_low
       _read_OW
   _OW_reset_pulse
     _drive_OW_high
     _drive_OW_low
     _read_OW
   _OW_write_byte
     _OW_write_bit
       _drive_OW_high
       _drive_OW_low
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   ___ftadd
     ___ftdiv (ARG)
       ___ftmul (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftdiv
     ___ftmul (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___ftmul
     ___ftpack
   ___lwtoft
     ___ftpack
   _sprintf
     ___lwdiv
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     50      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     11      11      10       21.2%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Mar 12 21:55:18 2018

                    __CFG_CP$OFF 0000              ___wmul@multiplicand 0072              main@deviceSerialNum 00A0  
                   ___ftadd@exp1 0046                     ___ftadd@exp2 0045                      __CFG_LVP$ON 0000  
                   ___ftadd@sign 0044                              l110 0F6F                              l112 0F74  
                            l114 0F79                              l108 0F69                              l160 0683  
                            l402 015B                              l234 0FCD                              l403 0163  
                            l165 075B                              l426 0375                              l186 03F8  
                            l395 0148                              _RC0 0070                              _RC1 0071  
                            _RC2 0072                              _RC3 0073                              _RC4 0074  
                            _RC5 0075              __end_of_OW_read_bit 0F93                     __CFG_BORV$LO 0000  
                            wreg 0009       main@serial_number_reversed 00E8                    __CFG_BBEN$OFF 0000  
                   __CFG_ZCD$OFF 0000                     ___ftdiv@cntr 0034                     ___ftdiv@sign 0039  
                           l2005 07EF                             l1323 000D                             l1341 0F75  
                           l1333 0F6B                             l1325 000E                             l1503 0086  
                           l1337 0F70                             l1601 0FAD                             l1441 0FC7  
                           l1507 008F                             l1435 0F18                             l1461 0125  
                           l1621 0406                             l1613 03F4                             l1471 014D  
                           l1463 012F                             l1711 0540                             l1703 0529  
                           l1377 0FF2                             l1473 0155                             l1465 0134  
                           l1457 011E                             l1721 0544                             l1705 052D  
                           l1641 0456                             l1633 0442                             l1625 0413  
                           l1811 01A7                             l1651 0473                             l1619 03FD  
                           l1723 03D2                             l1805 0191                             l1645 0458  
                           l1725 057E                             l1575 00B4                             l1559 0FA9  
                           l1735 02FE                             l1495 0068                             l1647 0466  
                           l1671 04C3                             l1745 0314                             l1833 0201  
                           l1825 01E8                             l1497 0074                             l1681 04D5  
                           l1665 049D                             l1657 0475                             l1763 0341  
                           l1739 0305                             l1691 0510                             l1659 048A  
                           l1931 05E0                             l1781 0387                             l1765 034B  
                           l1757 032E                             l1853 0250                             l1693 0513  
                           l1669 04A8                             l1925 05D1                             l1775 0367  
                           l1767 0350                             l1847 023A                             l1687 04F4  
                           l1919 05BB                             l1785 0399                             l1777 0371  
                           l1769 0354                             l1881 02AF                             l1865 028B  
                           l1937 0604                             l1795 03B4                             l1877 02A7  
                           l1869 0293                             l1983 0713                             l1987 0737  
                           l1979 06EF                             l1899 058A                             l1997 07D1  
                           STR_1 0808                             STR_2 1021                             STR_3 1038  
                           STR_4 1011                             STR_5 1031                             STR_6 1000  
                           u1225 0044                             u2025 01B9                             u2105 025C  
                           u1315 012A                             u2035 01C9                             u2115 026C  
                           u2045 01E9                             _LATA 0018                             u1335 0143  
                           u2055 01F8                             u2135 0294                             _LATC 001A  
                           u2065 0202                             u2145 029A                             u1425 006B  
                           u1265 0FCE                             u2305 07ED                             u2225 05DE  
                           u1355 0150                             u1275 0FD3                             u2235 0602  
                           u1445 0075                             u2317 05B2                             u2407 001F  
                           u2175 02B0                             u1455 007F                             u2327 06A7  
                           u1545 00A0                             u2417 002B                             u2185 02B6  
                           u1465 0087                             u2337 07D5                             u2507 0F5B  
                           u2427 0F7F                             u1395 016A                             u1635 046C  
                           u2347 07F5                             u1565 00C0                             u2437 0F85  
                           u2357 0FE8                             u2447 0F8E                             u2367 0FEE  
                           u2295 07CF                             u2457 004E                             u2377 0FF6  
                           u2467 005A                             u2387 0FFC                             u1675 04EA  
                           u2477 00DB                             u2397 0016                             u1925 0355  
                           u2487 00E6                             u1695 0503                             u2497 00F2  
                           u1865 032F                             u1955 0368                             u1895 0342  
  OW_reset_pulse@presence_detect 0072                             _WPUA 1F39                             _WPUC 1F4F  
                  __CFG_FCMEN$ON 0000           main@binaryTemperatureC 012F                ?_Lcd_Write_String 0075  
               read_OW@read_data 0070                             _main 0584                     ___ftpack@arg 0070  
           __end_of_OW_read_byte 0FAB                     ___ftpack@exp 0073                             fsr0h 0005  
                           fsr1h 0007                             indf0 0000                             fsr0l 0004  
                           indf1 0001                             fsr1l 0006                             btemp 007E  
        __size_of_OW_reset_pulse 0024                    __CFG_BOREN$ON 0000                             start 0003  
             ??_Lcd_Write_String 0077                  __end_of_Lcd_Cmd 0F63                    __CFG_CSWEN$ON 0000  
                  __CFG_MCLRE$ON 0000                     ___ftmul@cntr 0028                     ___ftmul@sign 0029  
                  ?_drive_OW_low 0070   __size_of_OSCILLATOR_Initialize 000A                    _drive_OW_high 0EE4  
  __end_of_OSCILLATOR_Initialize 0F0C                            ?_main 0070                  __end_of___ftadd 03CC  
                  __CFG_WDTE$OFF 0000                  __end_of___ftdiv 0223                  __end_of___ftmul 02D6  
                __end_of___lwdiv 0094                            _OSCEN 0891          __size_of_Lcd_Set_Cursor 0040  
                          _TRISA 0012                            _TRISC 0014                    __CFG_WRTB$OFF 0000  
                  __CFG_WRTC$OFF 0000          __size_of_Lcd_Shift_Left 0008                  __end_of_read_OW 0010  
                __end_of_isdigit 0F1A                    ___ftpack@sign 0074                            main@a 0127  
                          main@i 012A             __end_of_OW_write_bit 1000                            status 0003  
                          wtemp0 007E                  __end_of_sprintf 0584                 __end_of_Lcd_Init 0116  
               __end_of_Lcd_Port 0F7B                  __initialization 07FD                   ??_drive_OW_low 0070  
                   __end_of_main 07FD                   __CFG_SAFEN$OFF 0000                      _OW_read_bit 0F7B  
                 ?_drive_OW_high 0070                    main@tCprecise 012C                           ??_main 0047  
             __size_of_Lcd_Clear 0008                           _ANSELA 1F38                           _ANSELC 1F4E  
               __end_of___ftpack 017A               __CFG_RSTOSC$HFINT1 0000                           _ODCONA 1F3A  
                         _ODCONC 1F50                   __CFG_WDTCCS$SC 0000                 __end_of___lwtoft 0F4F  
                         _OSCFRQ 0893                        ??_Lcd_Cmd 0071          __size_of_Lcd_Write_Char 002C  
                 __CFG_PWRTE$OFF 0000                           ___wmul 0FC5                        ??___ftadd 0040  
                 __CFG_STVREN$ON 0000                        ??___ftdiv 0030                        ??___ftmul 0020  
                      ??___lwdiv 0074            ___ftmul@f3_as_product 0025                        ??_read_OW 0070  
                      ??_isdigit 0070            __end_of_OW_write_byte 0F3C            __size_of_OW_read_byte 0018  
                      ??_sprintf 0078                  Lcd_Set_Cursor@a 0076                  Lcd_Set_Cursor@b 0073  
                Lcd_Set_Cursor@y 0078                  Lcd_Set_Cursor@z 0077                _SYSTEM_Initialize 0EEC  
        __end_of__initialization 07FD                   _OW_reset_pulse 0010                       ___ftadd@f1 003A  
                     ___ftadd@f2 003D               ?_SYSTEM_Initialize 0070                __end_of_Lcd_Clear 0EFA  
                     ___ftdiv@f1 002D                       ___ftdiv@f2 002A                       ___ftdiv@f3 0035  
                     ___ftmul@f1 0078                       ___ftmul@f2 007B                   __pcstackCOMMON 0070  
                ??_drive_OW_high 0070              ??_SYSTEM_Initialize 0070                       ___lwtoft@c 0078  
                   _OW_read_byte 0F93                   _Lcd_Set_Cursor 0094                   _Lcd_Shift_Left 0EFA  
                      ?_Lcd_Init 0070                        ?_Lcd_Port 0070            __size_of_OW_write_bit 0020  
           __end_of_drive_OW_low 0EEC        __end_of_SYSTEM_Initialize 0EF2                     sprintf@width 003D  
         __end_of_OW_reset_pulse 0034            OW_write_bit@write_bit 0070                       __pmaintext 0584  
                        ?___wmul 0070                  __CFG_PPS1WAY$ON 0000        __size_of_Lcd_Write_String 001A  
                      ?___ftpack 0070           __end_of_Lcd_Set_Cursor 00D4                     _OW_write_bit 0FE0  
                      ?___lwtoft 0078           __end_of_Lcd_Shift_Left 0F02                          _OSCCON1 088D  
                        _OSCCON3 088F                          _OSCSTAT 0890                          _OSCTUNE 0892  
                     ??_Lcd_Init 0073                       ??_Lcd_Port 0070                  ?_OW_reset_pulse 0070  
                 _Lcd_Write_Char 0034                          _Lcd_Cmd 0F4F                 OW_read_byte@loop 0075  
                        ___ftadd 02D6                          ___ftdiv 017A                  __size_of___wmul 001B  
                        ___ftmul 0223                     ?_OW_read_bit 0070                          ___lwdiv 0060  
                     ??___ftpack 0075                  ?_Lcd_Set_Cursor 0073                          __ptext1 03CC  
                        __ptext2 0F0C                          __ptext3 0FC5                          __ptext4 0060  
                        __ptext5 0F3C                          __ptext6 0223                          __ptext7 017A  
                        __ptext8 02D6                          __ptext9 0116                       ??___lwtoft 007B  
                __CFG_WRTAPP$OFF 0000                __end_of_hexpowers 0808            _OSCILLATOR_Initialize 0F02  
                        _read_OW 0005                          _isdigit 0F0C                  ?_Lcd_Shift_Left 0070  
       ??_PIN_MANAGER_Initialize 0070                  __CFG_WRTSAF$OFF 0000       __size_of_SYSTEM_Initialize 0006  
                        _sprintf 03CC           __end_of_Lcd_Write_Char 0060             end_of_initialization 07FD  
        main@temperatureCprecise 0122          main@temperatureFprecise 006B                        Lcd_Port@a 0070  
              main@serial_number 00E0            __CFG_WDTCPS$WDTCPS_31 0000                        _PORTAbits 000C  
          __size_of_drive_OW_low 0004                        _TRISAbits 0012                 __CFG_FEXTOSC$OFF 0000  
                ?_Lcd_Write_Char 0070                Lcd_Write_String@a 0075                Lcd_Write_String@i 0078  
                    ___ftdiv@exp 0038                       main@buffer 0057                      ___ftmul@exp 0024  
                      _Lcd_Clear 0EF2                     _drive_OW_low 0EE8                   __end_of___wmul 0FE0  
               _Lcd_Write_String 0FAB           ?_OSCILLATOR_Initialize 0070              start_initialization 07FD  
__size_of_PIN_MANAGER_Initialize 0010               OW_read_byte@result 0074                __size_of_Lcd_Init 0042  
              __size_of_Lcd_Port 0018             OW_read_bit@read_data 0072                 __CFG_LPBOREN$OFF 0000  
                     ?_Lcd_Clear 0070                         ??___wmul 0074           __size_of_OW_write_byte 0012  
          __end_of_drive_OW_high 0EE8                  Lcd_Write_Char@a 0074                  Lcd_Write_Char@y 0073  
           __size_of_OW_read_bit 0018                __size_of___ftpack 0064                 ??_OW_reset_pulse 0071  
                      ___latbits 0002                __size_of___lwtoft 0013                    __pcstackBANK0 0020  
                  __pcstackBANK1 00A0                    __pcstackBANK2 0120                         ?_Lcd_Cmd 0070  
                    sprintf@flag 0033                      sprintf@prec 0036                 ___lwdiv@dividend 0072  
         _PIN_MANAGER_Initialize 0F1A                 ??_Lcd_Set_Cursor 0074                         ?___ftadd 003A  
                       ?___ftdiv 002A                         ?___ftmul 0078                         ?___lwdiv 0070  
               ??_Lcd_Shift_Left 0073                         ?_read_OW 0070                         ?_isdigit 0070  
                      _hexpowers 0800                 ___lwdiv@quotient 0075                         ?_sprintf 0020  
                  _OW_write_byte 0F2A                   ___wmul@product 0074                         _LATAbits 0018  
                       Lcd_Cmd@a 0072                      ??_Lcd_Clear 0073                __CFG_BBSIZE$BB512 0000  
              ___wmul@multiplier 0070                 ??_Lcd_Write_Char 0071                        main@tempH 0120  
                      main@tempL 006E                         _Lcd_Init 00D4                         _Lcd_Port 0F63  
                 ?_OW_write_byte 0070         __end_of_Lcd_Write_String 0FC5                 __size_of_Lcd_Cmd 0014  
        OW_write_byte@write_data 0072          ??_OSCILLATOR_Initialize 0070                 __size_of___ftadd 00F6  
               __size_of___ftdiv 00A9                 __size_of___ftmul 00B3                 __size_of___lwdiv 0034  
                       ___ftpack 0116                      _isdigit$378 0070                    ?_OW_read_byte 0070  
                       ___lwtoft 0F3C                       sprintf@idx 0032                       sprintf@len 003A  
                     sprintf@val 0034                 __size_of_read_OW 000B                 __size_of_isdigit 000E  
                ___lwdiv@divisor 0070                  ___lwdiv@counter 0077                         __ptext10 0EEC  
                       __ptext11 0F1A                         __ptext20 0EE4                         __ptext12 0F02  
                       __ptext21 0FAB                         __ptext13 0F2A                         __ptext22 0034  
                       __ptext14 0FE0                         __ptext23 0EFA                         __ptext15 0010  
                       __ptext24 0094                         __ptext16 0F93                         __ptext25 00D4  
                       __ptext17 0F7B                         __ptext26 0EF2                         __ptext18 0005  
                       __ptext27 0F4F                         __ptext19 0EE8                         __ptext28 0F63  
               __size_of_sprintf 01B8                    __size_of_main 0279             __CFG_WDTCWS$WDTCWS_7 0000  
                       main@flag 0125                         main@temp 0129                   ??_OW_read_byte 0073  
                  ?_OW_write_bit 0070                  ??_OW_write_byte 0071                         isdigit@c 0071  
             Lcd_Write_Char@temp 0072                        sprintf@ap 0037                        sprintf@cp 0038  
                      sprintf@sp 003C          ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000  
                  ??_OW_read_bit 0071               Lcd_Set_Cursor@temp 0079                   ??_OW_write_bit 0070  
                  __pstringtext1 0800                    __pstringtext2 1000                    __pstringtext3 1011  
                  __pstringtext4 1021                    __pstringtext5 1031                    __pstringtext6 1038  
                  __pstringtext7 0000                         sprintf@c 003F                         sprintf@f 0020  
 __end_of_PIN_MANAGER_Initialize 0F2A           __size_of_drive_OW_high 0004                OW_write_byte@loop 0073  
